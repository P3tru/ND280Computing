%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: ProcessedDataDist.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: Ben Still BlackMac
%%CreationDate: 3/23/11
%%BoundingBox: 0 0 718 474
%%HiResBoundingBox: 0 0 718 474
%%CropBox: 0 0 718 474
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.0 x406 R agm 4.4378 ct 5.1039%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 88 8%%BeginData: 10842 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FDA6FFFD07A8FFFFFFA8FD05FFA8FD0FFFFD07A8FFFFFFA8FD05FF%A8FFFFFFA8FD07FFA8FD42FFA8A8A87DA8A87DA8FFA87DFD05A87DA8A8A8%7DA87DA87DA87DA8FFA8A8FF7DA8A8FD047DA8FFA87DFD06A8FFA8A87D7D%A8FFFD04A87DA8FD43FF7DA87DA8A87D7DFF7DA8A8FF7D7D527D7DA87D7D%7DA87DA8527D7DFF7DA8FFA87DA87DA8A87D7DFF7DA8A8A87D7D52A8A8A8%52A852A8A8A852A87D7D7DFD44FFA8FFA8FD0FFFA8FFA8FD0BFFA8FFA8FD%11FFA8FD05FFA8FD5FFFA8A8FD7AFFFD04A87DA87DFD06A8FD73FFA87D7D%7DA8A87D52A87DA87DA8A8FD40FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFFD05A8FF7DFD06A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FD0EFFA8A8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FD80FFA8FD0CFFA8FD25FFFD27A8FD34FFA8A8A8FFA8A8A8FFA8A8A8FFA8%A8A8FFA8A8A8FFA8A8A8FFFD05A8FD09FFA8FD2DFFA8A8A8FFA8A8A8FFA8%A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8FD0DFFA8FD1CFFA8FD%08FFA8A8FD24FFA8FD08FFA8A8FD1BFFA8FD0DFFA8FD07FFFD04A8FFA8FF%FFFFA8FFA8A8A8FD07FFA8FD09FFA8FD0EFFA8A8FFA8FD12FFA8FD08FFA8%FD0BFFA8FFFD04A8FFA8A8FD09FFA8FD0CFFA8FD07FF5252522752527DA8%2752A8272752A8FD06FFA8AFFD07FFA8AFFD0DFFA82752A87D27FF52FD0F%FFA1C3C3CAC3CAC3CABCBCA8FD08FF7D27527DA85252277D277DFD08FFA8%FD15FFA87DA8277D52A87D52527D52527DFD07FFA8C3C3CAC3CAC3CAB5B5%A8FD0DFFA85252FF5252A87DFD0FFFCACAFFCAFFCACACAC39AFD09FF7D52%5252A8A85252A87D52FD09FFA8FD0CFFA8FD07FFA87D7D7D527D52527D7D%527D52FD08FFA8A8FFCAFFCAFFFFCAA1FD0EFFA8527D7DFD04527DA8FD0D%FFA8FD08FFA8A8FD08FF7D52A8FD0452A8FF527DFD08FFA8FD2AFFA8FD09%FFA8FD0DFFFD04A8FFFFA8A87DFD17FFA8FD1DFFA8FD0CFFA8FD0CFFA8FF%A8A8FD0CFFA8FD08FFA8A8FD24FFA8FD08FFA8A8FD09FFA8FFA8FFA8FFA8%FFA8FD09FFA8FD17FFA852A82752525227A8A8FD09FFA8FD09FFA8FD2DFF%A8FD0AFF527D7D525252277DA8FD0AFFA8FD0CFFA8FD09FFA87D52A8F8A8%527D277DFD09FFAFCAFD07FFAFA8FD0CFFA8FFFFA8A8FFA8FD11FFA1BCC3%FD07CAA8FD09FF527D7D52277D525252FD09FFA8FD0DFFA8FD09FFA8277D%2752527DA85252FD09FFA8B5BCCAC3CAC3CAC3C3A8FD0CFF527DFF527D7D%527D7D52A8A8FD0CFFCAB5CACACAC3CACACAA1FD0AFFFD0652A85252A8FD%09FFA8FD0CFFA8FD09FFFD04A8FD04FFA8FD0AFFA8A1FD07CAA1CAFD0CFF%7DA852A85227A87D5252277DFD0CFFA8FD08FFA8A8FD09FFA8FFA8FFA8FF%A8FFA8FD09FFA8FD2AFFA8FD09FFA8FD0CFFFD057D27A852FF525227FD15%FFA8FD1DFFA8FD0CFFA8FFFFFFA85252FD057DA8A87D7D527D525252A87D%A87DA8FFFFFFA8A8FD07FFA8FD0DFF527DA87D7DA852A8A8A87D7DFD0CFF%A8FD08FFA8A8FFFFFFA8A87DA8FD047D5252A8FD047DA852A85252A8FFFF%FFA8FD11FFA8277D52272752277D522727525252277D525252F87DFFFFFF%A8FD09FFA8FD2DFFA8FD04FFA8275227522752F85227A852275252275252%7D27FD05FFA8FD0CFFA8FFA8FFA8A87DA87DFD07A87DFD07A827A8FFFFA8%A8FD08FFA8A8FD24FFA8FD08FFA8A8FFA8FFA8A87DFD07A87DA8A8A87D7D%A8A8A8FFA8FFA8FFA8FD0EFFA8A8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFFD05A8FD09FFA8FFA8FFA8FFA8FFFFA87D7D7DFFFFFFA8A8%A87DA8FFA8FFFFA87DFFA8FFA8FFFFA87DFD0CFFA8A8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8A8FFA8A8FD33FFA8A8FF7D27FD0452%7D27A852277DA82752527D2752275252A8277DA827277DA8525227A8FFA8%FD5AFFA8FF7D527DA87D7DA87D527D7DA852277DA8527D527D277D7DA87D%7D527D52A8527D52FFFFA8FD59FFA8A8FD06FFCAFFFFFFA8FFFFA87DFFFF%FFAFA8A8A8FD0AFFCAFFA8FFA8FD5AFFA8A8A1C3C3A89AB5A1AFA8FFA1C3%A1BCC3AFA8CAC3A8BCFFA1CAA8C3BCCA9ACAB5BCA1CAA8AFFD59FFCACAC3%C3BCC3C3CAC3FFFFFFFD04C3B5CAFFFFBCFFC3B5CAFFBCFFC3BCC3CAC3BC%BCC3C3CACAFD56FFCACAC3C3BCC3C3CACAFD04FFCAC3CAC3C3CAFFFFFFC3%CAFFCACAFFFFCACAFFFFCAC3FFFFCAC3C3C3CAC3C3C3FD50FFCACAC3C3BC%C3C3CACAFD05FFCAC3C3CAC3CAFD04FFCAC3FFCABCFFFFFFCAC3CAFFFFFF%BCC3FFFFCAC3C3CACACAC3C3C3CACAFD48FFCACAC3CAC3C3C3CACAFD07FF%C3CACACAC3FD06FFC3CAFFC3FD05FFCACAFD04FFC3C3CAFFFFFFCAC3C3CA%FFFFCAC3C3CACAFD42FFCACAC3C3BCC3C3CACAFD08FFC3C3CAC3C3CAFD06%FFCAC3FFCAC3FD06FFC3CAFD04FFCAC3C3FD05FFC3C3C3CAFFFFC3C3C3CA%CAFD3DFFCAFD05C3CACAFD09FFC3C3CACAC3CAFD08FFC3FFFFC3CAFD07FF%C3FD06FFC3C3FD06FFCAC3C3C3FFFFFFCACAC3CACAFD36FFCACAC3C3BCC3%C3CACAFD0AFFCABCCACAC3C3FD09FFC3CAFFCAC3FD08FFC3C3FD06FFCABC%CAFD06FFCACAC3C3CAFFFFFFCAFD04C3CAFD31FFC3CAC3C3C3CACAFD0BFF%CAC3C3FFC3C3CAFD09FFCAC3FFFFC3FD0AFFC3FD08FFC3C3FD08FFCACAC3%CACAFFFFFFCACAC3C3C3CAFD2AFFCAC3C3BCC3C3CACAFD0DFFC3C3CACAC3%CAFD0BFFC3CAFFCAC3FD0AFFC3C3FD08FFC3C3CAFD09FFC3C3C3CACAFFFF%FFCACAC3C3C3CACAFD24FFC3CABCC3C3CACAFD0EFFCAC3CACAC3C3FD0CFF%CAC3FFFFC3FD0CFFC3CAFD08FFCAC3C3FD0BFFC3C3C3CAFD06FFC3C3C3CA%CAFD1CFFCACAC3C3BCFD04C3FD0FFFBCC3C3FFC3C3CAFD0CFFC3FCFFFFCA%C3FD0CFFCAFCFD0AFFCAC3FD0CFFCAFD04C3CAFD05FFCAC3C3C3CAFD07FF%A8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8AFA8BCFCA8A1C3A1CAFFFFA8FFA8%FFA8FFA8FFA8FFA8FFA8AFA8B59AFFA1C3A8FFA8FFFFA8A8FFA8FFA8FFA8%AF9ABCA8FFA1CAA8FFA8FFA8FFA8FFA8FFA8FFA8BCA8FFA8FFA8FFA8FFA8%FFA8A89AFFA8FFA8FFA8FFA8FFA8AFA8FFA8C3FCC4A8FFA8FFA8FFA8CAA1%A19ACAA8FFA8FFA8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFCAFFAFFF%A8FFA8A8A8FFFFFFA8FFA8FFA8FD05FFA8FFCAFFA8FFAFFFA8FFA8FFA8FF%A8FFFFFFA8FFA8FFAFFFA8FFA8FFA8FFA8FFA8FFA8FFA8A8A8FFAFFFA8FF%A8FFA8FFA8FFA8FFAFFFA8FFA8FFA8FFFFA8A8A8FFFFA8FFFFFFA8FFA8FF%A8FFA8FFA8FFAFFFCAFFA8FFA8A8A8FD18FFA8FFFFA8FD08FFA8A87DFD0A%FFFD04A8FFFFA8FD12FFA8A8A8FD17FFA8A8A8FFFFFFA8FFA8FD0DFFA8FF%FFFFA8A8FD07FFA8FD07FFA8FD07FFA8A87DA852FD07FF7D2752A8A8FD07%FFA8A87DA852A8FFA827FF7DA852A87D7D7DA87D5252FD047DFFA8A87D7D%A8FD05FFA8FD05FFA8FD08FFA8A8A87D7DFFFFFF7D7DA87DFFFD057DA8FD%047D52A8FFFFFFA8FD07FF7D527D52A87D27A87D52A8FD07FFA8FD0AFFA8%277DA8FD0BFFA8FFFFFFA852A827277D52277DFD04527DF85252FD04FFA8%A8FD04FF7D7D7DA8FFFFFF52527DFFFFA8FF7DA8FFFFFFA8FFA8FFFFFF7D%7D7D52522727527D52FD04275227A8FFFFFFA8A8FD05FFA852FF52277D52%52A87DF8A8FD06FFA8A8A8FD09FFA8A87D7DFD0AFFA8A8A8FFFFFF527D52%7DA8A8527D27FD067DA8FD04FFA8FD05FF7D7D5252522727522752275252%5227A8FFFFFFA8A8A8FFFFFFA8527DA8FD047DA827FD067DA8FFFFFFA8A8%FD06FF5252277D527DFD0552FD07FFA8FD19FFA8FD18FFA8A8FD04FFA827%7D7D52277D7DA85227527D5252A8FFFFFFA8FFA8FD0CFFA8FD0AFFA8A8FD%07FF7D7DA8FFA8FFA8FFA8A8A8FD05FFA8A8A8FD08FFA8A8A87DA87DA8A8%FFA8FD05FFA8A8A8FD07FFA87DFD06A8FD08FFA8A8FD04FF7DA8A8FFA8A8%A8FFA8FFFD05A8FD04FFA8A8A8FD08FF7DA87DFD04A8FD08FFA8A8FD18FF%7DFD09FF277DFD0452277D7DFD05FFA8A8A8FD08FF7D277D5252277DA8FD%08FFA8A8FD17FFA8FFA8FD08FF277D7D522752A8FD08FFA8A8FD08FF7D7D%7D527D525252A8A8FD05FFA87D7DA8A8FD06FF7D277D2752527D2752FD05%FF7D7DA87DA8FD07FF7DF87D527DF87DFD05FFA852A87DA8A8FD07FF527D%7D52527DA8A8FD05FFA87DA87DA8FD08FF7D27527D7D5227FD08FFA8A8FD%08FF7D527D7D27A8277D52FD07FFA8FD09FF527D527D527DA87D52FD06FF%A8A8FD09FF52A852A8A87D7DFD07FFA8A8A8FD08FF7D52527D275252FD08%FFA8FFA8FD08FF7D7D7D52FF7D7DFD08FFA8A8FD08FF7D2752272752A852%277DFD05FFA8A8A8FD17FFA8A8A8FD17FFA8A8FD08FFA82727527D7DF8A8%FD07FFA8A8A8FD17FFA8FD09FFFD06A8FFFFA8FD07FFA8FFFFFF7DFF7DA8%A8FFFFFFA8A8A8FFFFFFA8FD07FFA8FD0AFFA8A8A8FD0BFFA8A8FD08FFA8%A8FFA8FFA8A8FD08FFA8FFA8FFA8FD05FFFD04A8FFFFA8FF7DFD06FFA8A8%A8FD05FFA8FD11FFA8A8A8FFF8272727527D525227277D2727FD0452FD05%FFA8A8A8FD09FF7D27F8A8FD0AFFA8FD18FFFD04A8FD0427522727277D52%7D27275252277D27527D52277DA8FFA87D52527DA87D7DA8A8A87DA87D7D%7DA8A8A8527DFFFFA8FFA8277DA8A8A87D527DA87DFF7D7D52FD04A8FD05%FFA8FD0BFF7D7DFD0BFFA8A8FFFFFF52A87DA87D7D7DA852A852A87DA8A8%A852FFFFFFA8FFA8FF7DA8525227A87DA87DA87D7DFD05A87D7DA87DA87D%A8FF5227277D527D2727527DF82727525252277D522752FFA8A8A8FD07FF%A8FF7DA8A8A852FD09FFFD04A87DA87D7D527D7D5252A852A87DA87DA87D%A8A87D7DFFA8A8FFFFFF5227F82727277D275227527D2752A827527DFFFF%A8A8A8FD17FFA8A8FD0BFFA8FD0CFFA8FD09FF7D527D7D5252FD0AFFA8FF%525227F8525252A852527D27277D527D52277D7D277DFFA8A8FD05FF7DFD%11FFA8FFA8FD17FFA8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8A8A8FFA8A8A8FFFD0BA8FFA8A8A8FFA8A8A8FFA8A87DA852FD16%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFFD07A8FFA8A8A8FF%A8A8A8FFA8A8A8FFA8A8A8FFFD06A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFFFFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FD05FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFFFFF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8FD7EFFA8FFA8A8A8FFA8%A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8%FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFFD07A8FFA8%A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8%FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFFF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFFFFFA8FFFFFFA8FFA8FFA8FF%FFA8A8FFFFFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FD40FFA8FD71FFA87DA87DA87D7DA8FFA8A87DFFA8FFA8FF7D%FFA8FFFD07A8FD64FFFD04A87DA87D7DA8A87DA8FFA8A87D7DA87DA87D7D%7DA87D7DA87DA8FD64FFFD05A8FF7DFFA8A8A8FFA8A87DFD05A87DA87DA8%7DA87DA8FD91FFCAFD0BFFCAFD72FFC3BCBCCAC3FD06CAFFC3BCBCBCC3BC%C3FD6DFFCABCC3B5FD04BCB5B5BCCACABCFFC3CAB5C3FD6DFFCACACAFD05%C3B5CABCCACACAFFCACABCC3FD77FFCAFD75FFCAC3BCC3FD08CAC3FD73FF%CACACAB5C3B5BCBCC3B5B5BCB5BCFD72FFCAC3BCC3BCBCBCC3C3C3B5C3BC%BCCAFD72FFA8FD0FFFA8FFA8FFA8FD6AFFA87D7DFD05A884A87DA8A8A87D%FFA87D7DA8A87D7DFD6AFF7DA87D7D7DA87D7D7DA87D7D7DA87DFF7DFFA8%FF7DA8FD6AFFFD08A8FFA8A8A8FFA8A8FD04FFA8A8A8FDE9FFA8A8A87DFD%08A87DA8FD73FFA8A87DA87D7D7DA8FD057DFD73FFFD06A8FFA8FFFD04A8%FDFCFFFD17FFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:16:18        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2011-03-23T17:43:41Z</xap:CreateDate>
         <xap:ModifyDate>2011-03-23T17:43:41Z</xap:ModifyDate>
         <xap:MetadataDate>2011-03-23T17:43:41Z</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>172</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgArAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYqx7Xdf1CwvjboLeCBkiKXc/JlQvJwZpFBjAUdB8XXviqQx+f9eewW9SzhkoY2nslDCaJGkeLg&#xA;xL7u/EMlF6HpT4gqnX+M4Rp2m3SQ+u1+GFaiJecTrE6oG58mLv8AAoO6gmu2KoYeeZLTStPutRgR&#xA;p7u0F44ibgOMgLIsaNzZyopz3+Hr7Yqhk/Mjmv1tbJv0dFBObmTchbmL1GWMSgcPiWLuKnmvviq+&#xA;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</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:0B474D2C7A56E0118C67E1189BDA6050</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:0C474D2C7A56E0118C67E1189BDA6050</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:6B6180F04A56E0118C67E1189BDA6050</stRef:instanceID>
         </xapMM:DerivedFrom>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>718.000000</stDim:w>
            <stDim:h>474.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>True</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:Fonts>
            <rdf:Bag>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>Calibri</stFnt:fontName>
                  <stFnt:fontFamily>Calibri</stFnt:fontFamily>
                  <stFnt:fontFace>Regular</stFnt:fontFace>
                  <stFnt:fontType>Open Type</stFnt:fontType>
                  <stFnt:versionString>Version 2.00</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Calibri.ttf</stFnt:fontFileName>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>ArialMT</stFnt:fontName>
                  <stFnt:fontFamily>Arial</stFnt:fontFamily>
                  <stFnt:fontFace>Regular</stFnt:fontFace>
                  <stFnt:fontType>Open Type</stFnt:fontType>
                  <stFnt:versionString>Version 5.01.2x</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Arial.ttf</stFnt:fontFileName>
               </rdf:li>
            </rdf:Bag>
         </xapTPg:Fonts>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -474 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 474 li
718 474 li
718 0 li
cp
clp
[1 0 0 1 0 0 ]ct
gsave
0 474.003 mo
718.002 474.003 li
718.002 0 li
0 0 li
0 474.003 li
clp
718.002 474.003 mo
0 474.003 li
0 0 li
718.002 0 li
718.002 474.003 li
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
f
275.521 63.7832 mo
275.521 64.7832 li
484.718 64.7832 li
484.718 176.647 li
276.521 176.647 li
276.521 63.7832 li
275.521 63.7832 li
275.521 64.7832 li
275.521 63.7832 li
274.521 63.7832 li
274.521 177.647 li
274.521 177.91 274.628 178.168 274.814 178.354 cv
275 178.54 275.258 178.647 275.521 178.647 cv
485.718 178.647 li
485.981 178.647 486.239 178.54 486.425 178.354 cv
486.611 178.168 486.718 177.91 486.718 177.647 cv
486.718 63.7832 li
486.718 63.5199 486.611 63.2623 486.425 63.0761 cv
486.239 62.8899 485.981 62.7832 485.718 62.7832 cv
275.521 62.7832 li
275.258 62.7832 275 62.8899 274.814 63.0761 cv
274.628 63.2623 274.521 63.5199 274.521 63.7832 cv
275.521 63.7832 li
cp
0.454902 0.372549 0.380392 0.0235294 cmyk
f
0.74902 0.678431 0.670588 0.901961 cmyk
%ADOBeginSubsetFont: Calibri Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2011 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /Calibri def/FontInfo 5 dict dup begin/ItalicAngle 0 def/FSType 8 defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 37 /percent putdup 45 /hyphen putdup 46 /period putdup 48 /zero putdup 49 /one putdup 50 /two putdup 65 /A putdup 76 /L putdup 82 /R putdup 97 /a putdup 99 /c putdup 100 /d putdup 103 /g putdup 105 /i putdup 107 /k putdup 108 /l putdup 109 /m putdup 112 /p putdup 114 /r putdup 115 /s putdup 116 /t putdup 117 /u putdef/FontBBox {-476 -194 1214 952} defendsystemdict begindup /Private7 dict dup begin/|- {def} def/| {put} def/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings23 dict dup begin/.notdef <1C60D8A8C9B7A086528E2CBE7FD4F03CC1C545DFC3C53F52C692334252531335C4AFD91E9493A7B9787114ADBF50CAD0D8D8F4E0FD112CA0EDC244BC77AFB35E52902467E4B7D65BC23E8AB084EE08EDC3C9FE17948A4E93ECA5D5D8A99AF099DAB98A96A7EEC3487AD5909F63F36A9F52E364FE794F0586CEACB0693AEA3E3B131EDB924E9018AC085D5D058B3A8419D5096479413ADE107D9F5302816818EECEB683CD82FAAA79E358EAA71283CC02664EE09C62BDF6E0D9BC98D9F308DF8AEA61A9B7C090BD7FD96A3223C7AE0D3D1A8F2E623FA6B7C467CA6FECDBA0B792188DFEEBD3D01BCE6CC077D778842DE1B5E36F7F8EB4C68A439269E0981B28AD1790AA058065E4B6AD27A659E12C7322A5BE1E7DF9729C0030192F3688A380035351BB0945D5DC7515959F458727E2B8854977E466D6DDC900E997B52F6BAB4C73A178A3B47EBB3C3FC842F51CC6E114336F3E4E5E72B20D8F94A7BA3BA965E83BF37BAA664C34B8502BB9E9B9BEDD7EBC5DCBC4FFF5EBCA9C032449885D42A9DCCBA2A816B59D7978373DF4208E5608F69A2EAF492AC156CC637D5A11AF573B17CF9F38> |-/percent <1C60D8A8C9B63EE6F5D0F8E8857DEF63A4C78302049BD3378A9B4767666DB5D76909B83C1802AB4BD05F8A439F54CD59982BB9E01B6C217E9ABF55C50C04A661C8A57A6AF9968219CF67B5B37E19E022BB913B7CB997F113B9B6FA3A4D8A629DF3221EAB9A9243C2824700BFB06F6767DC5F9B7110DA49243F857E16F39518AD36E03E13B86ADF6693886ABB6FDB94A799F94E13FC1DF142192BA44DDB2D10AB180DB19C316A42F7CC30DE3A0FE02FA0A8BE5A8B51A0AABA03B2376CE7E2FF50F901F69088D0E1D8B486BDF51E71C2E958ECE066641929E830FC3411C475C8D8FEC82C6DDEA4F0FCD47AF104E9645D4CE3CC0981A3E7DD309BAFAAD4EB9750328D64DFDE68D3F29A605203BB5B5BA464622658266C0CC2BAFE6EB5057A1141126FBBEA83FF4EDDA8E2DCE5CC66D1831D5FF726C8B862D89DC812738FA040868BE1FB06A77BAB7A32BDDCAE4443F4D5482A8DCE2603DA8C69DD3DB9E3E4CE70E62078343C686F687E928A873C5B8E3F5456B14DC2ED9CE3D52D0860F8CE900949A7FB66A4290ED55FDB616153984214BDF59CC77D26DED32AEA5A1BE118E850B3F6748A292D8A3D853CC77F409E772443F0BCA4A414DBD8769046F740F2E79BACA7B78742E4C34BF782EB8FDF83A5380F220D4165F90095954234EB2D28020EBB08FB192BD5AF1ED69BC486E6BDA1114A651E2730A10435A538F0E7B0710CF0C085C0032A1AEC979B6F5D8177284CEAEE9E64B8E263FB0E92C976B8831A8ADC8F72FAE69DA88D5806F3FCE3F4F9FA61696659763D81AD06CD3CCC3ED3CD0C7A55E742E3BF9DB24E8272495279F3C908A47542E825DB8324E7F9> |-/hyphen <1C60D8A8C9B83844CBABF75256C23589A050D2F18EC6AAEA2DCAA879D629F0698E85A7558DC3794B984219238EC694626573D368F005AA7EB3DEDB55CE7021DF056336AEE3D77182F0055C3CB6954365C7523BFC42E70B7DCDE95A> |-/period <1C60D8A8C9B86ED904792469819B411F782D644953F5FB87FEF664579CE5AF47E01D6D9A7DF6EB24F15E9AD1EE074A41E03462D7DE0F1E92BD9640F3458F7DADF49E5D4EB0B3> |-/zero <1C60D8A8C9B7A0860A0ABA2698AC8E090156BBF2C9C30ADDAE7DCB3D97848CC5D38A5C6D85B8937F2533AAB8D6BFA0DD62B7BCE11E4F148006AA53F16B7661785227AEDEF098A1104625EF68DF52BAE87BC71C0E793E6FAD1A965E4D38BA9CF4CEDAADD0504EE4CE20EF80FE3B0F494717869AEF9FD48C1A316DF08ADA9E5D4CE0C25CB68B43C1EB2B9FE55F89B0B22C758BDED5FDD580CE702C559F6E1F276FBE929DD9A2C3557CE4E2CABBF3EDF814307556BE2579995A57ECC922B3376DB39CC4DC2518F12025BDC7A3EE507BE357864FDBF8F62FBD571913B865713255C738D4AEB39D8820C2AC5F5D7DF55CB64B7CD192349742D481F16CF80095A893636D91177B06233710432F07D42A84BDDC> |-/one <1C60D8A8C9B7A0860A305D7D1540DECC7BE2F83965065BA1F58088FE751F51768999AF3CB0CBD98712B4A20A30CFDD23F3D718AE6664545AA64C90E87A977C061638AE7B9844BD53D39E1CD919540EC0AFC0ADDD639213BAA3C2156ECF4D5FEFDF4B77C92C9A62F21FEF596A47F254F30F662D97990A276CD1E50761DD9D07D78B626617E74128BC5D647B42ED807FE6DD0588AD25D211834DAC9410A0AEBD06E6565C1DCBD86013B11A7BE0A2010B12635869FAC3323D92D6BCCC10D02550F431D6753E5E6C65DB63D883AF6BCE4C75C5A66BF9AE47A5570BA4B61C5763C152A7FDEC11C0C748631E999D604A7F2938BB57220CBE02AE758E6018331661C475AA9DED7C59> |-/two <1C60D8A8C9B7A0860A3F41F4B5F8C84A302144D2A68052268BA33C08F14E9024203A43F9861DB1372AE620C85B5997156713B3D52B841947202E77B0C2CB414A698B86ABC8A4E75821012456D5020DA227DFEF8C5D8DB95EBE919EE71528F7186EAF21E351CBD957516793A596628548012B490542857EE9AD26B93BE09822488FFA92D417AEC74A1F7CD3F4086D2106FC51C85A2037F2B9A0C7F20F95265886609863A1C5F24DF7B0A900E498DA2F78FC8847FC48711DA5F7718C543AB1317AD922AE297322A814FAE4926A273690C557D10E81AE194D331B49C1AE8C81F09FF9C6C0138B7CA170F398B4828657BCD8F518515EBEE88F3E7CAAF8D53DFF51CD8B58FC43A0393FF3BAAC61C4C54BAED846AB03C5029732B46B642E71B9F477640318C582068EEDAD42004E409178DCD37800E9D052502DD85B334EBD679CA70294673E8EE8A3969E138989BAAC7D6DF5921118D0D203FDC015CB80084F99BE2DC9C90C6E2171BED79C2858C6> |-/A <1C60D8A8C9B7F88C2B6CB105045FB5B2B32CEE3D567021E87FFA3A108F22F0AD769D89AF310F9FA2A63D83B348F1CD4D9158D831C2637A040F2E3D2AD1E0C1265C252DE42DC685024335218B88110082607887337A49D14691BEEC919D91764E7A708708CD55D39F5C43F91BAAAD2C1BF631413626FEAC47C21B08151BEA5901545C7204664D0C76E7A812FB56764BAC701D80F5CBA63A3746A10BE794CCB8FEAE9714EDA1C180ECED7E77C8C4917875CE0D099349356F25861C18102A308F1467786491B4C86DDD6D90CF5B29B935592B1FC4BC1C> |-/L <1C60D8A8C9B7171E8B1A8E6313E3398209E3D260B6F15325DCB45ECD7736181F507CB4487F34F0C59AFEB0721592A12F0589FA4C3A7603462313C63656B09A8D44D0BD8D70558844CA341A4EE2AC79F611A3ED366B2D2FE339B138BAAEB8D89A1F21C50A63D7C75CB2B4AF444273F3D83A0ACE429472C68390F392B236C485C1D89000FF66B1CD626A7276BDCB191387CD8BEAF0A2AA6552> |-/R <1C60D8A8C9B79C5FEE44F314FFC38CE4EF87FC1BC5BA498FDD47672E37A5F29CF58ECF31C007FDE4A3817F15E647D623C8D6D1F4A73D7B6832B4D42989C1A55BCD585ED57C222CC2F78A215F05F4E9A80BA1FCD1DB376BCE47D9921733E44EDE5BEAEC1D2153F2FA8A2E1C22E242D6C1A4BADF7B3C9D6692C8957849B7C757134864A498CBD963474EEA254A542992BCD7D23FC8C03B24B3B32CB8DE36B1F672A455AF821729B85730506FEACB3392B97578F79A301DEE39865FDBFD8731B3029E0DE4CAFE78BFA5CB852575D437DF1324ED582E9AF5A0234A2594A744CBD8A820BF84E58BCFA0173DA6F4633F9CBE6F24B1E9A9AA3FBA2EC97D071CB6D5A774FEB91C9639FD6744C0FCD372B9710A9F8B9537B94D2F3171FFE5B971995351C2AE63C69CA08EAE162057803FEFCA06736258DDA27C02FD926DA3B7BF59E5B7BF6347045A4700726CA8EDCBC532E0E356415CE7BCA89E1BE403BD462A4226BC0587B5B955AD2652D9A4B9A806727D8110> |-/a <1C60D8A8C9B75CBB53379352952B97D633633CE49B1F5650B8155AFDFA57F94D359804093E4912F3B89577762AB5877203F1CDAD240C521DE74183EDA10501967DB6487C182138B12C453C5DB9629F7EF021028117511EFEAB941896E32D9CC68D6E66540771999A4E30C4826A52D7536EDDF7E00016C895CE43408B44BE33E2D9A6163827E05AB8B1144BC909A74F6D7828DE6E08164A25E320920E354020A41D59E9E3B008A20EC107F9E18745DE21F9AF293EB0F319B529D840D8BA9319522EDDCACA13336C059581181C082BF0D7F4117FAEB429D871E099AEE4394FED2FB3A1C712D1799055BA832AD846B95DA8BB4E63B103C908FA309FAA3B78140CE2A22AE06B2A1EA5BD3AA13DD1ED75DA4AD37493780FE662EF5D1B53C4AF41845C0C77655CE94F0C9DEBE29248A1EAAF3A6EA79D5BB5C090457B818DD62F70E197CEA94F90229AB4FD685A1ADB5E4E4C1DBDB28AA3854323EE2FD22692EC70> |-/c <1C60D8A8C9B714A578818061920CBD3BB0F0FEC7EB28869C0269DBFC02625554E339FA8F23FF202BF6BBA51F73386176CF41E41162B391BD65C46864E1EDBE38C4A175836382F89D1B282918F37F6A98A1C310371E84DC05CA4D214BBF40D0904F28663CAA2B1AF41B75D4680E3731D792C10C395648F8CE6283B6D2EA4EA25EB0077385CC26E37C0D4F9F091C8BC196661820383DC1CFC26D318A92B1398AE8D24532A475AF0A93A6DC660BFF9F07C9678F9C3412071B0DAC612FC7D6B5FAE3214E7C7AB18E3145411FCE0CA8B75D2C8C25C05252A375257E1693A2B9D11EE377C95BA1746CBCD896C9D8284A96EC1B8BEF12D6460B6828EC26350E91CC593B47372BD95FFBF8C2322BFC435A5494ED398AAAE3E6E4293369CDCFAC01478225F7C60BA6A2722907E6FF92F4B9457F52836FAB37F27C55593B43AB457EA291D6DE23> |-/d <1C60D8A8C9B78E05EAA3CECCCC7ABA6A35E55F211820F669BFFF2D107F3F003F84456D947B5557966A2009812B81B51372EB70EB729C8C82B63A473DB5161C83385AAD04B71C9D388B2F86E7C2E91E06E59E76C532F8A600B530589A218BCA1E889366120C885033631C7850C65A7F9274D24F9BF6FA89E174B53B0E1A2CF6D783F32D4C0BE4ACD3EEAF66A8BEC8DB7AC7ADBF3C9CDF5485D002662D310ACCD320AD0234A2F2251E7C0B1667BFFC7E10EE40C7CB623518E3E168137CE699E133B767C86E16CACCA64A58BD9D7F6E66BED6D6FE5D80E0381141549FFB2FBF94ECD2D262EB097909F9092B71E3573FC9B4FD273505C685B327AE9095A2A15545986A397AE2796BDB3888D16AF3DD82BF32621BC8C1393814540227FC926F77872F2FAF5DD33717EB461ACFE3EE5C279294EBB5AADC09C8B10C3F2CB25CCD97C6> |-/g <1C60D8A8C9B7445140600976780BBEB6A3D2658D3A4C7F919C88C52D412C8E364C5F7636792196FD221C121AC8A143979AFAA3A09359F0F2A21E651450F6F05ACC0E82C2760ECA4A653600DE52AE0D5358458AF930D6BDEB0904E4313A0CBCA78B5C6EE35CCCF928264F350C0A023EDD3B664C736748E408C524202A3326D95C7DCABC59764E7D97C53C3E04189FF055F0A0F707215CE9EBCE6A5429EBED17A701726A8DEDD69C85101530BFD06F1546D47732DA28D5440C29DB9FD392812122E25828F7402340CB2AAD1BBC054F22EBE3B4068E1189E1BBFDEDCE3380BE2A1BC64D61665F8EA89BD12E55203D2F412C82771F2C0ABF3E56A249110A5F4DFD7E943B7CBB3957D78564ABEBC14037C62116307C9CC2770007504568A496F0E371B5E27EA91CE4ED6B158CDD56E512A87B38DA763ADE44907E57CB7229D283C8A7D867519E31285088BE518A70B9193ED1297DE2FF3E929169124C3A44E72EDA1A3B2C0E0DA57F0E79BC1C7BEFED8509DD8CC00683DBCDE9C2A776B95D5831197913BF75A301F1EB13F5C4E48D99B31FDB0B54BB7B640060AFF7A1619C4EE7C3CA0DE734198387C7205D8F2F952A1BC7A9DB628AB7F298888007AA604549FA9EA5ECD6ED4A814A52FD636085B1A8D57F31E70472C30EB60858254A7B95E2F6778797B84C60B2ED0823FE7265B0CE1B1A64D8F159C443134DC16E39D207947A0FD5903276> |-/i <1C60D8A8C9B887F0644B8F9A77200B5B21E7A46843656F48CC872DF3AFB58D86B9B1B70DF0F8BF4F1A9D845350075385C2FAC40F64A57A633024956B42D2D155265D68692B1DD96FCB1CFEA6F03B67B191D75D9251636A71B366F484AC7DD61A648087A690F42FCD56728047D5F145B28180BC49A70304D616C17E08688BC2AB34D235D029750826D6A02D57888DCAF080A15DCB2D8AE91CB7938E088D7426B3BCAD6531F243F29763FBDE3F087E3965B6148DD52590D1BA20021D15293CFC> |-/k <1C60D8A8C9B7741C17C040FAF49715AF86267B27DBAE3194A95B5AD38B89D87080BE0BB58EB11BB1E803576225E95586AD26F7B3D48F1476D58A2A86ABCA434890634DF0C762F9C7E8BF973278771D68A2AB608CE3A494AF06CB6B758E3092B2656DD102F8A88BFE70D0C2C45E36E8C5A354AE77BB4C9BFE5EBC116B51C4E77B42DAC17192DF74E54FF0A0E8E65A4C44D1E8C03486D513E268A349A6666B8D2CDEA67E5546A4296B6217CED1A53C88AEB021F8A41388EB02CAFBBF0D008975299F905C6726B8AA428B45A937A574480AA1CF753F93A4428CB2EBA39311914898272650C4BA4DDD9656B5AC379C0EC3487701AF2D0DE9556D9F04967DEABC542665F11772DF361C1B5D5C1660B923FBE08FB5DD4C469DDCE72B7887844550CCFC42576B209CD2E7> |-/l <1C60D8A8C9B887F0644B8EDF7E394B2B17D648B60040EB6DBE2B8847CEEB752ACB6F5AD37E1FA4A050E94786AD18088ED8DC4464B0DE1BE6F00A802A61F4A34EAA84659717045B37042963C71284B8AC29AE9E0F8305F213AE4489E2DB55EC12AFE94E44F64596D135D1BEB997D5B9A0BB5A35AE0E0CE05B7B1F893729319FB81429> |-/m <1C60D8A8C9B6D24F7D3842850F4949AEB6B9100F2B78F4C8889450CED823786FEB32A1B63E88AD56EE02413123CB64791A93EF92133FE4595DA2691E3035F9F72C6031AE554C5E100D6D83A5170AEAC660F3CD2D2E423C32E393EEDCE69B38CE6373F6B6777FFB71A30474298882FF21A6474EA00B23874CB701D4949FDAB683EF52B401CF01FBFB5320858391C36D1B0A5131B6AD88B31FBA5AF7369B538683192205F94F973772FC0D1A80750F5CA55E65F4A8760D9FFB5A3E462EB76AF894987A3AB123C31C6F61A2DE381C11A73194BB9FA663DEB4E0E047953FDCCB40254C512459EA81EABD29705BEDA8917220B4CD736962EC932D0F91B2A5DC808623631D3854D7B6297589945BF94293721596CC4C62C71F5A8040654672D59A8C73FC39F2C6919502A1FD8EB49A6BB72701DD42520B2F6CD223AC11A22A5CED8614ABBE01C624D0AED39BB3AE4E8B513F61C37C6BA440280E139545B39C87A06867746DDC81F39BACA8E048A7276011988ACE081223D841AEA6DE2418F28BD59A30A454BE8DAE3786DDCC7D1BEEFB13E445F279EE7EA8CB61C194C9B25497E6925AF3BEE4F64F897F4A57BD4C4A1E06EBC8223C35049061> |-/p <1C60D8A8C9B78E05EA9D973060387C73D1F6FC5283CF49F42B90E35722532C0305E99FC2B2F5E8253F0317294CB5BA6F51657EA79E1841CF363B43BBE54B9E5F683986378119A60103220843BA6B4E1CF012F4407937B0EDEEE409EED971ED71424C1DE9F58B3C06F2342302220C155C0C840BFB4693FFF8A2CFEEF274FFE1F4AFBE9757FB2568EE33B9D585CBE0600A7110E1A53D85847EA919EFD9BF18F44D7EE9518AE64D9DFE7C7267D6429C8F5FD0EF0AF9ABA737132F4E330A330877D5AECA1F6DF97EC1ACF219E33EDD988EC9A670EC23A43243C991A099EEE9430EF67488C01ED11E3C4B1CEB11239FEDA600217AC3F2A3708004F1E2E90E296730C207690B19E7D8BB6E1920E2F46C4C2E0CC81AE0ED43696970A1FBC9D409BB55BDECDE83A356A07B210C4055759107919A9C98A0B1493E8E6816D87FE47A8C1A70E30E74BD97D6D39D9D984A0D52D9B81565B3C3A0B773497C465883E3095964CC84> |-/r <1C60D8A8C9B80F37F21112BA81A46E1A1A16E843530DEF66F6901DB9A722A358478F1B0799F6041BFFF7D05EE602307D474F1DB84BF73C4EC1FF13A4D2D5B370042C9A314A700782F944BCE36786AFBD72FA62259FABABA90F1F2BE008B7993D5E1813324C60BD953524A1040FB1A790007846FA5DED6ACE6C7D436FF1C0B97E4BBDDDA28F066E204B37F8321753E1473DDD8EE76C12A0011B04832F5C47D3FF30EE31FE70EF82623D628622FAE52A70984ACD43F9718BC02CE5AA3F5832FAB343FD6D53F2375C811D54E6B415E257D8BB3A2542930D7E0D6DF96FAA0688822B6655966904164F87FA904C272BFAD51FAFF11CA14EBB5F6472235CA20889D111211CF90F83807D99EF12B3B6827C1CA4720D03729BEEEA22A1313C4BDCE878453F5E6DCAD449D1F3B7D54D32C49DA0> |-/s <1C60D8A8C9B7347873EC11B675AA6F6B461106EA2C61A0AE571750A082679294B529694EFA74202690239BCD02BDE93B33BD8DE0F0F0056B04093EE6C4E83D6F00E22E61E0A53509E628E3614EF2EF2CA3A8502F22A560E46ED3E4AED0BFD271CCE464114B6332D17C4A046EF74FFF1283283A642C8C06B85A0D72357B5665CD862A8E3D30EFFEE242F88B9C12DF917A74252DB462B499704749747869638F8FD8E70AF4405F95B11DFD154B7101933A31068AA1E65CC021277CCB9EC0EAA7B978A081D1A4252A6693984AAF2CEC4413666DCF8B310A71A67C6E7B1DB954E186EA16C83551DD0516966C156876A3DE36ED7253FFBBC1504668DC98301370300A04E6753189718288CD7EF0ED409765A888272FDB25977C8A74BC113E188B3DF6A69F7851A7E60496291AA0B15532572787EAC7F32F09F1E72589E0E74E0349313472D872E64E7DB78BAB05598FE04B70E52D818F2F7B0B56A5688299352E62F16B011595A7D7701FD641BB2FCFCADB2E33263B8A208C4183E753AD5C25861BF542F2009EA70BB7A67B3BE61085D37469DCDCB97CB2B41A0E2B4DB3BE67C2BA9A1482E51611AB708AAB8BC978B06758006F3287DD3A3CABA09A9F59A21B0D386F88> |-/t <1C60D8A8C9B81D89610FFBFD2F87712D18AB3F2201A6640C86A2CD8B533C9E9613B748962BD3321D998A13FF4A410946A55D4AE3CDBD806BF0BBD38F8435DE762245288A30426FF012946D0E2E36D4EBD7E81C44D06926164FB6F91AA67EEAF9AC4BC77C470E117D4634F7F90C1771292F30769DD575DD5B3F0D104730DECDCF41E7D59747B6A2D0EF143B06FA6BBA4F9E744BD6E4827C627C66195714151061BE64BA6B45A36E91B80557E1CF613697CA2B60F02790B7CBE3BBB5ABEC190F88D2844D8139B7D141D834706D11BA3108576C531B823977B908AC9FF80DF322060C351BA43A8EA770319D1AF8085E209B940EDEE1B85419EF87F01EED1C4E0307B2BC95989AC0998A9EA8A0DFB99539E7D0B836F4EB9E9D6147AFB55082A1E63F64D57A8E7F63465BA308FA03AEB2787221627AF8F99523DB260C> |-/u <1C60D8A8C9B78E05EAA3CFED1A062DA00ACB6556B6D2C444D52FE211DC3688D13631F07F87D2F0851361DDE2CB13BAE303424A55D9BD107D56D22322818FC76F125ECA1DADD7E1E8164E2DF3A65B67CFAE338C319FC7D07BDCC1CF896B708E125021996E87E6805D1416B537CED172F9478027FB9FD1A978C49E725968E2F5FFC6B56799F9B1D16FFE2085471316923AC7BFBC4E3BBEBA71950AD60EAA4BEA84B8EB89079B6BEAD01C4E2BC5BF11F5FD2CB41D465D8AD649D765F2A952E22AC4EF1DF8297E4E5405180477A9E4F70BB10D787681535F61379438A6888E4F660E2B1CD68547F69ECDD808A3CD50B9FBBDA239A40EE62332FADD878CD5F875BAC27E0BDDA94455E030928A249A166F13D134EF255F5783> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/LCRYXM+Calibri /Calibri findfont ct_VMDictPut/LCRYXM+Calibri*1 [37{/.notdef}rp /percent 7{/.notdef}rp /hyphen /period /.notdef /zero /one /two 14{/.notdef}rp /A 10{/.notdef}rp /L 5{/.notdef}rp /R 14{/.notdef}rp /a /.notdef /c /d 2{/.notdef}rp /g /.notdef /i /.notdef /k /l /m 2{/.notdef}rp /p /.notdef /r /s /t /u 138{/.notdef}rp]LCRYXM+Calibri nfLCRYXM+Calibri*1 [32 -3.91887e-15 -3.91887e-15 -32 0 0 ]msf356.174 102.313 mo(RAL)[17.375 18.5156 0 ]xsh345.081 140.313 mo(100%)[16.2188 16.2188 16.2188 0 ]xshLCRYXM+Calibri*1 [20 -2.44929e-15 -2.44929e-15 -20 0 0 ]msf288.488 167.313 mo(srm-t2k.gridpp.rl.ac.uk)[7.82227 6.97266 15.9766 6.12305 6.69922 10.1367 9.0918 5.04883 9.41406 6.97266 4.58984 10.5078 10.5078 10.5078 5.04883 6.97266 4.58984 5.04883 9.58008 8.45703 5.04883 10.5078 0 ]xsh2.06104 244.987 mo
2.06104 245.987 li
137.281 245.987 li
137.281 338.877 li
3.06104 338.877 li
3.06104 244.987 li
2.06104 244.987 li
2.06104 245.987 li
2.06104 244.987 li
1.06104 244.987 li
1.06104 339.877 li
1.06104 340.14 1.16772 340.398 1.35393 340.584 cv
1.54013 340.77 1.7977 340.877 2.06104 340.877 cv
138.281 340.877 li
138.545 340.877 138.802 340.77 138.988 340.584 cv
139.175 340.398 139.281 340.14 139.281 339.877 cv
139.281 244.987 li
139.281 244.724 139.175 244.466 138.988 244.28 cv
138.802 244.094 138.545 243.987 138.281 243.987 cv
2.06104 243.987 li
1.7977 243.987 1.54013 244.094 1.35392 244.28 cv
1.16772 244.466 1.06104 244.724 1.06104 244.987 cv
2.06104 244.987 li
cp
0.454902 0.372549 0.380392 0.0235294 cmyk
f
0.74902 0.678431 0.670588 0.901961 cmyk
%ADOBeginSubsetFont: Calibri AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2011 Adobe System Incorporated. All rights reserved.systemdict beginLCRYXM+Calibri dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/three <1C60D8A8C9B7A0860A2FEF09FCB80607108B3B71A30E2FFE5A0F53F1F3CE33E25BDD9A37F12480657F287B11234D872A9341B8D761BAC5B337758ED34FBDB0155B2DB8FB089986F2CBFC580855A552E4E7BA3E50F802AF5BABA1A72C62BC1E6D108EEB3A3C66741F416B352CC414FB931072A8C5863DBBAA93C49B224ADC9F8CAA75F5C9BFEB2915D3505CD6144D20AF6779286AAF407AAC26D69248C394FBB9BF32373F684ACA2E19C0F36192202ACAF72B1025D6F0CF7066494E827BB306A2A776E0F2B6F3F0E76AC8A13169FA8D6AD525762CBAE08E1976BA0FA868484244B2C6286C74EE91A2C98728E442E286200142B1A5906E7DF9201821B27907537A9A18D5757AABAE23C46953763B0140A749D71AFB31CB71FE8CEB3596B5D9F27628C8660D823DA7A912BCD8F676248CEB1E8BAEB1BE8A438B018DEAB62C462D1458D0606C924EBCEC79E3D916B8F995C300564C3F71FF08DB1F5BD306FF743BF5E6C612870C09ECDB532B05A7DD75F09723F8164F23FA51923DA266107C0EB4976641F969687AA087A6CC3FBA3B6B49CB68C88F765064561D586CDB15837CCCDF95B1ED2288DB0948C8291CEF223BB458BF8475B7D75BEC1205D90B5555DC2429D51153DF3C83901B6982E60F7C7F061954215DB5FAEB8718AB7756E4DAA99626BD231EE3CF4090380F8238B83D56E35DB5099A025EA0320D1A3DE89D5285DD> |-/M <1C60D8A8C9B68A39A0A3DD2F1EDB806B8EBA2991979DEC8D258B1A02A1906FD2B1CA205517F0A68C4C6A5BF2AC6E6CDCF7977F45552A42319D772D0594959118289EBC1461685C8CF4E5DD263C4C1910B7D8FD4E5500044A8F06771B257FC21C3072148523EDBD4AE8CCE0BCF86532F61410F6C0201E2ADF6D872A8FDBBE97EA7C8789A51927AEAFFA42E03A39CC922DAB964B6BCFFA4430A330843D8297EBD008ACDDBEFAE9E40226AF265DABF6CE80E6C4FB13353BC50063552BC667360325D0B42F7528AA00A89119A771AE5A7A3F69D8025BCAB7EBC18E2CEFCB7A52A1D8652FE7D376D9B1F2CA62FEF82187CF27562517F2AA24976B64146E2D4DD287500E273B12ACFFC0C2B592A5CFA9E9511593BE31B739BECC693D9698B175F68FEC3CF86BC604ABD82815EBA74C3E98930057A86AF494D184AB704B672B8745> |-/Q <1C60D8A8C9B654A4F60DC8B1FEE072CE091B180F4BB840120ECF6C011AAD3231FF613676D729A657BBD49369626E9BB3B19DBC27144C826E67F3637B92D885BBCE03055B2D02AF336B0EFDCCEF6A6604FDA5D24B045DD815CB4831220509DEABE6C0442509EA4256B3A2814342C334325D56D0DDCAA09DDC5C36D0DABD38F18276277CB24455DA55D600490D21C873291591E8DBE621AA7E9CE09119BE01BF0AFB24DB632BFEAE1255FC23B5D5ED989EEA61A5113DD22DFDF3F38D09A5E975BEC532832B70025DD416C76A8247783610F1FAE2EC7DA8346816D184833E2DD9DCA29F26A23D45D423C78F47C7E6F885E4D913FFA054D4C61960B86A51509D95F7BA139C077F07C5F943644AC87B2227B1E81560AEC5046151FF284CD8C86472199F2CA60E4178A667DAECE90CC6A18A51C4CE09D0EBE6C8C46573CDA4989F7BB02330B635F54D96C96C67A986F812B321B589D7BF24024714988E53154C724329CEE068F9> |-/U <1C60D8A8C9B677ECC2D761C908DB90C47A92800E8DA9F580AE95DF3036F3660C02232DCD6E66BA74E64BCFF08FC69541BD1ADF528637E7F048CA5FC0AB911EBFD42B9E8671A2AA23DE68C399177D223C5833F931D4B1D26350A985298765460954328F76A286CB6F3EB98D05D1D02FA99091438D6A70CDAD1BD0B7EAC0209E113AC49242A65FCE3FE16DD39B5FBB080521F00CF4EC25D97E8AB7617F9F8753D0683EC16C7483F3F827C65A33CB62EC6035151C9ED285A449D64D70D55E975B6FDE8BD5D93C1FC1CD7F52373AAB43F261624B7081D091DB595365DB519E652118E1DAAF0D73DA6FEC04B26239B5A2899D37EAA1FDE91EB5E7> |-/e <1C60D8A8C9B7A9C0DC897A849B356D31E2254DD2E5BDA9320580C3E0839C715C00D9D27B634D4BEEF0FE1F6AD3CCFBCCE9FDE38A84A563FB744619F62FCBF09ACBF7337FE050BE068BCA744FAC4471C4195B7CEC353B3CAECCCEC91AAE22E8955469041D97A8837F9398CE520ABB35C688EEF4229957FD92C79439BF99D24AD4D8B3CAC5B975D966AB01856E8FAEAE3BEB03E1CC76DF299391134BFB02DD61F6D73B2AAAA0D725ABCA9FE504FB3A1EC1E2449C5D921F0DE45A9278013CF0832F39E3771D2B318D27AFF5849066ED5A64AA8E3E404B520DE5F08BE74DD8D58BD1B0FA461EBCBB4DC632B680CFAE62B61DD4FC04FC017D59147CB2E0FBEAAFA402B5BFBD0C4F13F4BD9227D1353527A23B3EF7CA3E7F599CB51DDAF43A567478E4C81011D9D8D5DAD9CB1F948F5FCE67> |-/q <1C60D8A8C9B78E05EAA3CFED1A062E7358B586AF05164722AD015C8CE0D8BBE5ADC9B4274EF141088E8BC7A5519CC6F4CF8FAC14716641A1CBFC8A3C1FAE730ABB73285F00C246C90485D48EE52326159584526EB20CF5ECF3A8F136119D81E693D06F59FB756016DDA1809F71D795C46C230FC120FDA5AD6FA95AB8E6A470F36B3DA70C0CF52D582260ACEF64787A97848A2F116B221416D578037583D75EDF07A2E7D2CA285122F15F81D5EF1F5238BE09184291849770C6C0541B16B8152F87E35B621861DD1ADF706153CA61CF27093B3F644FF3CBAA4800B11C9797C686E616BE020290A908CE63875BF87479DA09514C9A037DB7C2932C55D8E278F657B3659B5F0BD547DB1098867E70D8D3DFB6EA9C67031DD259213F55AFA3444C26C4C5D57542F6262D7A38FB60D8D46EAA97637A896F0308BCCBA5D05A6252320557ACE8E3075792F0257743ABCB84E60494B1F8AE8FDAF9A4A281D1> |-systemdict /gcheck known {setglobal} if end {end} ifendLCRYXM+Calibri /Encoding getdup 51 /three putdup 77 /M putdup 81 /Q putdup 85 /U putdup 101 /e putdup 113 /q putpop%ADOEndSubsetFont
/LCRYXM+Calibri*1 [37{/.notdef}rp /percent 7{/.notdef}rp /hyphen /period /.notdef /zero /one /two /three 13{/.notdef}rp /A 10{/.notdef}rp /L /M 3{/.notdef}rp /Q /R 2{/.notdef}rp /U 11{/.notdef}rp /a /.notdef /c /d /e /.notdef /g /.notdef /i /.notdef /k /l /m 2{/.notdef}rp /p /q /r /s /t /u 138{/.notdef}rp]LCRYXM+Calibri nfLCRYXM+Calibri*1 [24 -2.93915e-15 -2.93915e-15 -24 0 0 ]msf39.3081 279.231 mo(QMUL)[16.1484 20.5195 15.3984 0 ]xsh49.644 308.231 mo(100%)[12.1641 12.1641 12.1641 0 ]xshLCRYXM+Calibri*1 [14 -1.71451e-15 -1.71451e-15 -14 0 0 ]msf13.0942 327.231 mo(se03.esc.qmul.ac.uk)[5.47559 6.96582 7.0957 7.0957 3.53418 6.96582 5.47559 5.91992 3.53418 7.35547 11.1836 7.35547 3.21289 3.53418 6.70605 5.91992 3.53418 7.35547 0 ]xsh146.444 244.987 mo
146.444 245.987 li
281.664 245.987 li
281.664 338.877 li
147.444 338.877 li
147.444 244.987 li
146.444 244.987 li
146.444 245.987 li
146.444 244.987 li
145.444 244.987 li
145.444 339.877 li
145.444 340.14 145.551 340.398 145.737 340.584 cv
145.923 340.77 146.181 340.877 146.444 340.877 cv
282.664 340.877 li
282.927 340.877 283.185 340.77 283.371 340.584 cv
283.557 340.398 283.664 340.14 283.664 339.877 cv
283.664 244.987 li
283.664 244.724 283.557 244.466 283.371 244.28 cv
283.185 244.094 282.927 243.987 282.664 243.987 cv
146.444 243.987 li
146.18 243.987 145.923 244.094 145.737 244.28 cv
145.551 244.466 145.444 244.724 145.444 244.987 cv
146.444 244.987 li
cp
0.454902 0.372549 0.380392 0.0235294 cmyk
f
0.74902 0.678431 0.670588 0.901961 cmyk
%ADOBeginSubsetFont: Calibri AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2011 Adobe System Incorporated. All rights reserved.systemdict beginLCRYXM+Calibri dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/C <1C60D8A8C9B786996D057DD9ECF9C9FE8F34FA37C423F5980BE7D786896E9EA4586FE497E33F39AB964ACDD89D26E486E7ED8F0DC4FBA51D700DEE7B191A63C96E17E766A2327A1204635F41F9C49078958E183EEFB6984182E65EDA1F8B441B6E4AB84D91335816B7734083F4F4FD892A7BCA407D109F62E4EE67EE6C6C391D2BD510DDC6B5D5CC22D17AC103A7D2131E72C317F3BAC05393ECDC293B2ECAB1568ADB4263F35E5423335599179483E82F60A5AD75F98D7415F42E948543DCCF85D6B636864749244B612B22564859487973200635BA3DA904CEFECDBCC8B01666891D22D161E426CFA4178953236E0C0CC024ABFD25C62F85F4D9DE2FD93AA1C37E4CC144A605E56698682CB24FC97AD3BD836F4B14863B5FD90FDACDF515F988F6144041EE6DE72D3696AC15A7CD39C4F2A134E2CF9BC30D1C6766E73FC3D1AD93F0B1FE898AB1ACC306D4BD68327F6E0E6DF2C6B68065348695779B77D4> |-/I <1C60D8A8C9B86ED904793239D5A87846341C6685DE5ABE7704D2C21702B19492F988F7BDB944EF3CF61808A6DB9D1F22BBD335BB859C853102ABDC306BF0344F58C180F59706796F6A9C1DD4450E8611E916B0A530128C4C5E0E96FFF301F980705D57CD45F3B705E62B3216F34902178F51AC490CA8AF3698463F806A35B46CD69D> |-/f <1C60D8A8C9B83BB8632FB1D3D91BD66E5512F6DD2CCB59074315803E2F430B096626F50C9126DF15B1D22935F28B97AB5D3B7DB8B1B8EC17F9868DFC8B9BA6A909CA8727D3C9D8FCF13C3B6D5F4F33EA07DFD158F20416D4C6EEC8FD3EF14FC86346A94355FA1C2B6FA55C0124FFA9705858D4628EE39DA0E3A156A386DF00613D8189EFFC0AEADC5BE3915D9C022BA6356303A46539775608C62B3D24CB372AF4E663162E7C4ACC81D2F2C5F206BB702A5D73C1A974C0BFD7875757B79AA73010AE51501D97B980E0F2ACE1EF1ED3F60A9C6E02B8D29057E3D98A68500306E46C9A2B914F56A55773A150BF63B33B5E351FC714462135973FE682DBCBC0C1B38B7A71A2F4C684D75344384C54C140B13A70313E2F4EDF68E127B4C55F26525A530E7BB82AEC944EFDC27B6BB93FA6C499E5069AA3B6387EF0576DB7B6BEE15BB0B269E8ACB562> |-/h <1C60D8A8C9B78E05EAADB0123115B3BD5BA83FAABE276A1BF5A23DB55CF4C30D8A20FB7C70B167834EB7C5767A7762DBDEADBE99BB9DD1507EDF7CB5B44CFB5AE7F50CE798A09AFFC2F8A1E21C8BA96A3248C2464366A8BF234A7465BA6B08C9AB7474ED94583744D778660448C601BC1D9C2E8788B65F173F45C272BBE3CD6AC55E870CEE94D478E3D51C8A2E608A02982A9D048914B7569407A83B9D3CDA9FE7ECB2AF4F7816F117CC85330A774976280DEB1A8C317A8A170186F61B3F5FC1D130A0DA1A6A5AE24C0FB08191CD76F47EDEDB0EAC8DE369D515B3B14661497F94A2412A37D63D31ABC4AE50DD37B3DDB58CFDBCD2A17246A6058BA85E12DAD2711083774A128264C809F70CFC31D164703798D4642E5D> |-systemdict /gcheck known {setglobal} if end {end} ifendLCRYXM+Calibri /Encoding getdup 67 /C putdup 73 /I putdup 102 /f putdup 104 /h putpop%ADOEndSubsetFont
/LCRYXM+Calibri*1 [37{/.notdef}rp /percent 7{/.notdef}rp /hyphen /period /.notdef /zero /one /two /three 13{/.notdef}rp /A /.notdef /C 5{/.notdef}rp /I 2{/.notdef}rp /L /M 3{/.notdef}rp /Q /R 2{/.notdef}rp /U 11{/.notdef}rp /a /.notdef /c /d /e /f /g /h /i /.notdef /k /l /m 2{/.notdef}rp /p /q /r /s /t /u 138{/.notdef}rp]LCRYXM+Calibri nfLCRYXM+Calibri*1 [24 -2.93915e-15 -2.93915e-15 -24 0 0 ]msf205.347 270.831 mo(IC)[6.04688 0 ]xsh194.027 299.831 mo(100%)[12.1641 12.1641 12.1641 0 ]xshLCRYXM+Calibri*1 [14 -1.71451e-15 -1.71451e-15 -14 0 0 ]msf156.144 318.831 mo(gfe02.grid.hep.ic.)[6.58984 4.27246 6.96582 7.0957 7.0957 3.53418 6.58984 4.88086 3.21289 7.35547 3.53418 7.35547 6.96582 7.35547 3.53418 3.21289 5.91992 0 ]xsh199.829 334.831 mo(ac.uk)[6.70605 5.91992 3.53418 7.35547 0 ]xsh537.756 68.4795 mo
537.756 69.4795 li
700.017 69.4795 li
700.017 154.206 li
538.756 154.206 li
538.756 68.4795 li
537.756 68.4795 li
537.756 69.4795 li
537.756 68.4795 li
536.756 68.4795 li
536.756 155.206 li
536.756 155.469 536.863 155.727 537.049 155.913 cv
537.235 156.099 537.492 156.206 537.756 156.206 cv
701.017 156.206 li
701.28 156.206 701.537 156.099 701.724 155.913 cv
701.91 155.727 702.017 155.469 702.017 155.206 cv
702.017 68.4795 li
702.017 68.2162 701.91 67.9586 701.724 67.7724 cv
701.537 67.5862 701.28 67.4795 701.017 67.4795 cv
537.756 67.4795 li
537.492 67.4795 537.235 67.5862 537.049 67.7724 cv
536.863 67.9586 536.756 68.2161 536.756 68.4795 cv
537.756 68.4795 li
cp
0.454902 0.372549 0.380392 0.0235294 cmyk
f
0.74902 0.678431 0.670588 0.901961 cmyk
%ADOBeginSubsetFont: Calibri AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2011 Adobe System Incorporated. All rights reserved.systemdict beginLCRYXM+Calibri dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/N <1C60D8A8C9B67B16EC17A11C9303513193038382E210A42B5CE850AFC118B8F8E20755C8A90C95C89303B8AF97DF2083371B19301E0DB8111A384A8E035C8C8FD179B5FF5DEE9371CE5D28447AD71E5F20621DEE2C342616335A1AAB1669E519E232E79C4980DE37E3F1E4DCD25C4506A181A5E635190DDA595BDDE1573CB44863FF5A83BD7D7E515B71492920EF87FE789C8908736F38EB074EA06C50C8F913E2E6E48D5D36311F7C911CB6784E303E758C4B3B979518975255BBF01EB8B827E2459ECECE07A833BA1FB2794232A02C9AD337BE827A573B5E9CE89F5D6EBE26850BF2926DF1667989BD0A0C14BF6B80D7EA27888CC10DB4AF2B2A5C69A8F8245C9A4E02EC85AC1422B48B35F04B8FEAA16155CD67FB40B03E773C1C5BCA284053C42517C1397CDE066EE439C5025920AAC2AF0AA2792D9E710F7897AACDF305> |-/P <1C60D8A8C9B7B6440707B4051A5DBE562555C57029EE089BD9C0449CBA1CDE15C4825E58F476AE98F4F477E10D3D9627118D612BA7F36DE667A502083FA2B5A87FB2329B4599145D540EE26CB50F350F1C24FBA25930C404B0478F3C579C4E768F279D098F515881442D0DB18015E7A9640759CC77EC73BBCCD8C1932872FD5A8725311BE90CFB90EBC81A1F03816E32CEC0A4E1DB1A22099D4FCE02BD53A243FE7B67435108D6337E9414F0B3B9D88A863DF0DD8EDB216F3428E1C8EDADF4A32D7B4C28D91BCF9108C9794A650A0922E44EBCE859C2D94676859E04DBB6727B1AB10957F28903A4930A> |-/n <1C60D8A8C9B78E05EAADB0123115B3BD5BA83FAABE276A1BF5A23DB55CF4C30D8A20FB7C70B167834EB1FCB2A451DA55CBA774B9C40CA48F3B7AD8E41B3F0C2665E2AF85619561E070ABE3E4EFEC9983825210D2A0599E48D162F31337982CE0D843D2D41F1F7924A343E37439CC75937984C88A0080C28B8BFBFB8F444AFA11CBAA4BCF4C8D3087770F88F26B0A8B30E46AE29C6BF9720949C50E19D6248BB58DE961D63651843F9B3B8EE9AA75CDE28D1F95D7703116FE7AA23945B5808B97F9947888D114BE2523F872057145410E975A2CA83D430B49A7CAE26619012C2444BEBF6DC1397EFC38FADD0435CE6D4A1478744BC983827B31CF502C4487AF1E48BBC2EB6153C1C5367B96A212BCD3FEE3B9DEC12C4E> |-systemdict /gcheck known {setglobal} if end {end} ifendLCRYXM+Calibri /Encoding getdup 78 /N putdup 80 /P putdup 110 /n putpop%ADOEndSubsetFont
/LCRYXM+Calibri*1 [37{/.notdef}rp /percent 7{/.notdef}rp /hyphen /period /.notdef /zero /one /two /three 13{/.notdef}rp /A /.notdef /C 5{/.notdef}rp /I 2{/.notdef}rp /L /M /N /.notdef /P /Q /R 2{/.notdef}rp /U 11{/.notdef}rp /a /.notdef /c /d /e /f /g /h /i /.notdef /k /l /m /n /.notdef /p /q /r /s /t /u 138{/.notdef}rp]LCRYXM+Calibri nfLCRYXM+Calibri*1 [24 -2.93915e-15 -2.93915e-15 -24 0 0 ]msf590.448 97.4424 mo(IN2P3)[6.04688 15.4922 12.1641 12.3984 0 ]xsh592.757 126.442 mo(100%)[12.1641 12.1641 12.1641 0 ]xshLCRYXM+Calibri*1 [16 -1.95943e-15 -1.95943e-15 -16 0 0 ]msf564.776 147.442 mo(ccsrm02.in2p3.fr)[6.76563 6.76563 6.25781 5.57813 12.7813 8.10938 8.10938 4.03906 3.67188 8.40625 8.10938 8.40625 8.10938 4.03906 4.88281 0 ]xsh434.721 244.987 mo
434.721 245.987 li
569.941 245.987 li
569.941 338.877 li
435.721 338.877 li
435.721 244.987 li
434.721 244.987 li
434.721 245.987 li
434.721 244.987 li
433.721 244.987 li
433.721 339.877 li
433.721 340.14 433.827 340.398 434.014 340.584 cv
434.2 340.77 434.457 340.877 434.721 340.877 cv
570.941 340.877 li
571.205 340.877 571.462 340.77 571.648 340.584 cv
571.835 340.398 571.941 340.14 571.941 339.877 cv
571.941 244.987 li
571.941 244.724 571.835 244.466 571.648 244.28 cv
571.462 244.094 571.205 243.987 570.941 243.987 cv
434.721 243.987 li
434.457 243.987 434.2 244.094 434.014 244.28 cv
433.827 244.466 433.721 244.724 433.721 244.987 cv
434.721 244.987 li
cp
0.454902 0.372549 0.380392 0.0235294 cmyk
f
0.74902 0.678431 0.670588 0.901961 cmyk
%ADOBeginSubsetFont: Calibri AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2011 Adobe System Incorporated. All rights reserved.systemdict beginLCRYXM+Calibri dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/ffi <1C60D8A8C9B6DD2C17EA198E882D96A5679580FA41DAF7AE81A399E58C7A66E237600C60D52B9F26879A45C8E240086751E6B056C94C7BBFDFC6ED86739685B02D8005203CBDB1D7B9947169AF17069F8BE20F0014848B3952DB04F01543256D403EBC4DAD8BB01D14345E51261183C2BA40374FA506C2A4E923862F1FF09EA87E2E5BD498D358CB4B598236F2DA48D08CE9DFCF9E5DC18D5A65643EECA1473929951C5AD6B63318A14059DA1BEA83B4A7BF2419E48FD69E17E83E302FFE06EA381A8B87E5C1A228313327A4178ED82DBAA2D79BC2E3BE1F3AD0E83EA271D844572349191B6A1DF25DFC2A973BE0F4CA931454232139B0B9DB0954EE6F6F398C3E896F17548561DC2DCB74A4BCD8BE7DB137A63FA4CECE87E8313A20C5493DD2CA22A891C34B406AF3E5E1B4AD00EFEBE9F693E898840E7CEDE43A50DAB4BB445751DEC63CBDA00EF7118F0C3C878D8797ABF4933CE7292E23318EBE01E38F6430456EC25B7A14133E6A6EF08E963E25D893E23A6A58575CA6E22786D772F15CA0CEC5B89FF5E2C4CAD3859A6CD03FA107C0607D84FF953B01EC94443869CA260D5D6E833DA56498D3717032D3FC2A167C79CC8ECF4368450D1F1964B12CC6F8910A871B9C916C5ED6C545E28FFDD6541F3788568FA260C4A93A391F49469A61E161B4A5883C99B8304974B54DA9A25C43ED6F9ACE92641C7FC905605B06C1D69CAD224D0D7829CFFE09C7FAD1D802C17BF5C42CAF5D307159927DDBD8CBFDC1155A54D89F9D0CB58FF8AAEE38237A8665F4D2D46EC586F0CE11F83A1EED5BE7E3AE5D215045D25EC1570D558D02D93DF84A7F30087F386BEFA09640A1407BB3F9F421956C130063D179455EF4F18C6C418ABA88A49C3536F8DF6C577AFF043D9B3DB559712FE36D19C6CD25955F73C0329382CA04> |-/five <1C60D8A8C9B7A0860A2FEF2204D5F6595F7308551A6818CDF94E88E3B51B4BFE590C6C493EDCD8FEAF219DF0A81427DD4448B9AA3D521907C381F007F90EAA6BC6813C5ECBAAF3D43E8D7ECD68BE462C6609F3ACF35A15EAD8FA724A39F8FF3985AE57C3EE7F2468EE63E1FB60462E54FAAE1AC468FACAB638834339178434A5708D879091BB754334B9583D4A5B182F7341B7C5532CBD4850F827BD47C22464ADF744DC69CDD73CE1B847A119D178326C1D936B2671B4F66DB4C82ABBF0998D204C6B2C54A8D1373452768F53CE9B8820F53D8324A8C20B1220EC9CC36BAB88FC34DC3CEFE67B448F164F98C88B484017D4F4837C386AA9084C555745CF40FCBA2F2E48A2601177A6F7710FB1E609D9618B1B59141D82B990F422233CFE27E6C13ACAEB970E79830DB3E2D7CCF772EC4469F50BF2745AF6F98962532A3064E83D5AB1B0D7166D20C01E1963E937E8AD71B78DC8903FAA6A9997FA20C8> |-/S <1C60D8A8C9B770DA42E8D37F1E32882D4AD6464D850106A0DE7A83B47F0EC65143E84B8F9887D8EF560BBB7DAED9582F38B6974AE06071D74243DE04377A9E38C603D44A0AA623BF84EDE575A39EAD4593C4B3F424F5317061A5AEF0FCBD5198E5F9AB43FD8C228E541FA391BADB0ACDBD5FBBD08EBCA2700B6A1105DB45395D242F8C44AC433C3725A9D5F6A91B5DF820F4E2F6E66101242BAA426ABA584BF91A7E8CBD825612324F28F3BB6B5F4B6A98D5678C5683C423898401C97DB6AEBB3B08F0E49015B8C09294559F0324646775C30687BA8725A301A8E7ACA559E180CD1BA525300AD3D8DFA8A8C34309FA6E01CA0BA9F33D60D410C3785C9A35A4D33DC4DA697FAAF83556B3BAF038631153B21CFA05AC7F6B965B6C9DD580ECDAA5E19D631487362428CB6C15F8951776CB9C454AE2ECDA7CED1F00599F60578050870FD9F672ABB02F7641BFFDFC908D98DE75282B9085EDCE585EED996ACD325E186C6CC942676730FDB64EACBC2CC9670AC8631DB84FE5F13182767EAE21F9BC28BA89B244DFD720C9DF35E92F57747BB59E5AF5F4663BAF9B03DC716D74DBD0D4D1BB2703443369B43A50F5B2916833184106C2158995BEF98CEF08C3DF5A6182> |-systemdict /gcheck known {setglobal} if end {end} ifendLCRYXM+Calibri /Encoding getdup 32 /ffi putdup 53 /five putdup 83 /S putpop%ADOEndSubsetFont
/LCRYXM+Calibri*1 [32{/.notdef}rp /ffi 4{/.notdef}rp /percent 7{/.notdef}rp /hyphen /period /.notdef /zero /one /two /three /.notdef /five 11{/.notdef}rp /A /.notdef /C 5{/.notdef}rp /I 2{/.notdef}rp /L /M /N /.notdef /P /Q /R /S /.notdef /U 11{/.notdef}rp /a /.notdef /c /d /e /f /g /h /i /.notdef /k /l /m /n /.notdef /p /q /r /s /t /u 138{/.notdef}rp]LCRYXM+Calibri nfLCRYXM+Calibri*1 [24 -2.93915e-15 -2.93915e-15 -24 0 0 ]msf460.536 279.231 mo(She eld)[11.0273 12.6094 11.9414 19.3828 11.9414 5.50781 0 ]xsh482.304 308.231 mo(50%)[12.1641 12.1641 0 ]xshLCRYXM+Calibri*1 [14 -1.71451e-15 -1.71451e-15 -14 0 0 ]msf454.907 327.231 mo(lcgse0.shef.ac.uk)[3.21289 5.91992 6.58984 5.47559 6.96582 7.0957 3.53418 5.47559 7.35547 6.96582 4.27246 3.53418 6.70605 5.91992 3.53418 7.35547 0 ]xsh579.37 244.987 mo
579.37 245.987 li
714.59 245.987 li
714.59 338.877 li
580.37 338.877 li
580.37 244.987 li
579.37 244.987 li
579.37 245.987 li
579.37 244.987 li
578.37 244.987 li
578.37 339.877 li
578.37 340.14 578.477 340.398 578.663 340.584 cv
578.849 340.77 579.107 340.877 579.37 340.877 cv
715.59 340.877 li
715.853 340.877 716.111 340.77 716.297 340.584 cv
716.483 340.398 716.59 340.14 716.59 339.877 cv
716.59 244.987 li
716.59 244.724 716.483 244.466 716.297 244.28 cv
716.111 244.094 715.853 243.987 715.59 243.987 cv
579.37 243.987 li
579.107 243.987 578.849 244.094 578.663 244.28 cv
578.477 244.466 578.37 244.724 578.37 244.987 cv
579.37 244.987 li
cp
0.454902 0.372549 0.380392 0.0235294 cmyk
f
0.74902 0.678431 0.670588 0.901961 cmyk
%ADOBeginSubsetFont: Calibri AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2011 Adobe System Incorporated. All rights reserved.systemdict beginLCRYXM+Calibri dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/o <1C60D8A8C9B78C66ECF3075BCC0F7D87F2E9EA9E473D66D53E6D1735C12EAC0562A2F6FB428E7F7051A3A7B2D4CA6ED90F77808579359B7E539B5388F6F54555E1422B5F329989100C1CD5239E87FECD85E14E914ADC27391A1F5624B31EE69A68B9016D73D6A01A100E004523AC53318A2FC2260E74BA80D4ABD1433EC67800CC9F77763DCF8156EA5CA478ABF1FAF7864EAD55939BE7FA4A9E8660CE98DDE8CBC35F3FFF4E5C2DA4A292CE30D82057E70A8562AFB17C90FC331A4C46B48C7BBCED55DB7F94D559D534C59FF211B5A85F0207876BD8D6B2C7BBBC06964A16F72BBAE841F001B71209E6C81DC64817ADE625E8FF> |-/v <1C60D8A8C9B77771B09AD302B4CB2C18543FBB2E7E6342969838CF2C334035065E921A40A75882974808107F0F5C3AC1CD7A10BA6075C83F1DE48B37CB4A8C976EF88D75006F44747CDCEE5069475B014DB29A6BE7A1F25A9ABA2642AE0B12F169B7C26C5BB2C6831FDDDADD15DE53220C2A354D3DB65E39662BC3F52DBE3E6F55BA2941DB48175EDD867619C5C4F72AF6BDE0336B64DD708A70A9B3043446299A2061A5B31F71BCE056DDAEEEA357563374E361165ED57E4A9861B82CE26F9B6BF6D6DD8B8E105752A19647DA81C937CF2BEAF032E992A09CE082764919EAB1094210448A121FEB79BB41C951E6B43D3384AE29644009EB9FEBB553A8B95EE31D86> |-systemdict /gcheck known {setglobal} if end {end} ifendLCRYXM+Calibri /Encoding getdup 111 /o putdup 118 /v putpop%ADOEndSubsetFont
/LCRYXM+Calibri*1 [32{/.notdef}rp /ffi 4{/.notdef}rp /percent 7{/.notdef}rp /hyphen /period /.notdef /zero /one /two /three /.notdef /five 11{/.notdef}rp /A /.notdef /C 5{/.notdef}rp /I 2{/.notdef}rp /L /M /N /.notdef /P /Q /R /S /.notdef /U 11{/.notdef}rp /a /.notdef /c /d /e /f /g /h /i /.notdef /k /l /m /n /o /p /q /r /s /t /u /v 137{/.notdef}rp]LCRYXM+Calibri nfLCRYXM+Calibri*1 [24 -2.93915e-15 -2.93915e-15 -24 0 0 ]msf602.607 270.831 mo(Liverpool)[10.0898 5.50781 10.8398 11.9414 8.36719 12.6094 12.6563 12.6563 0 ]xsh626.953 299.831 mo(50%)[12.1641 12.1641 0 ]xshLCRYXM+Calibri*1 [14 -1.71451e-15 -1.71451e-15 -14 0 0 ]msf587.952 318.831 mo(hepgrid11.ph.liv.ac.uk)[7.35547 6.96582 7.35547 6.58984 4.88086 3.21289 7.35547 7.0957 7.0957 3.53418 7.35547 7.35547 3.53418 3.21289 3.21289 6.32324 3.53418 6.70605 5.91992 3.53418 7.35547 0 ]xsh291.337 244.987 mo
291.337 245.987 li
426.558 245.987 li
426.558 338.877 li
292.337 338.877 li
292.337 244.987 li
291.337 244.987 li
291.337 245.987 li
291.337 244.987 li
290.337 244.987 li
290.337 339.877 li
290.337 340.14 290.444 340.398 290.63 340.584 cv
290.816 340.77 291.074 340.877 291.337 340.877 cv
427.558 340.877 li
427.821 340.877 428.078 340.77 428.265 340.584 cv
428.451 340.398 428.558 340.14 428.558 339.877 cv
428.558 244.987 li
428.558 244.724 428.451 244.466 428.265 244.28 cv
428.079 244.094 427.821 243.987 427.558 243.987 cv
291.337 243.987 li
291.074 243.987 290.816 244.094 290.63 244.28 cv
290.444 244.466 290.337 244.724 290.337 244.987 cv
291.337 244.987 li
cp
0.454902 0.372549 0.380392 0.0235294 cmyk
f
0.74902 0.678431 0.670588 0.901961 cmyk
%ADOBeginSubsetFont: Calibri AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2011 Adobe System Incorporated. All rights reserved.systemdict beginLCRYXM+Calibri dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/y <1C60D8A8C9B776A06C625D9575F6DBFFEE93EC1CB9A335325BD9E365428EEA1BD5B7A305D96437BF24D2E59BF0DFE2360EDCA01120D4DA769624265DE9866EA970971BD84B20E81D769B1F13D7A21674FB5E8C4844518680BB1DE710B7438090302965C932285C6A137B1923CFCED74D1C71B686BDF1263BE348B2F06F534EDA8A2856376F820F03A76FD878686946B3B179B9CD823AA55541A535E0CCC6D2D21B3D6A73597DDD43BBEFD829B55A26664F2F8221FA6814449CF6D0CFA13492A2A7CF82E9D18F6E0413> |-systemdict /gcheck known {setglobal} if end {end} ifendLCRYXM+Calibri /Encoding getdup 121 /y putpop%ADOEndSubsetFont
/LCRYXM+Calibri*1 [32{/.notdef}rp /ffi 4{/.notdef}rp /percent 7{/.notdef}rp /hyphen /period /.notdef /zero /one /two /three /.notdef /five 11{/.notdef}rp /A /.notdef /C 5{/.notdef}rp /I 2{/.notdef}rp /L /M /N /.notdef /P /Q /R /S /.notdef /U 11{/.notdef}rp /a /.notdef /c /d /e /f /g /h /i /.notdef /k /l /m /n /o /p /q /r /s /t /u /v 2{/.notdef}rp /y 134{/.notdef}rp]LCRYXM+Calibri nfLCRYXM+Calibri*1 [24 -2.93915e-15 -2.93915e-15 -24 0 0 ]msf312.875 270.831 mo(Lancaster)[10.0898 11.4961 12.6094 10.1484 11.4961 9.38672 8.03906 11.9414 0 ]xsh338.92 299.831 mo(50%)[12.1641 12.1641 0 ]xshLCRYXM+Calibri*1 [14 -1.71451e-15 -1.71451e-15 -14 0 0 ]msf350.424 318.831 mo(fal-)[4.27246 6.70605 3.21289 0 ]xsh299.749 334.831 mo(pygrid-30.lancs.ac.uk)[7.35547 6.33691 6.58984 4.88086 3.21289 7.35547 4.28613 7.0957 7.0957 3.53418 3.21289 6.70605 7.35547 5.91992 5.47559 3.53418 6.70605 5.91992 3.53418 7.35547 0 ]xsh485.435 87.875 mo
535.763 87.9951 li
535.768 85.9951 li
485.44 85.875 li
0 0.937255 1 0 cmyk
f
537.75 87 mo
530.259 91.3457 li
529.781 91.623 529.169 91.4604 528.892 90.9829 cv
528.615 90.5049 528.777 89.8931 529.255 89.6157 cv
533.781 86.9907 li
529.268 84.3438 li
528.791 84.064 528.632 83.4512 528.911 82.9751 cv
529.19 82.4985 529.804 82.3389 530.279 82.6182 cv
537.75 87 li
cp
ef
537.752 119.75 mo
487.424 119.63 li
487.419 121.63 li
537.748 121.75 li
f
485.438 120.625 mo
492.929 116.279 li
493.406 116.002 494.019 116.165 494.295 116.642 cv
494.572 117.12 494.41 117.732 493.933 118.009 cv
489.406 120.634 li
493.92 123.281 li
494.396 123.561 494.556 124.174 494.276 124.65 cv
493.997 125.126 493.384 125.286 492.908 125.007 cv
485.438 120.625 li
cp
ef
556.62 260.375 mo
581.948 260.491 li
581.958 258.491 li
556.63 258.375 li
0.454902 0.372549 0.380392 0.0235294 cmyk
f
583.938 259.5 mo
576.437 263.829 li
575.959 264.105 575.347 263.941 575.071 263.463 cv
574.795 262.985 574.959 262.373 575.438 262.098 cv
579.969 259.481 li
575.461 256.825 li
574.985 256.545 574.827 255.932 575.107 255.456 cv
575.388 254.979 576.001 254.821 576.477 255.102 cv
583.938 259.5 li
cp
ef
583.942 292.188 mo
558.614 292.071 li
558.605 294.071 li
583.933 294.187 li
f
556.625 293.063 mo
564.126 288.733 li
564.604 288.457 565.216 288.621 565.491 289.1 cv
565.768 289.577 565.604 290.189 565.125 290.465 cv
560.594 293.081 li
565.102 295.737 li
565.577 296.018 565.735 296.631 565.455 297.106 cv
565.175 297.583 564.562 297.741 564.086 297.461 cv
556.625 293.063 li
cp
ef
411.995 260.25 mo
437.324 260.366 li
437.333 258.366 li
412.005 258.25 li
f
439.313 259.375 mo
431.812 263.704 li
431.334 263.98 430.722 263.816 430.446 263.338 cv
430.17 262.86 430.334 262.248 430.813 261.973 cv
435.344 259.356 li
430.836 256.7 li
430.36 256.42 430.202 255.807 430.482 255.331 cv
430.763 254.854 431.376 254.696 431.852 254.977 cv
439.313 259.375 li
cp
ef
439.317 292.063 mo
413.989 291.946 li
413.98 293.946 li
439.308 294.062 li
f
412 292.938 mo
419.501 288.608 li
419.979 288.332 420.591 288.496 420.867 288.975 cv
421.143 289.452 420.979 290.064 420.5 290.34 cv
415.969 292.956 li
420.477 295.612 li
420.952 295.893 421.11 296.506 420.83 296.981 cv
420.55 297.458 419.937 297.616 419.461 297.336 cv
412 292.938 li
cp
ef
274.745 260.125 mo
300.074 260.241 li
300.083 258.241 li
274.755 258.125 li
f
302.063 259.25 mo
294.562 263.579 li
294.083 263.855 293.472 263.691 293.196 263.213 cv
292.92 262.735 293.083 262.123 293.562 261.848 cv
298.093 259.231 li
293.586 256.575 li
293.11 256.295 292.952 255.682 293.232 255.206 cv
293.513 254.729 294.126 254.571 294.602 254.852 cv
302.063 259.25 li
cp
ef
302.067 291.938 mo
276.739 291.821 li
276.73 293.821 li
302.058 293.937 li
f
274.75 292.813 mo
282.25 288.483 li
282.729 288.207 283.34 288.371 283.617 288.85 cv
283.893 289.327 283.729 289.939 283.25 290.215 cv
278.719 292.831 li
283.226 295.487 li
283.702 295.768 283.86 296.381 283.58 296.856 cv
283.3 297.333 282.687 297.491 282.211 297.211 cv
274.75 292.813 li
cp
ef
138.245 260 mo
163.574 260.116 li
163.583 258.116 li
138.255 258 li
f
165.563 259.125 mo
158.062 263.454 li
157.583 263.73 156.972 263.566 156.696 263.088 cv
156.42 262.61 156.583 261.998 157.062 261.723 cv
161.593 259.106 li
157.086 256.45 li
156.61 256.17 156.452 255.557 156.732 255.081 cv
157.013 254.604 157.626 254.446 158.102 254.727 cv
165.563 259.125 li
cp
ef
165.567 291.813 mo
140.301 291.696 li
140.292 293.696 li
165.558 293.812 li
f
138.313 292.688 mo
145.813 288.358 li
146.292 288.082 146.903 288.246 147.179 288.725 cv
147.455 289.202 147.292 289.814 146.813 290.09 cv
142.282 292.706 li
146.789 295.362 li
147.265 295.644 147.423 296.256 147.143 296.731 cv
146.862 297.208 146.249 297.366 145.773 297.086 cv
138.313 292.688 li
cp
ef
686.341 244.04 mo
456.248 177.218 li
455.69 179.139 li
685.784 245.96 li
0 0.937255 1 0 cmyk
f
454.063 177.625 mo
462.464 175.521 li
462.999 175.387 463.542 175.712 463.677 176.248 cv
463.811 176.783 463.485 177.327 462.949 177.461 cv
457.874 178.732 li
461.479 182.524 li
461.859 182.924 461.844 183.557 461.443 183.938 cv
461.043 184.318 460.41 184.302 460.029 183.902 cv
454.063 177.625 li
cp
ef
438.962 178.562 mo
617.166 245.241 li
617.867 243.368 li
439.663 176.688 li
f
619.375 245 mo
610.84 246.466 li
610.295 246.559 609.778 246.193 609.685 245.649 cv
609.591 245.104 609.957 244.588 610.501 244.494 cv
615.657 243.609 li
612.349 239.557 li
611.999 239.128 612.063 238.498 612.491 238.149 cv
612.919 237.8 613.549 237.863 613.897 238.291 cv
619.375 245 li
cp
ef
527.376 244.174 mo
430.266 177.918 li
429.139 179.57 li
526.249 245.826 li
f
428.063 177.625 mo
436.701 178.236 li
437.252 178.275 437.667 178.753 437.628 179.305 cv
437.589 179.855 437.111 180.271 436.561 180.231 cv
431.342 179.862 li
433.589 184.587 li
433.826 185.085 433.614 185.682 433.115 185.919 cv
432.616 186.157 432.02 185.945 431.782 185.446 cv
428.063 177.625 li
cp
ef
412.395 178.143 mo
452.179 243.821 li
453.889 242.785 li
414.105 177.107 li
f
454.063 245 mo
446.454 240.862 li
445.969 240.599 445.79 239.991 446.054 239.506 cv
446.317 239.021 446.925 238.842 447.41 239.105 cv
452.006 241.605 li
451.919 236.374 li
451.91 235.822 452.351 235.367 452.902 235.357 cv
453.455 235.348 453.91 235.789 453.919 236.341 cv
454.063 245 li
cp
ef
368.26 245.465 mo
402.774 179.847 li
401.004 178.916 li
366.49 244.534 li
f
402.813 177.625 mo
403.192 186.277 li
403.217 186.829 402.789 187.296 402.237 187.32 cv
401.686 187.344 401.219 186.917 401.194 186.365 cv
400.965 181.138 li
396.528 183.911 li
396.06 184.203 395.442 184.061 395.15 183.592 cv
394.857 183.124 395 182.507 395.468 182.214 cv
402.813 177.625 li
cp
ef
387.967 177.09 mo
346.403 242.789 li
348.094 243.858 li
389.658 178.16 li
f
346.188 245 mo
346.5 236.345 li
346.519 235.793 346.983 235.362 347.535 235.382 cv
348.086 235.402 348.518 235.865 348.498 236.417 cv
348.31 241.646 li
352.954 239.236 li
353.444 238.981 354.047 239.173 354.302 239.663 cv
354.556 240.153 354.365 240.757 353.875 241.011 cv
346.188 245 li
cp
ef
254.574 245.86 mo
366.18 179.499 li
365.158 177.78 li
253.551 244.14 li
f
367.375 177.625 mo
363.175 185.199 li
362.907 185.682 362.299 185.856 361.815 185.589 cv
361.333 185.321 361.158 184.712 361.426 184.229 cv
363.963 179.654 li
358.731 179.697 li
358.179 179.702 357.728 179.258 357.723 178.706 cv
357.719 178.153 358.163 177.702 358.715 177.697 cv
367.375 177.625 li
cp
ef
352.819 176.755 mo
235.919 243.15 li
236.907 244.889 li
353.806 178.495 li
f
234.688 245 mo
239.037 237.511 li
239.314 237.033 239.927 236.871 240.404 237.148 cv
240.882 237.426 241.044 238.038 240.767 238.516 cv
238.139 243.04 li
243.371 243.1 li
243.923 243.106 244.365 243.56 244.359 244.111 cv
244.353 244.664 243.9 245.106 243.347 245.1 cv
234.688 245 li
cp
ef
121.757 245.948 mo
319.876 179.206 li
319.237 177.311 li
121.118 244.052 li
f
321.438 177.625 mo
315.741 184.148 li
315.378 184.564 314.747 184.607 314.331 184.244 cv
313.914 183.881 313.872 183.249 314.235 182.833 cv
317.676 178.892 li
312.552 177.836 li
312.011 177.725 311.663 177.196 311.774 176.655 cv
311.885 176.114 312.414 175.767 312.955 175.878 cv
321.438 177.625 li
cp
ef
301.743 176.677 mo
103.624 243.419 li
104.263 245.314 li
302.382 178.573 li
f
102.063 245 mo
107.759 238.477 li
108.122 238.061 108.753 238.018 109.17 238.381 cv
109.586 238.744 109.628 239.376 109.265 239.792 cv
105.824 243.732 li
110.948 244.788 li
111.489 244.899 111.837 245.429 111.726 245.97 cv
111.615 246.511 111.086 246.858 110.545 246.747 cv
102.063 245 li
cp
ef
0 0.937255 1 0 cmyk
%ADOBeginSubsetFont: ArialMT Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2011 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /ArialMT def/FontInfo 5 dict dup begin/ItalicAngle 0 def/FSType 8 defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 32 /space putdup 67 /C putdup 70 /F putdup 80 /P putdup 83 /S putdup 84 /T putdup 97 /a putdup 101 /e putdup 104 /h putdup 105 /i putdup 108 /l putdup 109 /m putdup 110 /n putdup 114 /r putdup 115 /s putdup 121 /y putdef/FontBBox {-665 -325 2000 1006} defendsystemdict begindup /Private7 dict dup begin/|- {def} def/| {put} def/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings17 dict dup begin/.notdef <1C60D8A8C9B6E3FA5101D97F0BCF44F7161DEB1E2A84766DD477E7C8A936AA182F5809A9> |-/space <1C60D8A8C9B854D00D> |-/C <1C60D8A8C9B6079F6D1C46AC2732DFBDC9143C94793529C1940296210AAD6EE09C39CFC4DAB7C5F3BA33C9E10838E0BC6FC9318A4E57F309EE20438B434C69AE73A499211EBA75E22A57C1581D93869428818DC700A28C027571D7047CDFA8B017AACDE96DE4B2579EFD2C826A30F6EBDDC52701A22CDD669ADC60B66F32261A1F55EDEF9802FD4511E0EF130772EDFD708A4113A1EDB1E717E0FA7D314851DE59> |-/F <1C60D8A8C9B7D8BE1661AF70E1029B586475C590C02056C6BE2BB9C2329F7F6ED1937D1E8A10> |-/P <1C60D8A8C9B64EDFF4950CC53012D47AE97D5586315BA2F5162B63CEC117C5379A1B3DB174CB2C739C68916A1E99A346AFF71DBF25658867D9AEF1BF3C47CE1BA73978E8D0D40E52B85A56E08A1369D85E15B0A0C517291916FF6E61D0EFBF59B4862165C7DEA15B42BE3811C2CAA25C54> |-/S <1C60D8A8C9B64EDFE3D078722A65C31955939D63AA5C8A4945719B5E558E3B73A676CC12D1E18D93A8DC67C074D6E352D426981DE76F8EC4CFE5DAE051BE47753A7C234C4B8D7D9F50292A61882B5500CC701F878FE626CDC6D4C322BB391537921D673F5AEE3EC19E36E7EFEC0F06A0EA4EAAB6BBA94DDCD11A6A564B13B510F8C915848233B82F046D854DCD4F1639F149305DC73D3C68DF8AEB47A96A30E55CF8BAD07FA2825BCE0D675F1CC2EBE61B07B772130E23119250F1EBF8FE12A2098D9F09F3F21BDC41666CA4A0BB70D5F0A750B44BB93A5FBFDD2BF8DE450B277265536F77D5BD6F44FB72FF2E708C60107653AE44BFFB26AFF8> |-/T <1C60D8A8C9B7D8BE16D2C1CA7ED2E06F707C0E9530AE37D06FF7501A595D3927> |-/a <1C60D8A8C9B7EF32244AC11AA6BAAA29EE8C78E0E7206F4A2776A2D1EA7DC8D9A28C62ADE3B609CF5E2EE23C64D0B75055BD249ADFEC7B4224D040D883CA6747571955349CF8AD17E94E6FE5D0259F4D55623D4DC5C3CB4AC64A7A87DBBA48B7420D7990F3C261DB9838C5B90BF72B82C8238A1A58FE8E6137AAFE2405FD710F7ADB95B4F576668A6DB104942C88ED8D01E4E58188F5E32A24B5B964D5CEC10C08F76C0F472E84A0FB6EB5E37AAEE233DE54C212B0A012D3E20F864B2D53463E221F81B784B6F7BE81FBFCAE6785C2430454DD81C436E0A516BF8C8307B2879FF86378629C5EA7E586D83C83550D2E732930F7FE3BAD07B86C81E024D177B5D88A> |-/e <1C60D8A8C9B7EF322472FA01213C7AD90A23B536C2309DD40D370E2449B0D0FEF85A6BE8067F30686F143E75903EB6FA56935472EF47CE3F33433C2F0C8B6FA51573AE54B2C516F6F024F8775AD6639544E339FC2A328548BCBFD58B0EEA03B7DC3AB069F44477958BFBFAAC7196D411DF9BE0B78A86C4BC33EC5D7C37295284C077711C162623860AACA404F650F8D516970257> |-/h <1C60D8A8C9B7EF322B3BE19FB964E037672C8A279BC86F7B9BF0C8203E131450D56E388301CEAE43162551FBE05CABF94DC3B5DDFBB4DA55D11470EBD41AC970CEE2D2EFA88D51157B4EF5536CB673423CDDB06FA774D27105AD2B1AC2DFA8> |-/i <1C60D8A8C9B88C087228DFC7C7ABCC71B868F57EDB285655227000619B171C8A80AB> |-/l <1C60D8A8C9B88C08722AD20D19A90F9064193C8D82> |-/m <1C60D8A8C9B6B41CBB5F87BE20C872DF59FABCB36542419CBFA3D5519AD5BA8076F32ECFD724B055F72CAC37BC47239ACC8B0FB48B8ACFF099B97085BD99C333951D0338D27FF6AB9B3F3C69320476BA0CD4F9573B79AD358A91B0176AFB9AEF169308783E9C6287F18E6E658AF5AA6C9688B500806DA169A1B21069D55C54A2FF607A6A38976171B08665C3ACCAA84DFB970D01180645CE5CBC48DFE37B> |-/n <1C60D8A8C9B7EF322B3BE19FB964E04D2DB06D4930CA5D8F41D2EF3A285C0BD536CD2C57668EB9E30311BF9A2872DFB44F2BF2A4683B5D66FA01BB1CCDADE9C8A9EE2CB010715D3D6DFF0E843CF77C87A07D1DBD0482675E3CA1DAA2A5203A8015DD09B7CE> |-/r <1C60D8A8C9B81F2C3A9694980E415F1DEF5C498473095A24D1BE112857894FEA85DB28AD762FB8D2F4CAC5BF8B9C18D8A2DFCF155E0751AF58898A6619ADD420F549AB7C795751D32E8EE6> |-/s <1C60D8A8C9B7A73DA057E90C9BFBE0FE301E99CB771FA2F05368A6342B5F80456D91458EA2F3CAD55CDF89BFF34EEB39D7DD325B057E2BF0E9B878C214E2BD1BD70DCABE10E0DC8EBCF7B100B55EBE94FB0F17084E21EBD279B324AEABD96538911D053BE9D7ECBF43F934B1033C9E405BBE31E7EDB643609C8D779046E1B250C3CF05E6FA4787649137D90F47F85972A6603BA900DD7CB710E02662DB3287CB26D7B7AE794611498865FC85A28083D2F6C2DEC302D47619A4A577C5B8435558FCFE71A1BB6783AFD5F58B6D2C03593B3F2297A66A7E6D13C1E321C57F4172D53C8FCAF4D28F2B78D3A4BF03> |-/y <1C60D8A8C9B7A73DB92EFAEC912AA9CB61EA2C87B96577B4D13A11140AAA18C6E226D96ACA3DE3B427B0A298EF106E8BC0FCA1DC8D81AF2F08A42A0F5836B6230FDF576E37CE129EFF9730F23EC10CF5ACA4D4CA70309E71B89A944CA7348AEBF55FF5ADA9F61B4BA14C9A2301A8C53EBFBE665E1DC22E> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/LCRYXN+ArialMT-Identity-H /ArialMT findfont ct_VMDictPut/LCRYXN+ArialMT-Identity-H*1 [32{/.notdef}rp /space 34{/.notdef}rp /C 2{/.notdef}rp /F 9{/.notdef}rp /P 2{/.notdef}rp /S /T 12{/.notdef}rp /a 3{/.notdef}rp /e 2{/.notdef}rp /h /i 2{/.notdef}rp /l /m /n 3{/.notdef}rp /r /s 5{/.notdef}rp /y 134{/.notdef}rp]LCRYXN+ArialMT-Identity-H nfLCRYXN+ArialMT-Identity-H*1 [18 -2.20436e-15 -2.20436e-15 -18 0 0 ]msf530.609 403.816 mo(Primary FTS )[12.0059 5.99414 3.99902 14.9941 10.0107 5.99414 9 5.00098 10.9951 10.9951 12.0059 0 ]xsh530.609 425.816 mo(Channels )[12.999 10.0107 10.0107 10.0107 10.0107 10.0107 3.99902 9 0 ]xsh0.454902 0.372549 0.380392 0.0235294 cmyk
%ADOBeginSubsetFont: ArialMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2011 Adobe System Incorporated. All rights reserved.systemdict beginLCRYXN+ArialMT-Identity-H dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/c <1C60D8A8C9B7A73DB9D8FD6AA4FBAF8D65C36EA1D4AADBD389F972C0EDCE9E7F36285FA93A80D3647871D2CE5AAAA6A6A370DC54E1595FB6AAB3E389C9F7BBBB85F787D6C418B35B940450E5E243895ECFD2205F51B2D154CFFECF34148C344C1EF806F9AAF539FB961E3EFAF6353381E833DF7C0542FFF27122A28D36548FE63FC8465B1B685766E782F0> |-/d <1C60D8A8C9B7EF322407C6655A1B3652DB8522EB511BE6B0855A72D9621458876CAD1FA22A00635F436A34E23EAFC09C394044ECC1389CD99E4AF1C1F6DD52305C78619784840FC37A805B0805EF290BC9E049CF068290816CB7E74DB612941355BCE71CBDD11DD0F9CA29531036ED13EFB9CAB613E9F630FBBC9408EF13CE4683D92968530F64760C3DF85C7C7EA06EBA8BF859> |-/o <1C60D8A8C9B7EF32334FFE7884F6C3B903D000D9FD76C2EAE8EDCCA90A987875625CA0393015EF6761BE1C3B6D9E9DA4BABE1DD313B783BCBF8F620C846C7F6361946173FB7A4A6BF94EAA0CB4947DD1974AF371F3C211E584576DE9AD79F9DA988E9E531810E3876F3029BB1D2ED366525F30E48DD7CE3C9B66C5CC099F518C54BB58C51D6FB6D0C8> |-systemdict /gcheck known {setglobal} if end {end} ifendLCRYXN+ArialMT-Identity-H /Encoding getdup 99 /c putdup 100 /d putdup 111 /o putpop%ADOEndSubsetFont
/LCRYXN+ArialMT-Identity-H*1 [32{/.notdef}rp /space 34{/.notdef}rp /C 2{/.notdef}rp /F 9{/.notdef}rp /P 2{/.notdef}rp /S /T 12{/.notdef}rp /a /.notdef /c /d /e 2{/.notdef}rp /h /i 2{/.notdef}rp /l /m /n /o 2{/.notdef}rp /r /s 5{/.notdef}rp /y 134{/.notdef}rp]LCRYXN+ArialMT-Identity-H nfLCRYXN+ArialMT-Identity-H*1 [18 -2.20436e-15 -2.20436e-15 -18 0 0 ]msf530.609 446.816 mo(Secondary FTS )[12.0059 10.0107 9 10.0107 10.0107 10.0107 10.0107 5.99414 9 5.00098 10.9951 10.9951 12.0059 0 ]xsh530.609 468.816 mo(Channels )[12.999 10.0107 10.0107 10.0107 10.0107 10.0107 3.99902 9 0 ]xsh58.6919 68.4795 mo
58.6919 69.4795 li
220.952 69.4795 li
220.952 154.206 li
59.6919 154.206 li
59.6919 68.4795 li
58.6919 68.4795 li
58.6919 69.4795 li
58.6919 68.4795 li
57.6919 68.4795 li
57.6919 155.206 li
57.6919 155.469 57.7986 155.727 57.9848 155.913 cv
58.171 156.099 58.4286 156.206 58.6919 156.206 cv
221.952 156.206 li
222.215 156.206 222.473 156.099 222.659 155.913 cv
222.845 155.727 222.952 155.469 222.952 155.206 cv
222.952 68.4795 li
222.952 68.2162 222.845 67.9586 222.659 67.7724 cv
222.473 67.5862 222.215 67.4795 221.952 67.4795 cv
58.6919 67.4795 li
58.4286 67.4795 58.171 67.5862 57.9848 67.7724 cv
57.7986 67.9586 57.6919 68.2162 57.6919 68.4795 cv
58.6919 68.4795 li
cp
f
0.74902 0.678431 0.670588 0.901961 cmyk
%ADOBeginSubsetFont: Calibri AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2011 Adobe System Incorporated. All rights reserved.systemdict beginLCRYXM+Calibri dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/eight <1C60D8A8C9B7A0860A34D75BA8453DBFB814014C0C4728DA471D5EF3791FA4240EB1CC5BF59A5FA3487E2F0E763DAE46F0DA05A89110163D83524D7EA404AA647CFB8B0BF18B885098268812056B970352E34734EFB8EA99DA80F13C7EFBAAE9ADBB45CD604BFF3A39C9CC7A0A83927D7D5A4B2E75D06E370927DFBA451037A06D79A6A428CAC7E4423B70CA5D5D84E759135799161CA6E3C2209FA72A04B7CEE79D2AC2B53CAC28C9C6BE5E7D7175AE6E2CDBF62577563D698630ABA357964D6FFA816FE517BCC518B9BCEDB14F7DE18A518BCAEFF1096D5DA42B503A93BE53FF4096FBA3F5C24B50D0262930A71DE4A30874070C74699A09A6A24794006AC9B7A896C548D6B8A51F3AEA75D328845EEB09204FA41C0B74E70ABFB1182501534524562F70E09292D6FA1A2C8E6C1FD060E3FBD2AF40CE1DF48002A14BE258ED46D903FA50D027660F585DE036DCF220923D5C07205E776E7E63A9645C94249B49895A3F8BA08BA0FB2447F849C17ADA529360F3F87B59DDD9C8CE3F87CCDE20932F0C0C3CA7CC03F3A3737BDDA3DE2F37B11A6A44911E362A1E35F43EA93B84A7F7> |-/F <1C60D8A8C9B770DA42EB776051437272AB3109214F2F5AF299B91EDE1F768C5024668BC49B69066FA908CF8FE87EDFDF17A758EE488BEC994A194C62BD1C9426343C7C81CA3B3F963FDAD914A0EC9F4FE665084402A52314B863A06B82A12C3F91EE9C0F2B145AA7D2782C4C7297D5A7A4C8227440D2EB6A6858EEAF3E8D5172513D85C8059F336BE8B10563AA3DFEF476A6E0B2054B979D1F9B4679850776A59C7497BC538F93679A65B973B2A534700FFE8CC98CDC2940E7759A9043FA0F4AD602EBE420E53281F2FA075E541FDAF915055861D63FE68E0F45> |-/T <1C60D8A8C9B7544E0B190CCF17AC40FC5FB79E17D90F4D9996E4640AEC720DEE3DD9AB43080A2A2747E4FEB9D27010F0C393805606540F888AB7849F19EB2260FBF5614F1BF356A0D83CA6E9E401826D12829CB1B7D4D1A2437297EAD434CA7A5112006DA550CD6F8ABF5CB7D09F31273FF39DA8643484195F09918F574C6BDB08CEC3EACB50E1F97A19618B6DB73370B0F21CA3B501ECD63174F03F4E7B6D0BF229F39E4FEFE132F59B547C9249B01AC066ABD268352D20498D98E847669D322216405EAED7> |-systemdict /gcheck known {setglobal} if end {end} ifendLCRYXM+Calibri /Encoding getdup 56 /eight putdup 70 /F putdup 84 /T putpop%ADOEndSubsetFont
/LCRYXM+Calibri*1 [32{/.notdef}rp /ffi 4{/.notdef}rp /percent 7{/.notdef}rp /hyphen /period /.notdef /zero /one /two /three /.notdef /five 2{/.notdef}rp /eight 8{/.notdef}rp /A /.notdef /C 2{/.notdef}rp /F 2{/.notdef}rp /I 2{/.notdef}rp /L /M /N /.notdef /P /Q /R /S /T /U 11{/.notdef}rp /a /.notdef /c /d /e /f /g /h /i /.notdef /k /l /m /n /o /p /q /r /s /t /u /v 2{/.notdef}rp /y 134{/.notdef}rp]LCRYXM+Calibri nfLCRYXM+Calibri*1 [24 -2.93915e-15 -2.93915e-15 -24 0 0 ]msf101.657 97.4424 mo(TRIUMF)[11.6953 13.0313 6.04688 15.3984 20.5195 0 ]xsh113.692 126.442 mo(100%)[12.1641 12.1641 12.1641 0 ]xshLCRYXM+Calibri*1 [16 -1.95943e-15 -1.95943e-15 -16 0 0 ]msf82.4541 147.442 mo(t2ksrm.nd280.org)[5.35938 8.10938 7.27344 6.25781 5.57813 12.7813 4.03906 8.40625 8.40625 8.10938 8.10938 8.10938 4.03906 8.4375 5.57813 0 ]xsh223.185 91.9375 mo
273.513 92.0576 li
273.518 90.0576 li
223.19 89.9375 li
0 0.937255 1 0 cmyk
f
275.5 91.0625 mo
268.009 95.4082 li
267.531 95.6855 266.919 95.5229 266.642 95.0454 cv
266.365 94.5674 266.527 93.9556 267.005 93.6782 cv
271.531 91.0532 li
267.018 88.4063 li
266.542 88.1265 266.382 87.5137 266.661 87.0376 cv
266.94 86.561 267.553 86.4014 268.03 86.6807 cv
275.5 91.0625 li
cp
ef
275.502 123.813 mo
225.175 123.692 li
225.17 125.692 li
275.498 125.812 li
f
223.188 124.688 mo
230.679 120.342 li
231.156 120.064 231.768 120.227 232.045 120.705 cv
232.323 121.183 232.16 121.794 231.682 122.072 cv
227.157 124.697 li
231.67 127.344 li
232.146 127.624 232.306 128.236 232.026 128.712 cv
231.747 129.189 231.134 129.349 230.658 129.069 cv
223.188 124.688 li
cp
ef
0.454902 0.372549 0.380392 0.0235294 cmyk
%ADOBeginSubsetFont: ArialMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2011 Adobe System Incorporated. All rights reserved.systemdict beginLCRYXN+ArialMT-Identity-H dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/percent <1C60D8A8C9B59F85E0DAE049DF5400FEC4D0F8EFBB52A794092230A72D7DDFAEB104EF27289C7A718241B806C975E93A1C75FAB2AB14E2A41AABFA401064DD7C7601B5CEF9B44E6E5682565718CE9083F91297B631654C992324F9A0BDB4D7D87F76BE4F94F142F746E26C71DDE74C7BF9585CC13A09469724AA344945B569B0FB415021010E90C3107A0803BCE8988A410C7939294480777D58961A6E170A7CDE3DAA0882DCD986E1F7B72319EC21DE481ECC36E4986C9E8860671246A8D025F0AB275EDE7E18CBB7C91C73156434618A11E0A8CB4320EEAD41F234498555E467EEFA43A3A97E67C97385880DF9AC3142F67EE844C46F0A5F81E46166A68F5C428FAF89F547A11FD7641D5E347705A7> |-/zero <1C60D8A8C9B7EF322B1082CBA0BF9C14E99A3DA73C31B9142A392BD3ABC1EA97FF39C814FAC04D646DD2C4A98FCAF9A9470BD1CDA748490BF1B6225A10425162B711F636C55967253E957B919DCC3F666292C622E3ED0D587E9E568E31D888BB4F8FA5748005C40596B5B6BF48502A62C5A69962DBA8DFCFAE3F282BC60C6C207F4C9D9AD32681DD3B2E0F2C2045F707B1BB6597DD9D355BD3D00BE3A5B546505C954A88> |-/one <1C60D8A8C9B7EF32247817CBAD74894E625B0BAD23872C089E8D91F92FE1B529DBABA181AB8B085B7A00FC86C529813E9B576642> |-/A <1C60D8A8C9B64EDFED26B9E21A4F64848088903AC9891CF791BDBC4AB29ACC8B3E8D13924A7DDE35F09AC5F4A8229C87124C732743268600EF8D4582208BD16D82> |-/f <1C60D8A8C9B854D0F47057B2F13303E258FCAEE9E8BBA6E28AE872907C5663BFD2A0F535ED0EB011F2C2A875E053FAF73E8AA16B1F99510A6812F90D61CF3F1DA5EF558899A9AE12AAF6AF4568E0F6003B0A2FF6F33293> |-systemdict /gcheck known {setglobal} if end {end} ifendLCRYXN+ArialMT-Identity-H /Encoding getdup 37 /percent putdup 48 /zero putdup 49 /one putdup 65 /A putdup 102 /f putpop%ADOEndSubsetFont
/LCRYXN+ArialMT-Identity-H*1 [32{/.notdef}rp /space 4{/.notdef}rp /percent 10{/.notdef}rp /zero /one 15{/.notdef}rp /A /.notdef /C 2{/.notdef}rp /F 9{/.notdef}rp /P 2{/.notdef}rp /S /T 12{/.notdef}rp /a /.notdef /c /d /e /f /.notdef /h /i 2{/.notdef}rp /l /m /n /o 2{/.notdef}rp /r /s 5{/.notdef}rp /y 134{/.notdef}rp]LCRYXN+ArialMT-Identity-H nfLCRYXN+ArialMT-Identity-H*1 [18 -2.20436e-15 -2.20436e-15 -18 0 0 ]msf276.526 381.188 mo(100% of )[10.0107 10.0107 10.0107 16.0049 5.00098 10.0107 5.00098 0 ]xsh347.577 381.188 mo(oaAnalysis)[10.0107 10.0107 12.0059 10.0107 10.0107 3.99902 9 9 3.99902 0 ]xsh434.624 381.188 mo( )sh714.59 342.34 mo
714.59 345.616 714.367 348.585 714.016 350.683 cv
713.843 351.729 713.632 352.564 713.435 353.06 cv
713.34 353.306 713.242 353.465 713.213 353.496 cv
713.216 353.498 li
713.214 353.496 li
713.213 353.496 li
713.216 353.498 li
713.214 353.496 li
713.584 353.9 li
713.584 353.372 li
713.371 353.371 713.229 353.478 713.214 353.496 cv
713.584 353.9 li
713.584 353.372 li
360.831 353.372 li
360.556 353.371 360.297 353.461 360.106 353.58 cv
359.744 353.81 359.555 354.089 359.386 354.381 cv
359.101 354.896 358.9 355.521 358.712 356.297 cv
358.163 358.608 357.828 362.255 357.825 366.404 cv
357.825 366.668 357.932 366.925 358.118 367.111 cv
358.304 367.298 358.562 367.404 358.825 367.404 cv
359.089 367.404 359.346 367.298 359.532 367.111 cv
359.719 366.925 359.825 366.668 359.825 366.404 cv
359.825 363.035 359.6 359.988 359.224 357.732 cv
359.035 356.6 358.814 355.673 358.531 354.951 cv
358.386 354.589 358.232 354.275 358 353.985 cv
357.882 353.841 357.74 353.7 357.546 353.58 cv
357.354 353.461 357.095 353.371 356.82 353.372 cv
4.06641 353.372 li
4.06641 353.974 li
4.38181 353.456 li
4.32497 353.419 4.20267 353.371 4.06641 353.372 cv
4.06641 353.974 li
4.38181 353.456 li
4.19499 353.763 li
4.43525 353.495 li
4.38181 353.456 li
4.19499 353.763 li
4.43525 353.495 li
4.34428 353.596 li
4.44242 353.502 li
4.43525 353.495 li
4.34428 353.596 li
4.44242 353.502 li
4.39624 353.436 li
4.28061 353.261 4.08648 352.775 3.9247 352.112 cv
3.41892 350.101 3.05816 346.454 3.06104 342.34 cv
1.06104 342.34 li
1.06166 345.709 1.2867 348.756 1.66204 351.012 cv
1.85199 352.143 2.07303 353.071 2.35548 353.793 cv
2.50047 354.155 2.65429 354.469 2.88687 354.759 cv
3.00486 354.903 3.14637 355.044 3.34097 355.164 cv
3.53263 355.283 3.79171 355.373 4.06641 355.372 cv
356.82 355.372 li
356.82 354.771 li
356.505 355.288 li
356.562 355.325 356.684 355.373 356.82 355.372 cv
356.82 354.771 li
356.505 355.288 li
356.692 354.982 li
356.451 355.249 li
356.505 355.288 li
356.692 354.982 li
356.451 355.249 li
356.542 355.148 li
356.444 355.242 li
356.451 355.249 li
356.542 355.148 li
356.444 355.242 li
356.49 355.308 li
356.606 355.483 356.8 355.969 356.962 356.632 cv
357.467 358.643 357.828 362.29 357.825 366.404 cv
357.825 366.668 357.932 366.925 358.118 367.111 cv
358.304 367.298 358.562 367.404 358.825 367.404 cv
359.089 367.404 359.346 367.298 359.532 367.111 cv
359.719 366.925 359.825 366.668 359.825 366.404 cv
359.825 363.128 360.048 360.159 360.399 358.061 cv
360.572 357.014 360.783 356.18 360.981 355.684 cv
361.076 355.438 361.174 355.279 361.202 355.248 cv
361.2 355.246 li
361.201 355.248 li
361.202 355.248 li
361.2 355.246 li
361.201 355.248 li
360.831 354.844 li
360.831 355.372 li
361.044 355.373 361.187 355.266 361.201 355.248 cv
360.831 354.844 li
360.831 355.372 li
713.584 355.372 li
713.859 355.373 714.118 355.283 714.309 355.164 cv
714.672 354.935 714.86 354.655 715.029 354.363 cv
715.314 353.848 715.515 353.223 715.703 352.447 cv
716.252 350.136 716.587 346.489 716.59 342.34 cv
714.59 342.34 li
cp
f
%ADOBeginSubsetFont: ArialMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2011 Adobe System Incorporated. All rights reserved.systemdict beginLCRYXN+ArialMT-Identity-H dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/plus <1C60D8A8C9B7F3748941D4B1C211C787F1DCE1076406E139A12F470B397B613EE7D27104427D3AF38200F99E7A> |-/R <1C60D8A8C9B6079F62E89B521DCDBE3DC5497B8DD99916239C0DFA5ED4F632B33575F4260343AF5DB7D477D12055F49C5E99C0AC176EAD42723223937F2BA15ECAD7751CB6A136B700EE485E38E7CDB87D9465C90BB8E29B04FDDA42609FBC3833B9FB5105619F4CC434003085F449D9FD5022725306B331FB97B31D295257B180DE1FD5465D256CCA19301DA97326882845130A5257BF61307ABA64C3F0B222> |-/b <1C60D8A8C9B7EF322B32790B4C40581173F160A628925C2B3464303D1D06742E51EAF8B24CA2240525B9E37D08039C077561F794D203DE8C21652F0F5A81A2CE84BC5F560E6CA22CB86602E80E4BBDAC611F34E85189D165B97A2D648CF626A92F4026AFF0CA38E8E165B7E956CB11B132485900857B09AC55401998CADA1EAAF79B76AA2B52CCF0307B360E6D> |-systemdict /gcheck known {setglobal} if end {end} ifendLCRYXN+ArialMT-Identity-H /Encoding getdup 43 /plus putdup 82 /R putdup 98 /b putpop%ADOEndSubsetFont
/LCRYXN+ArialMT-Identity-H*1 [32{/.notdef}rp /space 4{/.notdef}rp /percent 5{/.notdef}rp /plus 4{/.notdef}rp /zero /one 15{/.notdef}rp /A /.notdef /C 2{/.notdef}rp /F 9{/.notdef}rp /P /.notdef /R /S /T 12{/.notdef}rp /a /b /c /d /e /f /.notdef /h /i 2{/.notdef}rp /l /m /n /o 2{/.notdef}rp /r /s 5{/.notdef}rp /y 134{/.notdef}rp]LCRYXN+ArialMT-Identity-H nfLCRYXN+ArialMT-Identity-H*1 [18 -2.20436e-15 -2.20436e-15 -18 0 0 ]msf207.221 22.6299 mo(100% of )[10.0107 10.0107 10.0107 16.0049 5.00098 10.0107 5.00098 0 ]xsh278.272 22.6299 mo(oaAnalysis)[10.0107 10.0107 12.0059 10.0107 10.0107 3.99902 9 9 3.99902 0 ]xsh365.319 22.6299 mo( + 100% of )[5.00098 10.5117 5.00098 10.0107 10.0107 10.0107 16.0049 5.00098 10.0107 5.00098 0 ]xsh456.883 22.6299 mo(oaCalib)[10.0107 10.0107 12.999 10.0107 3.99902 3.99902 0 ]xsh517.923 22.6299 mo( and )[5.00098 10.0103 10.0117 10.0098 0 ]xsh344.063 44.6299 mo(oaRecon)[10.0107 10.0107 12.999 10.0107 9 10.0107 0 ]xsh416.115 44.6299 mo( )sh59.6919 61.3198 mo
59.6913 58.0436 59.9152 55.0745 60.2657 52.9758 cv
60.4387 51.9297 60.6497 51.0955 60.8471 50.5993 cv
60.942 50.3529 61.0401 50.1939 61.0685 50.163 cv
61.0661 50.161 li
61.0677 50.1628 li
61.0685 50.163 li
61.0661 50.161 li
61.0677 50.1628 li
60.6973 49.7588 li
60.6973 50.2871 li
60.9102 50.288 61.0531 50.1811 61.0677 50.1628 cv
60.6973 49.7588 li
60.6973 50.2871 li
377.993 50.2871 li
378.268 50.2885 378.527 50.1977 378.719 50.0789 cv
379.081 49.8494 379.269 49.5698 379.438 49.278 cv
379.723 48.7633 379.924 48.1383 380.112 47.3621 cv
380.661 45.0511 380.996 41.4042 380.998 37.2549 cv
380.998 36.9915 380.891 36.734 380.705 36.5478 cv
380.519 36.3616 380.261 36.2549 379.998 36.2549 cv
379.735 36.2549 379.477 36.3616 379.291 36.5478 cv
379.105 36.734 378.998 36.9915 378.998 37.2549 cv
378.999 40.6241 379.224 43.6712 379.599 45.9275 cv
379.789 47.0588 380.01 47.9867 380.293 48.7083 cv
380.438 49.0708 380.592 49.3847 380.824 49.6744 cv
380.942 49.8183 381.084 49.9596 381.279 50.0791 cv
381.47 50.1979 381.729 50.2885 382.004 50.2871 cv
699.299 50.2871 li
699.299 49.6856 li
698.983 50.2032 li
699.04 50.2398 699.163 50.2885 699.299 50.2871 cv
699.299 49.6856 li
698.983 50.2032 li
699.17 49.8964 li
698.93 50.1643 li
698.983 50.2032 li
699.17 49.8964 li
698.93 50.1643 li
699.02 50.0635 li
698.923 50.1575 li
698.93 50.1643 li
699.02 50.0635 li
698.923 50.1575 li
698.969 50.2228 li
699.085 50.3985 699.279 50.8838 699.441 51.5471 cv
699.947 53.5582 700.308 57.2052 700.305 61.3198 cv
702.305 61.3198 li
702.304 57.9505 702.079 54.9033 701.703 52.6469 cv
701.513 51.5156 701.292 50.5876 701.01 49.866 cv
700.865 49.5036 700.711 49.1897 700.478 48.9001 cv
700.36 48.7561 700.219 48.6148 700.024 48.4953 cv
699.833 48.3765 699.573 48.2858 699.299 48.2871 cv
382.004 48.2871 li
382.004 48.888 li
382.319 48.3709 li
382.262 48.3343 382.14 48.2858 382.004 48.2871 cv
382.004 48.888 li
382.319 48.3709 li
382.132 48.6772 li
382.372 48.4097 li
382.319 48.3709 li
382.132 48.6772 li
382.372 48.4097 li
382.282 48.5108 li
382.379 48.4165 li
382.372 48.4097 li
382.282 48.5108 li
382.379 48.4165 li
382.333 48.3513 li
382.218 48.1757 382.023 47.6905 381.862 47.0272 cv
381.356 45.0164 380.995 41.3695 380.998 37.2549 cv
380.998 36.9915 380.891 36.734 380.705 36.5478 cv
380.519 36.3616 380.261 36.2549 379.998 36.2549 cv
379.735 36.2549 379.477 36.3616 379.291 36.5478 cv
379.105 36.734 378.998 36.9915 378.998 37.2549 cv
378.999 40.5311 378.775 43.5001 378.424 45.5987 cv
378.252 46.6447 378.041 47.4789 377.843 47.975 cv
377.748 48.2214 377.65 48.3803 377.622 48.4112 cv
377.624 48.4133 li
377.623 48.4114 li
377.622 48.4112 li
377.624 48.4133 li
377.623 48.4114 li
377.993 48.8154 li
377.993 48.2871 li
377.78 48.2862 377.637 48.3931 377.623 48.4114 cv
377.993 48.8154 li
377.993 48.2871 li
60.6973 48.2871 li
60.4226 48.2858 60.1635 48.3765 59.9719 48.4953 cv
59.6097 48.7248 59.4215 49.0044 59.2522 49.2962 cv
58.9677 49.811 58.7667 50.436 58.5786 51.2122 cv
58.0296 53.5234 57.6943 57.1705 57.6919 61.3198 cv
59.6919 61.3198 li
cp
f
grestore
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
/LCRYXM+Calibri*1 uf/LCRYXM+Calibri uf/Calibri uf/LCRYXN+ArialMT-Identity-H*1 uf/LCRYXN+ArialMT-Identity-H uf/ArialMT ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 13.0%%AI8_CreatorVersion: 13.0.0%%For: (Ben Still BlackMac) ()%%Title: (ProcessedDataDist.eps)%%CreationDate: 3/23/11 5:43 PM%AI9_DataStream%Gb!Q;pO;D=dcc)[hB=/<2k(:#!?5MSUkeS70aXPn^cm+95OPjb(!Do&D+ltI52XW]/Xkdhd56hP)U%1"-];uR5Q9XiJ*6PCn1V[k%pQCr?bN#SpDkrfGF^`^$N26"A8tL.#frR:R:?5Q,YPb:UhE,Y(JLdk9-YYQ1r+h?8[Q4NU(3)+$K;P0oD[k$^i'M+\g`#n@Eh@)g%]9l?KIAq#6Qoe#jM#F"m:?58f^6aa5n2E9)_(YZ&m_rYbQK7sMP"EQ`'-E%M],;_$cj;qsT23LuiM%i.!@jr6km1Oc_$cYAo_DOV%cN+7N#qS>J5(@=o4U,/JAs,/$%c5[&Cbii$%nnIB"WqanRnL)7rg+SgX$<)sXa,COILBPj9kcF)[cS4^D'G7'VY9#+1jGi\.kO%'%;6(,<&7LcZ]lYG+5,OMPDP7A(qPu:J.h<oPl&Y"kff/?k<PO0s`Q@`+rkCc!<C+K/D\b]3^)QeiUCj\MppTcc<uRfn/,+q=(?>UN%rit0-DU<4A?d]pmc"+>74jEG,)<DKm`EDMf,gR0<\W=q51i?(V&[`3/Okra;#lopD1V(2@-F4La,OggTZ^4?8Qro#9+U8(![hH7h%+J()+YY2P,eK<rTRojWR3e:jFQ2=i]PaV;Q(;D!_UKQl3Nr6q>JhGC4dTE1^kZ7LaK>TCjo370Hq$khjh!.7U`NsnVr`MJt%g5*4%>4WO)Q,tB5HSt'V4oWbIWYbj;&de?%:;b[g%_e7PjOZd$^*aQ_C*E\^-5-*R.)NUd?0O1^Pto58kqm4A:;^,sZmZQS\K#FLbJ?(s%n-AF-j^>,o%^pt]i%&VD0#L`O1;'quL0)N/fL?S6<DcGfiSC46YDXU=#?-TG`UmPspaWq?>Yb?>^fT.qp'JIM<j5AqVt_1s&U]:L%@#s4rlo3l+^)-JL^;=fm8+76[_L04^@?9=slo0<I^VW0#S=#c_5AUN#"^b[W;1u[rq*<(WO"hG*Qf'C.'DEJFO(lYA@I0(r+sYM;%s1qa?J++1>_@jf#`n.H5i&b`YqaVoj\Us:(rI_<C)seT25CCG7_dD=PC^'\@?a1<MQ=.F9r"(+#!D#5u+!NL7+6GV#L&"45JpWNW%LQl;[0O>0Ua:#I"J$9CK*RRR54*W^P280Fp#@CmiXP^73Qm_Z8p^5ckhRPa:Z\e'Wc=%,`]87"2>p7o+.E@m/Fb/0KOX]ESV@IYf%j2HCuPS8n8^1#`(.tSd/a7nW[p^^;`/JDnUQ9"(:L*33TXM:43j*P#P@]c)1&O'p?O0tJ@]r$;KDG>nBV/&sU>h7s9.3b:8GAGtV%Zk@Zk?47Y-ag)?OKC@GCZH?N:Nj!-bpb/&RhmI\+kOPEHp_W<<s(*t\]Cq9bZ<@)gRjGSNare[_/)!)aj*CQ.HcLUgO!*@f[!2FL%WSm7!48ra>5O?^im,0C[/,i;XiHNY`Gd<i5M#moB-nlMkMm%YTJOq<ZUA6Z#:=6gen9Zo#hr2>/5[ND&)$/S_Ic\@Q#!^N8nU7-f%>Cb9rh7[ON+sUV$"ZL+igaaW`peHDUgd<3@n67@P?ch-"-2nXg`0eaki,>SSTcAM*hr$T/$>E0\&J%jDWLnJ'Zcg7lHN'd0V<:1"%U\gk\>0%sCD1ls))<3$m!o/`l_t$%Sg8=nX]<NV)G;Qk3q@Dt<F6q'*!`L8r[DC\RiVobC(:&nIpG.2Y6\Q-3clRm/P3.Pi*D4QB%MBY99aXIdTFm_/7#I"=>M_,T*B@L_eUs]A<(RA-O;=9%m")C*J2,Ub'"hru'#gGaN'Wc9m"6:B*3=W"Vm]qR+'o2hK)>FQ@alS)G%\SOB\hk?(*qaEgTqLg9;/M]R0&.Z'n,]C,]!<5%LT.feI660m#nR/Hf40g)rEYeHSfE,Bqn1eeTPu(o)OlB<\65@XN>MM0VPJFGc%.s(1pItIFV36W$A)u;GYe];$p7j]3#*`&O;H7&QLP-RW__,lXC1/iQQO:11QUfb$C9i>+f(&FFgn"S6W7HSTMBS:]@TZJ.jJaHT/%F'-9*P;:NC"_64V_m8,KgbA=n$D0"1X?T+Z%(\r3SK]cupC20WCBaN>7p->n*cXObM,aG)f-%Q-KQKB,=UH-s=<<,ra@\3Q1(%PY%!S0<-58qcJ9`]']X[LWKEXh5@=jp!AUP'7*4d";218a's:ksm6ich1SGYCfk0c0-Xn1@,3bc-a1YKCd>HO'iB-&[##@UVqdr"!@k%H`M+*8I(1e=%>PNNh$)1KE45P#5MqAKtp%Ub9kqPcp]7<;YZX-+qS3lfH)2R*3#klebl/Y>C<%YT.%-K<cq-E:<c6f-/'R@`K:tU%E=mP.<IY_/KKUUZR;c'O+)$-rUq&VE&4p:IpqNcKK_T'T$7,oPVadIn=sd4UPgS@J)5?q]IP4n_"c'n?G_`tbhWCBL+o7#<0^e6*%CL1#)N$`JFL%,YiNFhJMOU"$m-P?Q6_WN3'3L0dhMm0T&8RW-bYMaWalc;&O_KI)3/LGeC7H+G*eoC&sE!qI@s%9GW=[jm=l@#+[%/UHh5RS%m^]Khn6,_r@NIKB>C*:Q!/bMhb<oSV9__I&r`!ZnJ&Y&J?uKt].ZU!^<-ItP!+U^HuN0[GJjP`Zh^#Pe[T9jqc[2"FB:%>fNmk0[Eeg"hlIO-;Z.Y*4?d1]+Q/-g`.3lFmfY-Y!riX++V\an0-mCL6UC5iR)Tg0<NI3Q"u8*6OG8)`/grQP?AWimW[m0&8pS>%7C!1SqNb%UJn^m)XC/oMU4sK15tsA+,nLbM!_h]k4k!ikpe7VWB\:F>`,d(FLj7uTWL.]U-Gi'%>Ig*c[u-;q,4Zn*j9Wt_5p$Ba%LlS6MQdD4#H&-g4e`/pck#@:c:#`Cs,+L3=UQZOU.*%]CQ'44#f+JEbHH`AnTY!3i%i$L4Nc7622hC+g69/uJ+fE4F;l.mEGR(!]%`j',q3h-r8ap:edUu,o/bGmD*PcjM?Y,Ke!["U*\El>W1nN"Tb;30XnA]uMj>L;28R7NnF9pHW.^Qbn')Qf[Q"8%h_Daa,YBKqfU%4&S'KHVSll16+bm#lJLAnZeTA%8%S'E=@/..iR>-jAS(<^BUGskg,sCVFNiI0q2*R/tAl"hfQe)70+j;FV`l>4SnC3'(,0<[#&D"%KA#';AO]@J]1%#[<9E*Q'J14i&I%m-e4bbDYa%:+VE?$."EjF`dIF4(SRgXIG8sVEp-da_#)1so)4ZW6Z>Ck)a3cBI6cfaOO^^r?%4-J3JIftWWP*d35/<\0R8lRg7+YaCnl`5(\X]HLn<-@?Cdh3hW">[S%Q+=(h,6"BI,t^j)HAM#kB)Np1VMp\XI=X*dRE=@q",;cp%2=2HE.sPZXWPUYi8.g]\eG(JjnQ)2ZAMr32h)Jl`;&m6@bUG@td'Hq;ilAS%'[iN#Ag^+W#]-n#R`2/G*"0pr@O/O=oTdYFeVKR9%4:'P0m"oFSB0pq30%7+,ZmA*3BZZ8L/o0,KU46^&Tk4euG"QpH<&24INae0t-?B8Xra]&leDjJ?77fWf2N-b6=LOY^@NI)LN?`L*%01"dpPjF9BAJbd:US.oqbUY9V-i#*@'6B=M+N@(#4((.k2.F+bFc+>S6Hj1-+;o4J$=:c_Yu]7s<G5Me6\g"SpAjrWb[BEJ1(P.C%fh!rk+gW534\b%+:`D/W=*U;knm(K<cDaYcYf]O"1K#>4pl+SJ9**b6,%jNVPS[Cc'0*pc@#ogo7E3n&ah":I;'\O+,clXj.&\(@%%,Oq!cg*$Ra"cs_r>;UTWK^Bhb"C/\!9YsK)GhM5CWHDl^1(k#\jlQ_jP@*[`RpJU$VM,(';(0@BmF$D9<f[<bNio3:NTH<l+oP[%o0`:jglgGc]W4Y]RV.6-<:kh4<Unf^-8!iEGpYX7d%_"4_q.rVZrK9V2_6]#;67aHmpak8,skY7o7$IPXm[I!gES\c>cC3#L7=.l%FDml.Lh+TJ6_Y'E2N_+?_&gZi"dNet.8Y.Q`;+J1M0Lpf_h8Q=a!+```a["XF^7hni>8'`f=Z_o67?=GDtZ75J[+J4eceKR/XX>J%1Ls/2=0<#cj#0<YcL+_CEQ>a(GIJW.ruY.*W>Oa'cKa-S46;kM^M@leT?"'Zrr3:rS'?`Xh24>Gd]mrVmGMlf=taEJc-uZVE/W$6%B#sfcOeIk3)LWg7BQ?$@PO*M?iZ.'/ZAPiL'>7<HO5JZ>3EF6YnG#-[`u.R`joaukkO%1\0UmXbM?'9AA>g,g$ITBdVNd>iN`WM7%HqJ0GnrP8lRSn328q%H8)MLjSTg?eDi*Vm'VBh@%Z8EVV%'a7=kYhh#?8?Nf:-p\Xb,!O'XO9VkG=Jbl6CPft,Q,\2l'2?%0hjF-%'tf/?FdM!B1iS[PYeXQ_X[sW'=*!@X*_R?E%EdN>rFh8T]D*<3UTm;)BFj3pcmT%-kc'NQE7698<1]',hV]:)Nd<!IL6F9<:&U$R%ge.1WeFhfnjC5l^a]t;-a'V2J0:.]IafW<'\?Rp2Fo.=1Y0:@F$nfTC*N@d8%U621X0\0dZ&<mWfTfp4UmW`VVr#h<9j.g+XOZRY%S].NdPl?]NZo7^Y('<>9^a4*#.jj4Z-0eN&]sWp;pMlZdeY]OY)'eXRfEA[Si3j<!m6keQ_5&W$dfjX#d$hOT$aji\p%9WQYq@.q%P%#HIn(;G/a[=^=RFHfBTk!K/E%&t@e!:D&0`@#_4%?>l[ljk!P0k%b!3I4+9W!=#rn$m,2O@WRC"/:N0hd4W/ioTJ]2C<%<FV<$%@;GT(;Lb,F(UHtg][.RZpHR(c2HgrIFtL*Hmh<7dP5qQ\=G!/8X]]9kKO79&(AM1Ork"8(Y`mnb^W&"mn'8-p66Cc%ofK9!\3[g/%2k0m,/sGh5!2>cKPPJ&?c*_JW'@LjPT>I2GVQGjmj013s7G3p78o+QOAD@>6`M=)l6]):SN.@'E(af*VrJlBopAaDF"]:\bo)))X%e<=*=U6UEp6'NQd;<^R-&3*amf*<<se,s*=9`^hW(Ff]R[:X(=ekAsJ6si4.q=eDS""N;fEKl>]W6ZI7N/C54"gd>*s*dS@l`&V%%'K<VAN@lZ)Uu.NK`>ri97t\@iQb$!kZWTL^h2MRmC3='cn$7V9[5uAOYXr>_G/_03j0+c](_']-3O$EC=;o+=/T@>_=[>.I;tZ46%Cb_+DHPbTa/p'?rW\X!9?r]gJmmAN3;9M=5@cXF(\V,kURa2fNn9O*g]r&H(RX_2t@r+crM->E2YULZ(jH9U]05R(W*5rtg8]1VH%V;F^W#em*ErG`>bh#%[o`fS<@!V!s($`X[6iaT5FZtA5jk+JL*I]jOioT)h.8SfkP\r.'f215IE%_X1hT?Y>-8((IScc,$E1#Q6.%AaZh69WU)T2uKdSOit`IBfL%u`S%%r%`"&'/WIN@]m,]kNJG;75&UCZg6:Jc%);+ST#.T+!3Eg7;MWd8Y)=aAP5Vm/0#4<`4BY?R%a1[>QcZLUPC%&&Zs5)dk^j'LC4lnX#FV!@1IQd#s-/maUXo:.b$a2"s&t#l9bOuHc^Yi_c#OU"-U-FuF"1mm8!YBX<QP[!s^#ii\%<9_k=;TVme7_ch6ruF)%cjf$Y1$8*`-Dc8*'.;-+l`bojeel3As(:K1;[iP:r9njR&=?^(1#Zn`+;9M^=jl_.?cfn^[7$>:T8b[E%Ujfk+Su4B/DZ>6sA[EAE+S@)PLgh>"[5._S)G[.DOm4T-gtR0ha\t:J:e\Z7G(G>iHe-h/),4Q4inj'HCFUKJkMIIuH0[_TLTPPh%hF#&Y+JJZ5q@!4hhBh.<<1k](p1`+pM:h^D*52JioB(OQ[s,e0@h:_q07.t0dWbgi`@b==BeSh1h=a@S!L'S.hPCUGYiQLcGUeCT%jH(a<Cq7VWnDt2U;?n:m^eb!a9CAA>]t?(H?1@1?%;PVC@LV&$,M*tR!.*SZKT<`*@o(84E_,=W8fkTr]OXX.&+V4W$iL]@-BWqq%0_%O\%Y%(4i(k[AG#.`<ppILHcJMY/Qn!YT<8=RkC<eQaX9I-F97^8^3kA5:Y?G>>"6OD2kuHIu[DlraeEt;+]9]I1Y<&g:?DW:I%>K>1;!'"-b9AMuF2DJp3_3_C@KOFe?nhU8VpsB/Q67XMP`Uind)#4Xu"+KR2M+C;=K>0XBT3Y.%P3Kr\4oaCa0GEbE&MOF4rAFrJ%6*(fU9fZ?orQg#H!IUnIk8R)SA8."W`:m`=J2?IjpbMjO]g'0ppPrl.J$n@j&[8[t3Ll)mS,UqV/kB4Aqokej(t^9TVGK%sIJ[Bo%*T0(,#E0Nq3WlAIKJTE8pn-qT]8n"A^cLZu:l\aoIXsPb\pnhf*Jo8=:9_0sE7Fo:X$)];./li<rbjRar*PIY*B*kO2&^YAZ^Aub%UOUjYrTEf,5AS(H#`a2G`13jfJ(uXV/cS88r;U0$ZeiIrMaufWfF2B0Icl3m091Q:591!!\<0r^l`U5,,2>E_[-)"$FlRC13r2Wr%"$ZTp77[@-n'8\=F@L!>cZU_)8NP;*D[ESg39_2mq9SaBFGQP_Cc^(;bWuq^-M?NrWCK^p[X?DN_2+.Wh<e_rG9lh)Z%%/B#6WF>%9u9Gi\%3[`g6RcSQ?4*gQ'?n7m@kNb1`5@=p3QL:>*?PM)>9tTSI#_qrn`9#h\.b]>MV$!V3rV/-1+G+P2n(9Pg!+)CjO!00o(\;%HaC7F)+Y5Vc_\A_jU@pRc-TF-_.EJa?W(N#On[S3@;FY\QD(X3KG/_2f`XM&D6FD8Y0[dq6BG*#'CI]dG:q.SpMLQ/rkD<fCJT;?%RP"<N(eh;&#PPlN[Mh%u0KS-YMtn&DYQpdqV%P5bcag`T4E"#!EYlf2#^XVpqM@tcWFg4^24dNH5i"JN!"&VlhQ6`qaWX3b#caOn%`KThnFk\m0IV$uN^rdomZ'&4s-*%]t("(5P:nG?m[m+f=qnrF2O"*#]7dQ_8]gH"@p<Hk%Y=7bMg:NeIM<Ojjk>Je((fBjTal0jO%^B9FS(n_a';:SN3dX4j69c/Yf7%1'p[+4O^e8*R&%1F8J9db!LX4FMY(fc<h6[.7F.O27i$XfO,q?HA0O'BgUWZ!Ko9l=n'RKE=u%rR#*,dSuF<'FOpOHIJ;'?)bHkh7_I[A?NPgdMU"<c)'e"a2fc*AnWX87N@X4id7>.2S>rq"gopLk>t]Sh[SuN17J4$VO1AgHgGQn%g=b]f#B!h$C\gjLi5up\-jCVth&CO@Ecl0L*M$u^GgE&KKF=Od0<tX(?G4<C%+\*SDL8@-k?HZ*e%EQB*&@s]?d10N=7KRsqmo,i%Ld-]0EE6m:Q(p=6UXs^"RkA$H:cqr77Ar#NUS;f(cq0-rFHGf)U`S`&GH^sX:QYIh+I7G9nU>?5B?X1o%$XjQU'WPa%r-d;)221>%g3tAc4`/@BLN7J>m^=?6mRASp=4EO\V9N@HaC*k>enGR>!c)AZ^MG;gNMaV=+)=TeD*$^F*D8\fH%2b^,GnZ?2&\kqE#ia`)\CXm%h%acfnmlK0Ec4($G)&,@R'rD7g8%ei1JG.=;#3g'g<_U5[enE.D4?K\0/38#A_6BRZniTGd@,ndRir/pPLb-'T,?;,^0=mQ2,E=q%Be($RNhr/k!Re+LSjmiGW>W$.)]4'/'+PpSVObhd"uDaOUB]Pn3Y@A1G'a=W]/!d7@bbta&5_]DGYDQ`D89@j[E8l$7[2s&haMIY%HOj!n$tLKrn*[mcD]^U8?3>P(`U,)U@&ELjf,mW9apd">]mG/_QdY79Y_,(V%e5Qh>n""AIl8C3!<iWkP3e!mn2@,V-6jo49Y6C-%_m*^GVHq6XZ.RPfZil_8bj*)YH:Qph?"YbP`+u2))>f`*2MPc\Esl%'iZ-1bZ#e@Zc(t08B&A>T90@pg@98oj^W%k]AC@h.&oCjp%_5qHDWN^6Oeu[]"O'4G*#<'P<jQ1*Zkl;4k0*kM=E,&iL.Vu*(pMK[NHM^!J,/]de"f#JC*cRh1'D^OCH<@O@;[FA.72,bN*4D`F%UCF&j9n\$d>A4K^M4E60*hJJpC!q*D%hRF,5?HqgNLRt`YUM8?(r>O56$(JP^d.bVT$?JOR`X&kTN.ZjS1(gMo#uj!=r[XGM=M/e%)QPL-6!IJ.kcSYp]8<n+F''M>do5Y,YtDEV[M77%=rX!$7BAG5H]t_*iM$Tn"MMXq?Gmt4P32Vf.)B!g-*kq/TS]@Fb:b5\#Y%_E%$W2aJgNGOq\K\9*=g.'dK&[qaP!5@<@n)"Rc;/RPJ*_QTeo3DEQKYCZb&P8a#Y1?P_'uNi;NdWR2j[X@2)402QVo*+1Od?DQ%j"l%gtOs\6_b@b3adR8AJ:NJB!XdQ$3lWt%3o:;=SO)d,`#R2D[D'(em'ujG(%en>EUFA;gcO^2m>$-a_'ca!5dUS'_5bBGH9l\<q+31%E]P0mODCE.HR.YTU$_ZOg[Fg3mV?5/pbQ@,IG!(#62W.+),d*PR@:CQ1p=d''O[>Ti.d4%+npepfc5\0n@4S1#ggsH_W5'6]EtF^%+"NWo:Sh.K#*3NH3,RCZ\b3uOM&cqJ:Kd:G:+:h)3@Bb.i+/==Ou.(!rR!WIr2Z=D87)j2,#7_$G\u+J*r'bj)_@p>nWX3?d*rj'%/RfK*pE$+Fj#4H!LI:g(IIs1JHa=4?VJW-&CW]S.Yar-U_0t=i=OVhb1qm8&_,(M8A@d>3f4sNLK5t@oGVEo2X%B`Yfrs9.?hi1\%34-ePcY)7_HuFB*4q,"u8<k=B3c]_]]FnZ(pibL4G?]*3F\;`NbMq4-eR[;[?!S%aS(rGNF9YM.`@HN$agau<9,ufhm(`RA@@N]/%Xaqaq;hn9_EY#8!=fk\7_2T'Y>]g-FbH34"Hg=<_0p0c-;#^*5dF*cBQ*0!!&]`-CJefR=3a[h]:]=O(UsS#dBQ\Ru/=XKJ^id<B%UWM+Eg/j7QV&_sL1'0h^^F$b":6ntRN?*#G'"s\cT6A&h*C_I&nlU2d5\BdF4#dE#PQ;8am`HOW:)'>daHLd_N__jFS&^m$)b,"?%-BaqgH8(t-&_-!-nYGacGU-E*i.+n;)b)B,OG.LbT52Jc1YQu6g)@Og%J6^<67\Ce[$<?kf%RUc4!qXi/GUS2%P(dQB.2%6_jS25%)P#d7DNqQ=X+af%`%$3T:;i.!-69(:WQtgU2UDfCcE]M*;<D&0T?OXOg[aTC2C1o@+i0)YihcAq<-UCr*OQs+on<&p_O'?KkWAf%%G1T0,f^C?b>LD,4qQ<jj+66(=eW]T80n8o^4"n^6:.D>'ca+ZNR64lERIDGKKpfj,d<d]P.YO_+d]=%A\NH^`1Ug$re`Zj3mJ<n`%84pAQrp`QMLdlf"9;p.I:B4`k&3]j5F*0,5]^a,,8=1>jc=YkrmJK%fP!3!(6LsVsru(YS>TTTZeD$k9%PtY%k5P5=Q"u\\pXVn"%G58UF@3E:Lo!@O.,_S;gd9l;7>TUg7nIq:td!L,\nAE]D1#M$+kN20V1TP$+VcW)dB>:90dJ&1M!0V!VpTO;tpuMAg::mEA5*Gk)%jDH1I@nadMX1N=rE^0P"Vp\.Bqodm=O.ud>8U*W#7JJZ<.f8YPZEsn/gt*(NO#ii_!.O3g._W0,N1"6dXc2%"r64omlWnu'.Jb6/%k]O_4h0OPorINBor>V?LGBEjcil3"r.!0ic'[)GAO8G>=Ct;6uEp&Yr%J$S-Yp7b2pOI)uT9OUl0\q,k*,>TNZKK:-86Fl,RB$qf%_:+gM<'DlR4B02.e-sF[oHep)Oss2`6\YF*90V2rGXGk7`ZEL#PB?9oMW?)^OM2c'5+V1q5WYX<k'cu_@G_R?KikD6(#>Qr).H1T%$h"?.C?"e<mJYKZqA_O.$d,Ba6`#@'Qc#(a$nVAl56\(aaFm;`.cIm6r&Rm:4<,/t\j%#"8<PI=!8]#o;Qt[@HsJ&V9d>2]+5ak'%;A/qoEq@-Q@PnFUMokU4qPV4gKqFIRM`#r6Xd8F;:UfeqF'"sR479Du?O=F#rbq&q/cXr'nB%Tj#A3+>]),b.?pj[9nr^NuKqF-]%ErRL-46hef?XgP^A,ud.4u8UrmR4sZ^&8s/\BD3d6PKUX#3HA'1tI'trV89r*@fpTIW:-<db.[cW&`buRe?Jc\SDDp;LBU=Ga."e%e1InpbOXHMWB>Af?h)H/;..>o;?Eg_iNjX65WaSV&3n:M)eGl//1jsJ#cp&*n(@b^$1rr6;uNf?IFMDq0nn!HkYq-J)GuMD1nWfZ%_tO3Z7*gnci[-%0Id]*ir_D>Z.\X2IW+d_8J>W_G0Xm<"eBeg^Wf\*>m3#7)qQA$t8"I720(U'40Zr=R2S@YXhQKs(iHEL?,e8KU%.(_THo=Q"D*p+^qn7PN!1MTc[Wa59HdfW'<M)4[:npFS]k#Z$MC3V!2WTSNiV"tsKH*i$O??LR'77_"bFQE!63LhL%]+6-^6L8b3%jF?=J&O.8m:UoQ]iunEM#cRg$Q13iY/p\b1([e0pm/si2H22RGll1;pJC*o<dX^&n2thigqo9Upi;c1(XdK_n?cS5S_1)gZjS&b#%kNU4_mC_4Ko4=<f)+FtSUM0f2^nP,,e<pA&n5&pjU!!3\hu8!:Csb?G@gV7u=f/m2plBnH[#r@I'kjn&T(rHK8[h@EZ_*qddod3+%m*7nSB,AH%me3tn<j(SpcVgH;Ne/UMpV70,H$T+/n\O$6RRulrC(1"WpgI-b4*`KF(2]\KVaBpZ4O.IUXTPH7?nRiCi:<7Lp`E;!%#2A7TV_/Kd=r^Ij3mKI>!.PA_MDt<GrTU0^mc_N#]eol%/*2K`.4]VK?f5h1<?`"5<s/U(L-Z79M?M+(RC%SH0IUlF`j/-B!A*0#%Wnng%\`S<M/=(Z]'+BB(36fD^2[0W]FXDR/5NP=X0`'$bm<k3:5i`InZS3dj*8Gt-qsPW'8n[YZFa:3=.2tq)YH5chg(m$dAn*qI%;tu4QMV&kSSH`DOmAkijKcnT*l/(ULQ+n+ocU+DsbL7Kk5:#Z//6nKYhrQbP'Lo/F9*c!)q$Ug0;2BUW^r%"ma7]Tg+>UR$<]]2O%N),5h&Ls/Wq=^-t"Y2IQiABkY*+B?AY2YgTZ^4ik!>aCp5eI:'^>)PToIN6i-Gb\(8aQB;Q%O0I^]9[H[ND[Ra)"94h2Kr<O8XmJ%p3;S.L8.9k*/$Mdr'&J^mHcMVf+]+XGm9/TGc^MX\*Njc!*_V=6>sErE9go9<Np9qgnNGaKG_*uTu!XT!(!:&?^G)Nr3b^)%Xg)L%,FEeBc'\!W*h]4dK,ukD_WajnARLu?NH=,`k'hR+j=]m>5hU^2.cW]]MUb7Uq0A,u#?;G9o#(+OMd].]-<%JiWWS:b1g-8Q(LX&r%!M@7#l?'e3bCtt>(OE;u(*e%>LQHPc_bpcqqt8-UDMjeNd[`It"E2PX"MJAhOB`A(a.ESAjmQ8p*g$<i6)=Mr"l5.rpq_4]N6PG;%UhV#t3**cbKD;\j>u8Oh<Sa'jG;Nj'R-M8u1!PW1b%jt1P7c^0Jd5ar]_IG4Ehb2:XRKZb-(F.hebSO3dT&F!1qFgWG^T&BiN=hO%mpQ2g/j9+X'J<1o9P1MB?SQ3Bkcd+[PiVKl]0']8f>C8r;Cor\pK]P(r_PugNgShR-Ob5b4N@#6j\lN[jclt=aT^"piObL^-\Ib0%/pGg$W#(oEhe8Va="E6m]O.k!_*BsdSCI]Yo#'9<(n5D2nKZsm,,I],d!d('*j.ler-.A5%u.jS&(5RB4"j%q[>7YGK:h<&ii\g0%G0kQ#Yu1hNgjY76)c(N]AHZ7L]a9!3DK!9(+jbO$Ho1)Qqm1`TkXAfCcr0Zk,D[7#/b!n./43bOm'SqEW`j=mXd0nne0N@Ph%sPY%l"\L$T%GY2ic4"Q.s+:l0Mt%654"32a9^n]!VW"FM>JQUULQDS4WLBjd\g/Epf+k_n\aQ"$c(VZ[BLm*EL2*SI(Xf4!:aFadP(Xg%=2ug6I9#lhf1d?5!%2fbE6S-XZt%F1I11`jp'V4@Q1=_;$`MSNoN"1sj*$hWU*<Uo0A@S!A!Qg$F?.$"V%[<E\YMH6%34:n(<6I`%qSY\!:qZB,Vka5!T=TN2EnA..0+_HF`2]a3QJi'b=/H'74IdD3^dS2R#f]IJDVUmS^cN?Mc%s\(]na)Va+<skb_Q!;5Kk1'Kt9M,%f7FqfP5+SVJ4AVnO*ZSjhtfHoJi3pid@48b'MS8bfd)g4oRhWHh&jr*.crN0j=b_'IO<q@WFdu]]AR`dV_?SP!W\1^fNp8Rq=C4b%0AlM0T7`4Xb_a28/SN]m?+X)"k\]n]C=hMfE%H(X3P%%(3g/>%"#RR4?[Nme_&Vd/"eIHfEjmLfXZDmUIB_N<p+T=$F?4Lt"!bq`%2i^%Yl,TgI;na[;(Cf)lV"A3l$OE5ODh*pB^Jo<R!+VaR]an&+'/U;K'\I%CSN[g=CG&CK(nRS2+BT69qgf\[1I!8Krr-=5.!G0E%)kWWqbd7YVguY=fc(4T</9dMc1eL:91p!2:.?kSF,rq,m5bD<@12ktVTpPY8<M$%tf>,_fO6gY6EW>uoRs\QI%B?.W9Bb[l*KL5q%MPl]1S/eF?RYjoI#$e"HATB^XE;U8nf<Y[)'FLtM"0p(`I>R(6f1kZ%Qp'POYlX%YQoF#V5Ge8>BhKu_o2gg7nasYH.K:N=Q*O?a%K:8lW!%RM(&BP:Cd+,ThlEf\)($=c>'WT(B;<T9(Xd+@-O.K<*-%Mblb[BSu)X,2%[rgMCK(4PHI?L`dK]l,h;T`AE%&i)(]JS+7%ijc)N,?8g`jl0qN#`O0M8H>#o)#KWU57+)2'#Q-aW*M$/gA>\5K\Kt4&30=;!H!5\j[YXb.;G`WOEA/H#-bp"5<*-N^rn#e+Acjn%KO.R]P<Gd%d_tC%:AF4_l4Mj3P'la_(O?`TC8.pm0PZ%?@)DM4/GG$YAb12j^t]&&Yf+H"T0<oa%DIP]$&gH%OHE2r`'iefH)?0V%')e`a#<98AKjNb9O:(GqZEOTPI:OPc%qJW0d0#2^W^#8bb9t(N]/V2R:8S9;&ljsS0F3'k`[DDB/Gu#%\P#u5<2=LC*<g5sJsmf;%ho0ihbk&A-5cSJW8gcJ#\0KCO$+#"ak4W$_13gCi-<tK2ha8rFmu=C`!'fs_h\kQ,Ii_44Z*`b<l]fB2;B;gOP)fZSAVlfW,ArN%%-=.CiJPpnOQ-PS`&k]Rr052K!^lU1.<N5go)PV%/MCq69p#eBtBu-2.`Xal%6Ssoj\UE+s1sEI@Jd^cqDXror6!!kT-R$cN!JV[+%Vk:sCg@ComY-aUK:Q(sHYqh:lEPn(F;fr=!K?8'kPI%e2^ARA]885;)l.3ijKZ.0[m&/aV9ZAZBQ0_4>)br)QQcsC8jpXtKO*W%S%(JNV6de[(e&-8:'O'RTGM&XJL+JLiAW.ZdO+_WNspP<+uPB1,dNC/5!N7q`i-l%JG5`<H9:h\)T!P>bE4(-"Ajblb!'+ZK=Zfdk@%*`7]QrRZTJ3'Xs0oagTs-(lPYJ<#$d@qjjGe&,)GnZ0N<X0Xfk%uQ2BHK;fahMl,;;VjJ:ID-$7Qqr0$8fV"#8:#3bi3Mb7QSp*s%\MVd]f<#sIod7m[D^!4lf/j9G0kqP&ZS+j`d_BVd(.?odU0.6n.Xo!CG*THaU:i6U?II^fRe@q#^j3^U:nWS'Le%m9ghjP(jRO$*%)cX/l=mUWWfgp3,L4a2-ZiZt[l>S<Ea[*D*^;#$,cXr'r>5A&l]+=(,qk_/Pia$4S$N')q$GKBLm7;&=/#B#M3tQLGY!YlFr7_69%rcnK5gtn:-)5\H'H\"r%oiRXd*qt@X4TQ8sJ=l*s'u`GZA,n>W6nTs;nf+Y<ST8Kg"T,Ha_.0/V+)tA^Vc')8X)<XXl8d>k4HSNd%.p+iYB0OeZbcG1N.7LRB3\Z$E%39MT/mr7SHP!oSDZc=2#\m\?P*3?&V=1N!8S@n8XTeH=%YV?m9"s'I2"MOPm=k?2[ePTXPWn<;%?9s,7FMJCihbW@Edsfm+\ND@[$"/67,'#V[=]nkVJVChO$!_)MY4n($<M8\K'^sb:dLH6JF&K%s5Cs>X0??g%/jEB?T@4>_fd*3#%HOnqqKI10Z"3V3"CpWu.D;IP`pB`!D^cXIK.i-(Kb`_GK=G__f;n@8AT0m0<V!kIt0jq>3@G5cfAM6HiK=$#3/&Ea1(FFdL6-Pg9%!DU<m(Z'V8][k`s6-Za&@),f:.J*HgLtRu)F4f`s2h0'mVYT:hSBbZ6e#l9n>-jn]TuYK1<MI,X/cG"e"4?#aZeT+:p]+B`q`o^[%Es"VN(@s[qp)/U")TmE%!mc=05KBlkZqEoK9+X6@iCBU0mP2<Fq)&FXc:&hZ^fiUBH!3e%hU=L^I/cA-"`pob/4`Ki^aM*mZe(ik%1U'&,Ohc#QS3VeC^%X!?Z#n!/otsh,&7,WZdGK'C1CsHH'0:dF3=a&ba:h8hY[HN&dLX_Lb9c4%mL']sPSV-f_<W6K<YI[^5b+Aj%T.Y8\FAF\j3\u(H*22<ooVM(Sk(,2VaP"aLGC\q+7*]<*YJ2OMK^6`_EWUj7[pU%LEub9%s',P8rsF&(<8n(oj?>nqo2#obhY[ng%b38s9"G-IMH_TrcfC-<fckCfRIPg06ie"*k;umb29lMoK'.%;toFj]\G3`q)B%B0p)"(\G%hOK7&`fAgm:i8D1#8613_=a36H/hF%N/<86K;%<!497[cPD/=M6G7??IR4j2'#j"'#9cNY:cl0IDS`m!M0]mr\XW6#gGceR]#/M"be;fjo1-e@R.G_QG5N%>=AnR-i&WlV%cbP'r&dHJ;jl]3ecR,q?r#IqqN#11KTj;5E+&Z7-:WhKkC`X;ccgrJjH/O$Ud%ii,Z_FVs8Pii&@T!cn9].T4f21RLYPRMgk1%$G%JQq]#o]g6>bOO9,*>r4n&]sIfZTmN2`-dV`O2Ns3Th_u]Nmr-2TJ*"&5s:YrbCL2E;bqG"34q^O'cK=&7EEt0NcHG6?W9ATB+I>h%e9sum$A3#.QE$d9mE2X%/>d/e/X?&9`R+>es*53kFa5a%;DAT/kX881^l;E,[;/]09ZKq#gdurM]:c`n4-UEZ[iYhm@hU71q6fks%ApBsffgY,#lLntE!0h&qn\rsi)gnat'rG_RO(OID><k/\@`_h=h/OPWE+eAp\KB-&_/8NUM8A;Id(\=e5g0RLl8gY]XcS"SDnkm*%$`)lBQkeGa,&n&DKliW/@',OAOuX%30Lo=!pWe/APGs9NmGoIK\G2"(qV-caY@^<COXV%sOJWNuZU_^!3R[!;/"GKUq.nHnmYfQ,%kH]Sd@u@X>0KHI-lDpO'cS_N6p2peXP@$EA3^algB(5de_NUGc^l?HmOhG]/_\34<Q-X*).H";a;]R'hCliF6oLRm#\,5lY"k*<=%lE:"!1I_-]BjPID!>[iP9WWI(1IkVf#NT#O1c%XJQ$H.hI\2>=OLdP1hoQOIdFZll^rK)JF/6pU-Uu<7(T'at`NRMEbp\$tOLdPI%Wq?!3=s-N]GR!4"Z5(e';[n65Riqr`frm0$:\&.i9GorW#T"5O:D(@XBSmVJj&_2Hni@>)8=p:6=XM!PUd:qhL;)67$*i"(eC`6V%QfjY<de#h;ckYH_OLdOcXh^G3hf9"i'%57dI-F/8\1pEuHfRh%,&Kl[#mMPqH'\@(&n,ZB!rM+N)`?m>jZ26X7=+DAJ!hG`4rL*.%rOu>1Y6iW,F5N?#b`SJC4Ek86E,:PV>2Mh@iOHYXfDCWornIkF-1arL#j+\(:F[ITf5GR3U]:chqfXtZ[:JdQ;lV?O+FVKiDmNlj%*9kGgFEEqo-IB9;gt.V9aOh-)m(!S9/W`0P0pVa:DEnQ5?jCZ`flre>+r,Vbs(aH[`CK&X6/#':$q:nT5&1<6d^\ba?dncAN;3nE%6)4Y2L(/P7@"3X=D#L+8O<2S<_qW+VX<=&M6\_2D_*B*X8GOY,'Hr04'NZ-;B6P_@Lbu^0PtiR"VrbGiC$;M(T>jE[Ca3D.K]-Y9%iY0:seR@Gk?Z,*+n"D;Ag1,r'1%nT/U^>H+]%_aWQMS_p$I\ip'HonI'F+#%UsCA/i2"po>#/,bcMKfI>@)`hAk2Sr=21I$5<TCt%lbN0#?AkjL#2W20UKmb[15;jo/Gmgo4:EIZ#$L!Znb<$XEqf.TbggG,eadH5*k_;*>h(e<Y(*q;I?o(uEURtho'0@k>`;lnFa;9d%Qb=Wel^.L>G0T#][cX\,mUl6/chEnbgj9k&+8lb2p"95UnTqfr4'(cU^3VGc8<dh/otf+;\IDVSN]k#^q.%U[5<\J'6d)Mpo;cTM%nuBkh\<$75QIeV/n`8Nk.\Q;--tR\3*`&@i>'%p:)7OP1XR>en]r/&"bGuBG]Id9-bZg,EpK=Q/3HtBTOLM`gW\Ke!+R*t(Iq6%r%YV`Or7HJhU=tj3"ITD)ke^a-H@?H5\Aljo:V+[(`k^#"3UWcm"N3=3-QC4oEV+db7Sfp6S'0fAQ;mZ8s&5FItPk)p:rr-WK3V)o?%'`KSn_no+c^-'2Fk+Oj/`Z@Ucf=Kpthj!lq^>l8M1)dA<HA"7<8GLO?'%n"UPJQ==ZDZ?#G3f;Eai=RRmJqXJJr9">ej"$WJ8a2G%^r]>>kH&BnTgJ\C=uYluB[[1kGLPN/3R[!;ZR&L'"T>Qj8Du,!GB%EGfCT(`0KW<+]/7ssm3.0?HbnV)`r3'lH_@('*ILL=.aj!$%_'d!Q,IOH"TakepaV$%Y?l,HUEN63gUhK1(JJ?<T_;+#*!pS1'L(m,oLH5XcP1E1_gqaUPS2ktd+be<g_&]pqn@j/0ZUB]1&PJoR%*bj%D#,%6%KE1X9&O`;ig`>XTDpe!$0cF9)6Wb&X^[IH.bEWW;hhp8>hLYu\IcWmq%SJV5:]C^kk!khsT*+g@/nDr3G]-4ZMhgV&%@I</elL-WrWBSEjSP0->W=$t4!1`+bLHc-d:3+l$!B@5_"l`;@>SBMT;Xl.giU_nX!!U`(1`)ehFR==1S#G"+P3i9fO,n]^Jk(7"%U#U!<NXdl]+I4M5?'6W="Q*L9Y?i&s07o!=<6VPUA#]c8?9JC)c85-Xa+I]k69a%c"?AB]S_=YJZ1%eE4V,S]7HRRmf,.DTLun09%"lD"D\][>r*PNr?j#OYAs*S\hrBi6,r*7F%8h@g5I=hYsjEI9j050$')#2r:0u!esg<+>CYFdE\B%[/oKD^e?^9['G(RS>qOkj[d%Yh@W8KTEG;NB%M9UM"qf],YlUc9LLW)gV^T8+1g,Re%]p]N=a"9s!f0?sfQ`.^,a*Xh$"(3X0o8lS7SYHUVMLOW%6?_Ncg(;0[k[%Y04J)MRY7o[^fBfGtSgOXLpaaDr%fhn\0jCoEjlJ/Qc:qGTkm%(5)r:-bY\GU0^jr9Boga=RIP@G6gqI+*AVo2+-*8Hj766]LTe)%9]7GT3qUth2:1H80oYcRrB1H-'?sB3)'sqe1g+4q!N*?;TY]oD>]SA\\@(.$>$Llb$St?UNY,D8Yi.Z%$t!=-e.Tfb=ocn4Y;B:;%'>=HdU*R2,PF&ZZoZuG!Bjd:Z.S1=[TJ,o:)-of0m?s6VQ5F=b(L)d6Cd\n>G(e[$N+)(J0W2'dOI]Ma9.l9XQr.W/U7%@YD*VJY%>tQ^f+01JN[9Z0rh(!/kk:]l[3hL'fYEd71@>_F06.4j(U;l;79U&OJ7u>M`IeoF]!+u&8J]/Pu)gaF;ThMX7$(<ZNH8T`9$ndSs%@(51h2+n$?bq,kf"3OZ8I%'Jb@nL"8)if?f462dcUTFi=WnZNpOjV+4iYYMOq2)Ku=slA6R8!jmfrK*B@6-Zoq8[E_dts'L<R-O"%40hKXnb7!VN\*tinS535GD^4sbeZ-Zjg!die%U$Smc\n:1./sbX\[MW$M2';[b<0<6D.,_,K9Hmc^KrnWQVV*:\:og.3YkEUoZ7s%_osfF2F*t7n#HXkf.Up`amkOkQK#X++NE;Nm3n7F#+nXfUu\\[J\WJ/!?shqUk['&l96a-jE+DS@6p&;(ScgJfT?8\Rk)t%(%ZhY%%cGif")p83\o0`mXXArD?VX\C$3mUih#n"0n8epQ"<Y#MTs`J]PtIFMQ+'oHJS/q!ZZ:*ncFstH0T2AGSZZhh2U!p2E9jcLM-5-<%:E8L$0tiFqN<ZQZ*dO,1np3Q:pRUFZ2!:gl%>F&oVdtdN7`U^M;-f+;D)3H<;mN'34pPA7)*;Kt=ttMT^/]KSaOV.[D8'gFe[J1i%!'U+:gNU_M.]k""l!iuOo0,^c7Wl3tr3S=k<p0;f3KW?]NQRg!"*%8B!+m.J3O1i9/hOG<>+mj(m3J*5(.oP5V-se02rJ!@g1-dF%h$:R[5aWtVAULO9!Y9oUY0Ui*C`!DoNOfmE)*@#s.kU;D0_d6ob-a:J3GfU&^@aPjFU[JoIaHif!>Oub.8.+rn^pIRHoO[FS&Vc+%SmKV]_bb!g*G;W.>cdLih&ACL#/:@#Zo`]VbCH&F6pK_d+Qr]J]@LYNYum!0!8-$$<_K%nJSf1MctKdT$<s-=VlN@')\.-ddaq8?%2m=817;m\PXMR#;<j,J9:s@OS&0/lUDln!iJH@WIh$W+e_";>\=ABG$lf65Fg>]-)M(`"ldsPC<D-aOPjmoK/mt/@7d5BPN5jti9%nfn;YZ'#GYD*/`n3uXc9U`h:qJWg7"#9F>YV=_Ad/e1"tSHFr81]n8=D;ikNisQ!u]go],(d-Ma[L]1BQ:J:00`Yhk*XtGe*fV)W%2MSR:g+.cMpLsE"(Z)?ocgc;)e8fY6CEPCE,T4:;BV'3B2L:KKLg\54OrK1kmUQ>6/qP%5cr)^73\i2f428/rN+Pi9U:sM+G40Sm%e_</g<+WE/mYAi0qmj)Wj34$EeDRd4%@r)GqV-bu(^f%"@=VgMm;W,=h$NapFqhhs\b4$),WC;V7_%%K0t[3%oIj_p$c-`nD>2tS%UL@s<`c?]^iu-b7_q*Kl:&4kB:?$U(P\r&%34>-I^&D3TpM5^s:i9L8Zk*p.(2c-i+ZQOcf.0?G"D=;#h@'aok(mh:)JT>[cR5n\%)LbL5`<6SDc"&A)^#`Fm@G^Hl+-s2A")5&Ps$($5OjL2:ke2G*r4'(<2#q2sgLd&7M02$DMKEufX_g&[aM_.T/tjWTrD?(.DR4Xm%#5l,p=_\*3aj0VBWTk4@W"G86i>er<^f6=`Q3O4,e='pk@EEW;<B8>hG"jpZ3Sh6CV^lYK*AoW+4&p"@G.63A!n6PNEjBk`PD^Ja%ip`md[XEl5E%L#tT57UKY`Rq$Fh2",:#*V<T56IDl82t<,i`V@,0G4CaRNS:D*0mOSWE00gd7UWncbZ1o&1)9^K92&0(BE%k:23)%3r97F4MGW=6YBalLRtKNK,QfJ$9I+cG#C\??U<lGm&#N_^4OX,/\#d0SUCY^X;9S[%@qnNh,:Z=L,F)H'm/ru*P88D,;M-[N,s8f%;aVA,Xe8U)Hs>4Ld2mYFJr\-<Cf<\k]W-5\SN_YUD+M+7"M4/\X!YN%<#9XZm=Ba!<c*#"8l@`JZ^lrjd*PX8TX\IS.Gb<q+HnGq%j56,LZHi*V#l;qt@m9-U9IBY$*:rDCW)Hf^I:gN:5IJLD=,-Goh63YNQLbmu9V8]G]RQf$F%ZChTnf\+h=R,9eKe9u4s%\5149m/%X"mb"Hs3R]c>&u7,DE6Zh$TnC+>OInT>G[Hpt"\1&<uG8;;/Nh3MY-n;Hm!;(--=F\sqg3WL]+c#Fe#L'YBdoMq?8H_IC!^[t60_%]iJGC-hC9k"c%tD.u818`/9Dm1,)5k=Y@mSQ@92W4'`1;g@='#HLB!)\&;:in'38n;#9R4UFh`,,#aC\^2qbl6cCFV3O]7;Z<>@W%:7PaQfd.+5fr6,h!q*d,Y8kQ.`N!YhFt%QA:921'+'T>#3NhCHXP*ck7NGUc^Ad4ZQaBX]10N]VjK+8Ieh&KO5-WlG?SX.Z[$KU,%4n*7R,3W)#)9hd7B;jk6b5)P/2Td-]a8N,jXX]G6:g>'^^p_Vb-'#+-R9?;KR]"sBa&Y>1@0O[[eMI-`;aeCNWOAgML4kO=O*uPl%Pk2:;G3`nR("H*\5n*+P,]XIrN5)^7.`'l;X``7(RHtel7DESt-[Y"D!<B?E%pIP1'aWhP!p^00EqG$#7N@Z8Xd7<=Z[.!B6&iEX%^_/T(8Hu5@-*0^[3f2Ui7aC*u*oO+D(XSk@G-7<>)04d63&3^&g</k#k3G\sXYoq;FM7=l3otAXR>#(\C0_E/5M/gqG.P*#CKtn*%ek>I6QeCVI&Eub1'm>W4oY";&_)cYF<#`:rdpPNU[>L_MIkA@089/Cf:+GUngR*l\@EcpSSFT7DObk]'A4C_%ZTC(haOKT51<t'B%JOoQTRu@cH)c%I9UY_PPAEpeZ5m0IJf1J/mY)1bSOc^O32:EcigT1h.Bh$+>INMU`-+D.?eBoE(A4QBO;KJ[&c`T5teRW=IpYb9[%N':?]=Os0\(9LWggBGcWia(bU)eD8UB%km3;?m[eVPU&0DVSr(#BVQd?`Ru-NX/paeQSI9XNJRc_t^NG?(LTML0:[;_90%ED6n!r%0!)(*o@3/N%mn8q.35hA>O&b/SHN54]ufc'DKc?XOipu%^i.s;FEmdoXGGVR4e.u(GJ9tmK6fLM*SY9kgpV>@cKa@hf3.I7*Y-aI%/Q]l-fIP.IG\^=fDHIFYZnd5amC42IgP`<\DV+Q#C)1^Y;@Nm(E%]Us\6[_(OfYsq`cn2(36P=Zja+26/*l0`B$`u1H83He+osBQ%HQl`G+#46TfpqDc>\3f=6"8S6[Cj.<@\[[["=Li*2:MtOH$McpVS1\T-("!o#.#nLGU:bS$t4.HF[Bne3Itpu8lbu4?GWHYcbA9O%JoJ0oipe(^A@/HV5#(F""P5\H#_9%j2;)a;%05/:$mE*DgIL;c*BaiK_:aD8!%?7^TA<@fYe.`nZYmqZNs'X1o3:BdQ6$@FnnD#\%],Lf[/Vg1'(L'&!G#X+3mMd%ROWUoU[.$O"WNH+0#=YEu.oKUKmB'7j8kIhk.T0W'G>jV2iG;k`$L>ZS;3;4Em%P[=_K#8dk`mSK%A01-+or=sC*D6SmN%Cli@>u*X6JJE,4#Op@V/U%Af^;Dkb]6=f084K:*;CP=_QD$dl8c:].GXL,niotY[l!OQ7nVb0Y+$0"@;(Qs%3#!2Zc\&V7%A2tg6Usq*VaogE#7>BN=-m#(O#c#r"bBf@WD!!P_:8j&#],,@gKAO?n;uU'(DfmS)ngc3rA6+<Vt0t&DE$W.%1X_3%'TGNFTCon[G#n0]9?hqEWGu?&I#8@%l0"Dje_trB6TF9^.UqhMoI`$tXt$:#gfG8\`QXP8/3YqFkDEO(C?]?DbXX`;L+2`!#!@Xu%G"RK6cVRECP&\q%@bI:,<cGejWm5S7RZr>.kHARldMKM9FY;#)j>2KHoc<Z=g_6`gZU^Jl]@jpNNEIGoLMC$99cq/<[9M2sG+UZ`%X-"BUe6%Wo&'\(L`oH'/]f^b9WTP0<9#10!G/\?8e.QJoE&=l'YY-&Xr2(:6<lJr0G/\>Dq[0r,ZY@h=oRZa1qX.N1Q0`5lY9,Wt%b8#2cMjLFiK+H"ZUCSlNf1Rk&k).M9Ve2lrT!rO8Dg19@?1RXs[A.bj<\4DT(nrd-Su#-_;.@&p@V?`Vm@U6;@*>Z9Jdm^+<f!ok%'>lV+2Qifpn.9f15&XnYNn(?3jOp+MqP:chRo:>ne1I:;BA@R9rCM$Afd.o1NDG^Y.QWo/jW8/lI'S*V\CnU1N=V.UcGD$'9]hTM%%Zthf5NRI;f$Ankgcl%Dl#Q8E,Jh2V,PEC^=To&na#W:GA3>UfGd=.0G1Wi,TQBM5Ra*f%Za4C-ZWar*B5t([9kW$7X/B]K?;3r]%R.u:Kl]iDge!Y>l7HNP6eTAuD&n9U.Xc:kQAs3bujKG+SdlH4f]j3LdrJ8+eC-&\)3fC*4(=dM=[<+%ma1:K'[8o0@lFf?mW2;Ao%[H"q-]<%kcgZ*0rY/1[Kl-*B_50IQ)eT>E2F9^LW5rG39C79IO_N(Y\biEE&l.rM2:+ni"=a@m67b)TmT[m9)F]M4L#0O$]Ek?'I%,:LGN`>qt-m=8[VWp/k0[_$98ZXjj)oC&QFc3s]$7d=lkl-*o,N6gkE^7('=VJGEIlROosVDA<^k$b^!VDG9L1I(JNRqb!j=um>O%hm/]rXHq0*.5W!93+o=hZ\nQ;YGPMN8XaQqOfG#RR]O$uS/MS5ZQ46"$gEt<WO-b,cs'Zi55hW>G+/B\Vn!i#6l-f6=(e(Zg"CXn%(:@7;X.k-CODbq_''@p%l:O:L63UD]6]4K=\_kiW;0=B\dS?-5FU5*J5++h>G#(-)iR=gUB+6+hGSiiuMYsB?bLAa^Ur_,"9;he8%%Wg)6qi@7Xk"LfGgL)ti#05M%egA`Kh6"(,dA1Qlm;j(=Nk'3k.AV$l6,J)#Z@det[Q`i6ns6=+%(A4YN``.F6$I*-bgu-J4*+,>%[f+>D0mDqJ(N.sZ_/lal`B/6%k70AVOP@KMe3VGED)g/J]W.8&FR;&ljUT:E"5!*[](]$b\U@>;bDGK#6Fs9K@.@@PYhd7VQnanr%%P?!t[7L6^m]9bk6pKYW=A`&p4Ra6SM;Ua"f,s5#p01j_G#Hs]m0;Hg2\Z8SjAC'FG!c:<:3L`_d'5@sI64BTZm]C]Z3h*#33T=3%TGX`%DRVgaPsD&1Di8ZLf/RGa`QkX@XUAoeHf8A8@C`W9G.bGb!^^;,M=;(Y-I-GH8J@DkCcZ+'rk)=E4k.=0)*P(>>GI8\<t(Mc%TpB;CSJ67(ZX',0#_8IK4-)6p0E`2p*'A1_Q0mIGIo&!`G"j&PCj<r2KX4,kKB3s^n//ZPT+Z[JJ0<^bme#%KXH1q1p8TUC4KCEf%hV$2h2d##JKM9VZI[bX-h9<asN4Y&V]9Z4%>M;I(fF6AW<:PieX38+8i=;LQ]WE'S3oOtIPO^W8-dnQM[f\EC5N-LdPOd9fiQflh%-th>;"cNMZ?NJ%lIp&C`[r#R@"3PM"mDiO_*J?E_T0!C2D%YpooDJ)o]'Tl@fmRAt`J0Y=kNgZpS"KW^iU"?u![oe@T&*3#312t@%*5Jh^KlpS;6uko`\@eB^[teo7;r/VIN)7KVpTG-]6Sj*HgLY&I*hR!]PK$5AX*;U>K=P#GYlf)g7IJ[A[%63DUO8)c,,W$1R8l:.%KZeR%G5R$#(%]R<LX2[#/Rj<-Cg3s!BdH@5q(J7<=MMl+jDg$T<6@<WUn6<$XN%XfFhH&G_2-m<mH1oKe4F>=];fk!Z@"KoiB.Jq%26K_j*V[($A%Obh&J]W'1u^HsEF%:Q@8ljcLoC!-HSjERUu['!+O2b)pdjTR/)G$]9jti'q,mS]30<F768<T:4J$qTdbn's$J4u7%^5?2upNj+ui1UCPG,a9%o'&D@4&rqeOm;5jAdA'+=7e+B;E<k0i,dQAjd.?Q1;(Dth(a,!ee0DV1;S$[IS>5$>NR:%Al\a&C013i%9pd(-d`:OT*B`5IobF+:G1qt*=e3GGYUN;Y9#YqZ=2R=J^5Q,T7keAMEX_`$012dMmS$EH"7pr;Y:](o5=TH'Xt5[3%m7rAiR=eJ%mR(?HAuP[/*i?'%<j*%*/WaR[]$a1S.3'iQZo<09IuSejUm9)nW0c`l]Gag8&a@Jsi,QuTV:$tnAfS0f5(e,UQfkhm)9Pb;'lB<@%I==d,K2-Qo`an9a)c&<;4!ZT23BVrp0JsTlY6G;fZ$Dg;b`8T%.42)(M08dC)I'6n8OE,KhQ!qS/SpkYc9TrCR:Rh@CW@eSO(:<3%'@trBAM(LJrEWF"l%eo5WmXq<GHf"54X_f3-TKq[jeV0:^IrA(mQm?A3T$ZeB&Y^:g$dF68eP<#>&0ar*D';D[&=>DV3<57m],i(%'%FOoMUNR:W\[QRlr+,sL+DQ3W997Y=cN%f1#31(HPjfR8=QHB%BDV[Q)u,1D>(cT%J""oop;c)p5QggG*#j]21Xrp_<NjH7uUS*%CXM8qX7@sfc\bru+[9^2;<`hW&o1.qaa"-N%d1nbd4uT@Ii>PD<GtuYB5P[)M#b`tQ@N*r&&WUSZD2Fi-lu%\/o;^JA7`r?ADNI/%*poP>[U(,FD;9ll9Q;K<DKWj<_+`1Z>O+9Seg+stA!;?$X.sYT8I(P,d5b<A&f_m/;p%[#8lbaeDq:*/o(r>d_!KB)-D7:LfacZ7%;fl'eV.JQc0Z0ip9d^t2nuMl9IcYT5NibE>B.].7-!r6S/X6]J7YbS5J@L>XdjdW*UhjfHNR&bNY6rWjKc,uq(0,m2a)##`\:-Ve%P8!TtZ/qESJ7^X*eGrdD@cja!d&D[,[A%G;!BR=`[&C:8AB/:0l;=.&K.9.0%N-$a=3cqFWrO^r'24D>.k2V;%j&m&F<]IhjA<S@%=h%`Wb,8e/XIR:j%cpVaAGZlZb%J,F\D'CHbiY2&5EsLaZdcEEPYZd4epls]55P3"D%>[VPE[te7/LMKSlMW'VW[gCkh/c_cLl6^%agKs8ITg6f;uJV&2O*`:^Q!EkY'mIF3KJCSCaf-b5PkrD4WA.,F8`1URc(/o];Vo<>moVs.puK>>X/*;Ms:V'>Ft.n+0[7WLpfM!%n&4p!5OGQ8mEYC2hp4\lE`%_!p:5Wa?.2..NUrHjF8bIue+s3/p!36:lk#V1Dn/584kFW<qFX9@qUrp%>#!udb)]*`dF,"CW%U4l%f8nFiR@icRG#d6cBjoJs"u\Hmc^HIGg24M2=uk2Q3urBgY+N&lppN?;ci-nY2:(<(@"DodFDFHPSEjfWOtkFtrOIBs.U;qOI\rBk%)k?5,?_692dCF`"Vu#Z>ZMD%[VAlZaEiP`QbNA!afq7Q=EE1^r$c<7n%aOaR?g'ftAd@Mqfq7Q=hKaM"kPD<)*oEjXqWX[jCM,Og%O)M]]%#\k\[EnNP5Lg;,PBU.'?u`4(WqhS%F8bH<d*A]?[b79]W#47`>X($UN).mVr`m34U[e$&os6m5Db'!\3BU;bgN3<54hY9L%YJtlYnJOkQ<\eO`6ll,/5LjdJ:\D%t)6kj'=?b>T,<rX1\UN+0\F<J4'p\I;MrAMKolKuZVH)gU3N[YamT_spb&TCUZh*tCh(*&Z%*oH,+[%a7U[;=B"QHS7=3nM]l(k0H1diG(HB:mf(BAb^5f?aFq5JnnXn[X)qXJAVaZ[0pI]'&qCX,>*b`-oV8IOk#UHB.Bmk"0cs%hs,K`ZZH*31h-.G6)WoBfa!9(WouA(qUl+.BT6p8kPA&W1ca*IRTXHLY+PZMN@L8Hch4X%&$/g`DL&B,c*?A/rCkh+2E9<,<HYF_%n?D&cI]KM/GB'dX3]P&O#)DC'I7cP`n!lMYoVD>soL).?S!qteWu/.uG],!7eEIY/LmGq>3M(P=kIfiJ9gRmm0d/U*(rO9EV6nCk%$f+MKCaR?qfs_n/.s6("jl2AY4Us4m)Mdubm_eX[djX5u]47CuBegi]f>Ws4>OM>?k`:Z(55pm]C0qe4_=)tO]3edu"ShUlnt`Q]%2=LA&mnN(knFVl87?a;/\bI"Y6tLT-XIB(JD[(F)Y01m5SppHP8f+JaHb\&lI,G&tiFfoNdhq/$Ku]$LoT+Jd1;=m@1eqDf+"iGb%_h>dnp@MZd:BQODK9tZ[<QZQ&U<:cF]B8Lo3uWDu\`7&3pRspj=+Vg]nI;'%H_!2r9m^ehq(q3#BA&'hfti$H4\N1iY1-@bB';2i%H&*fmEr2[!m3a7,?756H\_MbH#LR]^+Y&MDcTZASkB[Jb;icH^k=I9i=\k,0S^kuPKpVnP486m<im;Pn;^FA_.N87;T6,3ps4f^s%*6U(a)c(o7%Ye85(KQ^M8TC\U&Y:=&i-r**0rdfeF(2K?@1K+dq!Dgj&(mdPFJ0Q`khK1+.[niWX]3o&>;O3S=;kmLGp,;.dN^e:%Zi!k;Gt_S0]DJGW]MNft9!MOn8B`(_XsssY`&hA]pnTs`Isg?mBm1N3\c3s`nQC*c2DiLj$Hf:@da=Ie7_ReNPHu.YG^/uh<ULrE%n.Y$ReM%>'G/GTOJ!,,@dG0S8c2DT?_T*XCi`I\q,G/(&arLSUA,s>C-A\[NJ\sL=K!34'oG*<o0/E<+Nfr-b&Aa6hpj!X*XYCtB%lrf/Dg?C%*p3hE%65ot%6>kXX08/NsB;(?3+[TO\cU`RrjALrN1bF3V(KfrhQ2cQg"W'K$[l])/1qj7E(VZ&<F91XY722;3aOUho%$lfrkfigd;^^D^_7?[aV/)J(Ff/2jf<sWj?3fKPM%PrCLHN?VBeVe'%O^f.bM4l<(HUhnMGRE,IXaoeDh]]5.W3pREq&P(;`FrX?%N!COu)#ZBB`l%tudLjE<"IH`=pgNeFaB`q7B0tY.I7s%q;O7R0qMD7C5N1\`JXT]FKP1S9pft=?Lt?:[.RZHX^H.UZDpR)imWNU&%Y<7$4(t^?>e)0rTik8=Z[pgm%H[8I1j[+!%-E4-U`JgfJ%hZaq\8Y`.A)K_5W;QgKh0suhZTYNb\=7e0UVR(^9&NLV*Htn!dLUJ,%S_:&E\VAf#h_$;Uaod-"k6"*I$JPJA?/mG/[(1#H``$r,=9F1\(-Q(`5e:qm;(V3V&Aedk5JGI2fO-o^lgJ2+d1`EJF,'3TB9gd#%2i!>4m:8]N6LZiM5ZPC3jg>6+k!MDoInlXWLK/'$JiiCoKPF?uPe`h7;)F8EX7&n"?)23iMj-bl;,tn7V)Nq$qVgS]?T-,e5?7"Y%@Oh_N4]@'mP7mFIkR?n>RpYZ;(f``U>Pr?h*q7)GYmA#C,Ld)7"uNl$eL'`e3&h\P*X>::/j`+?FHH6VcUTl$4HrYGmVP"f.Y/6N%+fN(`T+BOdZ$o=+?p5gOG"RNYAHo"G@OFn;"nBNtn0Wa[)sismCqntBX6bf_&)<u0VGf9c;aDO1AD:`U>_7<I3(eEG(T1HeF+&__%@tT/1_!YR%8RoZQLKsae']agZNg[C2$Ao/Y`V"q1*gfQPr3UuIS;KQa'mD57d+0h+B\,WZI!_o1O-JAMf)d9_3X35KJ4B'R((H*s%C3L"\Nh:2(gXdg]Maq+#^Y5atfN[to4P`OkrgC8[db(T^b=9N[i3W_8*mj;7K:Y!d:4&GfJj'bLnX#BjGr$nhqH#=XAe>O^hcj]6%!a:jARMW7.dpnfF?bS:'gmFM0P)1@`gHRY]JPU&4HNIS-p0NQ)(7J<<$,C(HUEu[1'Ai^m/cP9\Ll+7BnNa[Dc2r`Y6a%Kp/t>^B%CO6uL-g,s`,#D]n[f,'?`QmB=`Rso1;blgg?[$'W5;-OFn0t"!"tm5u-Nf*.I8?-`\4L&@@/0UJ"7D,@<"%*,V_]'<)>6g+)bgeZ%c!qG;mMbf9o^],J\BmrO5ZGZ*ifsRPM-#9>9aC@nH<R9JTBs8LlVM^[N`GhLqT6\PeOuPD5@ZpP!=3jlJQ@TNA4k+/JQ+iq%CYk+%W5>*2"U@pO1/0KR7GV]`!4.O7q';DgohWj_EM7ILDS@2^0@bEB^R*"2ch$CXR8g;!)?f't!hSiaVHj],.!f@WE=',m5-nFm8"d+h%@d7eb"@_'aC8oQ0:Et7=lb><m85g&*mHI7M:f0>r,20ik@gU6<S[\>bb<&^!g0i_'[pMbS'ulWt>o2d)j4XgfO-,n6UIMA'5cSE1%/bOri$;<^&Si]AuKTkmh>W3dk[?OdK'Ei>+h>pNeT-'`>$$'i6H<=M"l(8C%H(_R3^^B(F;)Xs5QHUo#oLTbDEge1Vb='W@\5Z2*%@l_Z@&GZnOI&rM:Sj+GDD[:1:O[!ZR+b'd\.`lfqIh9\TYJCg]n9G39@0hfVLD>UDn,tR#1r'rpaD+JtdW4POd<K'KVu]hrh#bU7%I*a753-C*d!]8qg?un8=Jjn#QYnHGh$q2ZR+?[=HZf/*kU17!#[i@)&3n>YsBaDfSU$<=@o_\li#%Vh\Y5?fo[3'Gu[6/uUeb@*o%7N.e^[R.!\WQEFo"4FfN4Mh?ii$IFiha!3Q0s3(3[IdT1KH_3VjB.!uFeV</huhD_(r?!anGbLrkZJ%1&(s^(<89>pQSh9!3-]`0%'H`EY)U,BTHt.#o>QbltTY+R)8IY)#aeH\8q\]+#SB*P>=W593g?udW@lKpce.Q#_P)5b(Nf/W?`Qlprgq^>LP=nm*SqU\/YqlWW%NJ$0OV[@8ciZM.Gc!LN*^)EC1r)D9IfW-&-kPKQ&UEbME7@,b9D_NB0c*aEaiq-'e?!L@FGkQE\oX$S.3pUK>$@#gUJ<B.X)`tg*%V]j*PDMhgYbeMdd38o#W"?>Ipg"k%KT'\puAVWX@&&r+AG:p_p%^+be#%`72!^j'AC/la6fprYpf:>IJU$UQ4Od:/$1;1$^EVuRN%XN041Y;,6VJV,U4)QSjpc.5KN&@[Z,U-Z#aj0:'JmF>>giVf.[]KrgBei`1X=t-kMZdkI)N3S)rX:DR"H1kn\d0='Qj8!0ri=p;T%^+WJPfMPZj$Xb8_;Z?eTmh>s`'q",WY9R4hr8[UNbk1hh3qO"]@.qDdYhii(oh7IhaM96I.D^Er+5)S'JRD?Nj?U)IB;RjW4U*Vh%J$u6!!l73Md6nq5#`_@.@&IQiTmeQ4hrapN]jP-SU<T%L78#;MV2R6mY5rK7O^@,U*T'o/9\2'9AGNaqV0N<4HK7EQ6!K_6Q^dB<%VFp']KAZ=\S,i?Vk[PI:>1C:_N@)rV$bR>>I?)o.[6VL;O.Th!aiteXjk]/BfEmo=P##.9JCK6uJg4FY9:W_0+Drn>Ac!q7$-Gct%oapWqKXN*h"4n7c+KYEK@-0>>r7:]R._cGd6SL0]64$VX#A,-k\r>WZJ:!7s?)g)^1K\r/[b/`<8-Ba'&X;0YIWQsZ];*D0(61jC%B][P$+cl.mQL."/_n-:IkWZZKUjnQ,?^&[.HP3C;[5+/"H6LIBWGd:`nE-!Qm3erRd4VHVC&]'A&<8?t&?-VT1-'^O69_s%1L"o*%)E%.rE]ZH./1;em(3g2S:CrR99M!/[-9uk]eDiO8dk<EhK\<K=I/-C@@.A9:ZG>r4feBgsB[)2ul.YT-R*[<hlJ)KAo7nknOLf.g%&/Mc<ekEm"Jg0UF!tCM%[C>B!c^b/$^u^OeZHM9'A1e)o'B0CcAjY\Oge&*Ao@bnSnZQ`ao3dmb?l`GQ6##@O&7tq3;aOIag65^l%!.g`sVmcqYHU)W!JS=FP6ec^8<_*;-`%#UiTL[5-dgc6hF<LqJGG<i6,B9(i`"]tb;^nfiN^0Oh\\;,(*NFQl0/p.R5HU3o!#3at%%t`BUNG(S+9[ucSKMuU[Bs"b8!VF?s$;E1UV,>GI`WSQR@fue>P&P4^V=H^u8go)q&=QqZYgRF1UV.sP'5lRi"/3d3Q2s_U(pV2`%e3:P`gSm62N-bnEh0L*J@8+I/6(I3WHq*jrN[nN"\-rA1NnK#W*7m[95RO7*A"*m<!@n=.dQm&aJVrBo?72\^%+(=M5u8K)fn^Wt%1h&8!%iR96N=d&qq36?(R'PRDn"GP9;1%5"qJZ[k*#_a<]%R;Y3=(N(Kg+5TT\C:E8+l"1ARAF&2hLci]Zn/8:n1B&D$,sZ,c2G*%@jMdJbVF#$?rdQh*Qe,\Z0tF=<0@ngSo8r<Fbd_]RdNNd1NRo\r<bt+g_YW%*#kfDG]0ZaRDQn6mMJ?*K$PdLl+>u'RCi&3I?qW(%N@EK?`Xd$KOc/fa_0>DonC!*t3fe]p).M,s(GL3Dh!@ARhVf^am3*gG(guSu;@CFr@/8n%U4:0=;.G$N[MOYaOG!."]_gYD)`gPt%4eY"hBY0ZncTtc`i0Mi\&'I51.tJB!PB``[6gH`m(WAN?%%:'n&*t2@?AJ>?$T0-6HpNR`bq--k[q)(mg33U=%qlK1`3<\Mfs1C\%B=);_+7;ES@2e6A6^bX6q[p>oG_1#uc9E[kRO!sN7NZd?BFMNs=/>rB/.`Pq#W;\lnXp_ZI8;soR#OhXUdp-@7@A7&LpW2qlIefE%-57NK1Dp2!fI<%;IR6umn>K5DCb>a[^N2@d-G8p@"["Ck*tQkuPlrK/mh&(_?sf0E@%gD/3uOZ@f(\.G5T0K#4:N#-8&t.\;n%kX%<qmBa6ZO(1+,'4Sgc&K+;tFf%J`&#=+!>e]TIhO)VkAc?gO+puWS?dOI)0pt%8YT>V\-Bs<-GnJbM5:gm]=B&?MZSD;@`5'0`EM#%dAG.O,h>^%X/Yod8C0qMUM`ku\mMT<_[j'Y8EC=hY+XkdIrq1<V=X'I*a_BFVI<4ij%A1HR!\Gi*pj%MJ>,Y,B`dtoFY6l590T=(%S9BtL`0WTlA<1:8jt<SQJ;`h\oaP?`C"//OY9'F\f!smA(;!)1F.%WP&mEioC2-k[c)p+a4JfSP_??h7qWMeWl@)mC0cOc)po^8-%9tpL0HrBZW[=02S57DXm4nThhk9)<gk^0eDI^gXiUWI9jWpmG`pafhU0IHcZW>a$H^UZR1p0/Ffj_@R!=IR86Fm=>of$rBqK]A/F%+_2n;7dbc6S\n!a:H8Q:GgPM)VHZh`k/UOb1%drR^d/,"8=k!/DmQGOD>AehTO,P2r]UCmKnPk?of*)Eh$lkH<aKEP_'-XC(+\pJ%]64?@_uFN@41EpG[Vh^&mso4b,a>l$[h&gA+GjKBCk@Kf(n4nHmeP/#qs8OO<Lm=q`Nd`0h\gcW/1l!G='(bH=/]+UmD]'nZB7;D%[eek6Kcd(DZ!gT&Ra&oPP\fS<).1s"oC&rkj\Lr,lKN`%c8J9SdHUaM@c>#p+qO?O%#tXI^6B2,,iSNBlTM2&r/``HF$0KG6Fp9j%q3K<2M0mIhgN;So3_s<0h+d&CZQ&/GhoB+!\qco<deV5Rj)f:sq*$RXE*`^r#o7]ucV+g\=;//N-4D[cg/aaIbiIi:l0m\J)Z_r!%H1`@WpQ^g=4^,KkjE;,qe:mEU"9:M*%K`4=>ERG;LVSLIA7O"p[/<YI]=]30M,$WV%Lt:o$j4bD0U!_d\YM[+\nX#V?nT=2"Omao%9U0RnTJ-,gk?46mQg<ARcT`6D/hsdJK:,'RD74,C`GVq1Gq3gIgAG,p#iKA;0CPO%1r2tRe>@P%o:o2$IMc!<jI#s:`KiBmo#_#V%W)*RS3!;365a#!kduKkYgbho>NEAa*&Y6fa'2^^"[e/t8`1K'(KR[!k\aq:uI##<p_BDYHoWE&kX,0Ao*@9uZo!A"3#LSa9</2:>%]1oCe>=B[R-UI+6?:P"18`V4(F5<A=Hj'Mf.Mh@-l!O$s;erhH.9dH9p"$d]I^%^??T6ubRbT2/$ERKEG7U(2A)#UoEa@S+.G&pf%Tk^[WWd+$(`^9?;fB)pY;4`m$-0d9t^WF@kPB6Gor89Dkc)k*XH"'!YE8u$9Gc'H'YBF#Lq.,`&nF0A:VCm21o])@)?Flq#MU]Ic%an<D:'paWo3T]!P%gKI=)g<*bT,NKeK<KPj00Lh$5OpI[mk[5tO0gRu>kb#+c`)%n*;>5HD:\Xmm'a`6H*LFonb6K7+cU9JOQ-f.%8][9)%@fV7_\$r_m&9=_OQ(4I\k"I9_1kE@7t^GQ4pX.AouaEu&!Wb?+Oq4?AiH%6$d:'O-bkK/CC8XHeH1t*BLt5U\`p4G]WM$e%n6f;M^f"HGpn1YMC5>4T>eqsOLh^\:Z7ta$o%i40X=k&S<`RE#f37)9`3(-f!"4-?/`3_t/n9&HH#Rl_aY1<,).F5\6:+?!3o2@d%]Zq/tgeQI'9=eIA(H6it6r5WHU<qbdQNRJUS`':WjhHPN-%5X(ePt+L+0A+aqT@[_Jo\Ob]+$?k!lSF=6JaZ0\8q3U[sE$GBdV>G%d#rumqbPe+FuoI!C.T)hP'dHjN0[F6C.[5+kf9hPjW_U1k_hZqU\(B^^0TB,.-p%\B@27?a:o\RQ4sP+hbQ\KEOi_R2>fq9mS.tm%bCEbo1a^]TVl4Xs/H,CY9otN\!(W\!8gEm@:J6R_&o"M7DiMmP,(:>!F4qgdl+XanL>X-s:^A2u<D*Z"i;tRIHtnC`U.:_Df95]q%id(B!CTg:$9&$EN5th'=hLdSj5Ao;ueVmOhB/rk$P2HtY-Vk:Y(dV&fEU-)7^N#Kq\5>3`lUJX[ftjXY9'uk;ofjPMNNtLXR`(E!%o:a7piM[$RdYj&hrN=A$6KMh0,pPLD95^,!KSn-$WDmT#'hq7go"Wp:%Wi&VLtr$YNJqCZ""1)gZdi)@dHmDOm^7=M;!"?e<'Pj=%<Cu=M,V<ML79lALjf(G$7CZ6p9#*H9aj(LU^9E^k6U3/#L_/p?d%P-[c2TIPZ%[N%r*]=:le8`;@XH`*eG32>na1?(Td,ns<1?VY%;ets4"P-r0ZfW_G7WVRE'2]qOV,NTT?bG#Ii_7AVM]5CgkE<FJjFg)9>#AY$G<*?9F99(\?%AKJT$:PA8JT6?4cYukA9<RIqE)B3%d<<rG"tTPrCNP1W5=]o6o]d'9a4c9]3]F[3PCu.*BTh"r)8>-L.MHhn7!T"3h]2C)M`TK@M[:hVb46<mCq?Lh\QY$R_:%NC&T<8u%rgR8KpMF@<Jks^1e?YErimVuFH_aPB2]Hd"1setN\*I`N?^5MH.<AonVieW&*FEF7IFO$ZddBGAE2<?ac^@i2p1N(-IbKL;=sOip%Md;_Z!%HlIne9SH2n+>[Dn55,Z0<R\+?]/M7Jm1Th!sF:`!cjA4-(I,3\mEFCo9&NkH!hNG@cR_mp"t_H$YA@eE<DkL.A-\>EO)r%XebQeX&fUY=0)-FBuqMmOmkq8Z($ond2bjs/8?eF!sreUI9f9MNXO(4,HC-'Zjs40\eb2sH^?>3aipimEYbk`#sFj0D2m&0%j/[X%&8ADJrdt(jX[QU#N9`,L5[^A0MQ\<p\^4F+73=&O89UZH\53ud#W8XS-'eF@XnKqHhM)9sm/)3.BiaP6`X(WGm11L4_$J.kqE]s8%0I#%+8rS?6Cpi[=,s7-RIi9:Oir8mc:R$)?,7o.RA"OgW95(50Dj2(B,N,]l%jctH#UXJC&TZKE5:GK.K&3VIFMeBGP'JB#e=E'4%W<I-</f!91oTD@^:Oh'OBE8Y+H1sj'J"`"4[?49P,A%`7bb*(iRThRl\enb:<n=KXC,Y]bDZYWZFg`ABC[FYsl?loE-KOr%.X-n3%c^WgYYBH6>&,OCg;uPE`]Uj$=>!C^=?8$L4(R2]HlgB9?aq1Thq_c='QJMoe@bl0V_M21XI2P?NXs')lI^(eOUrrVYY`UCTP9&P,%GB:&(Cn46o+@tV;M_6X]goPJQ(&^-@0H92W.MnqCd3GG0nJW"e7c"VQEEb?<4]7\c\.Y`A<6d5GJD]N/nOG>.=?62PM.4K3j1<S-%r_!E@%QfUh5$@GKf4oZcMQ[*GSo/Z3J>HBI-'!2+4;$&oGa9:hj'"k(JMhTiqf5a-0"odU[g/b,j68RZ?\ld6CMMmIYL9VGK;\@>%kmU<t3#bu1F7S9EQ)QG"YO;"#VA^?jE$U3qqgQNo32oJ[KLu4S[9+7&:HtGCjTDd=YNI9^C5-@%X*cN/l1r0MQXecXBoHUaIqX8$%rhGKiDWtkO5uruMR9OtT>7/*bl>9UE#QPAd31r4h]l>6[R6<c)#CTcHcE>pEosa1_lRi["L.0@6:NYi7g$T.aS>sP(e.T6PI&20j%p=HP[fD6#_ODK$WVjG8d=LNYtIGfjl_etDsj)2Bcg0r"b1[]u:WQ_l#`nbSYOq2_DjQLKY?.lcL&X=J:jo(iU5&2[O#Be;`'A%iQ%gi@GDP15;6cq>tJLTMg:d=^kpL<NiJ_cC7<R<"*d1&+FC\hPi^hW(rG1gP;ETM&%Q`6d:PmkH7G%5i@?d=/u[*9i*SojpnChAeBZ%A<2tjq@`R`WV7e&4\k-oRY:Dpn/_8I4$"u!&)1mT?(@+"n?<]6&J:5t*XBDh2ucuE0t(/uY,ica#M/i\=4qi4O0e9oS'(S"WtiqS%0ta(koC2UF:;jJ1$dWP/o4tMi]/t4>c\YD/?dE`PP[^)A%-Die_%T(9R5<HG$Wtf\Q@1\r,;m\S+jb/[MukMb(.F6S^9_M&ai__S%%A9rZ'/uReSD=hH8Pch,`1>7VYuhZnT//qqjQIC=j=3&=EeJBVs7sQ[\nDn0U^Q(?D_X*Wl%7XC_P`/g`cWiil.]]h*-V`E[rElR%3Euke-'al<Xot]?F+5H?J]G%$r\bia/qS9aag]<a2u1h6?#gHn2=!AgV5r$;YVWjr<n]/-7ZoA']Ike7c+/1RcS.YT^4gf0&[BMk%Ls*OQ[:jFV!+U459@J39_*+eLa[b9q#T1\+eOs8C.G:#^k16nVTS;kk0H#>):479ILu)l4Ac#T)(l>M7jLoMtHBDD$CIP?&S@-:M%WFu9g(@hig+3gabfp9A6\EUrt!S94>AS?oZ!V*<7f']oAV`T&<DaisT.7:Z*8Y)XK4_8;H);>dKrrCHCK;4a%TO_nc$#$luWqQd8%nXKREMaB)-Sp-YgT[NdA;S(tFOm2e9dtQRd"40sO+>qW%c2EnN5q)(mMU@nJOrHa2pL.`G&;'</>o4ItKGZ9SnLK6l70e>!"sGXO%W&kD.r(3hU>Kb3)@r8*rY7$aa..2R&]*k$l,(>kEe=sknbHB<W(f`a*6B:#hbER;XdFD2`V2;h=ic)5CD%K$8S$T"!J'pA^HGrL'%^F2=KB'<%Ln$El)--aiLi\etnd6/958D0(dL:[8F%UifiS1<#EHIA/01%,o=m7nHM1m82:fY/i>ftu;;1&0hg1t3h#<oi?Z=N.XK%2\'c=;0^E6?qM)/^1-:Oqdk@).@,O"66qE8.2()k-pHa>.UOp\.u8sP.UUfe6Y/gM$hrcc89Aq-G0f212CB0Yoo3>SMQ'oJN+.#b%o_ZcIZ3s^!740m,G#Q,2s0NMJohq0p=FVN\hJeA/W7#3$=ML](?<6G=:jD&u9@to"qd/26G$OJgoB)j"JmJ3YFW&3I><cG@C+\W:%?9^*FlLjahkP4L/H`NJogT@ftK,"*A_C'e-c=P8e@R;-3^^_>FnT0:7CR8?!n$:fN/.CsPN^XQ@7YliY'-ZCm9kgh=gp[l>EDeQD%,gq<`$$^ea!36X__[H2MD[Gph6bVJnFjBFnn[cBHT/!8=%(:(5d_f>cp>]TqP>=c]O\Uqdj6,;8Fn&A_O3\OXilF#RHC)W5&XE%?%[oo6JUM6@7h-8OA\1k^Y7CNf_*gjYboY"KuEqu>@Z&>*b.a]A[;oTS\s/#0ao1[9NeY]c[If/O:nqFbZF)%KF9M_(YR7T&tCClZ>%#Gk!?jMbVmOP`bW)hbl:4h98-6Furg[YqiL#KWOC8'9HXAru%aKFBNTFG.cf7uip51;%k?Mt_;*N0<-G36,e/j,Dt8?@6+C+-[S[%_t4t\46(,96Y11$*iME8fUQ5uZZVCri+XKZE6>u1CsLfki',/sG;7)p^6gj+VU)@H!=dE>.G8u+N97u8=J+HO!eD&f[TBcnf607Y%%L9tS)mgO;)ZK4aJTR:P1r$1BlPKHA?!%W+r-=DZfr=W)4ja?HU*77k8.)WZE\mU,`HkFM_0OAbXG;-%j!0-,h:;'iILJLsh-JdZ%@/G.c%nUKpB0T*;.#-DDs3C!KV$SZ^DqT+-k`2fHS?&?Yn8N;VI<k-4N\Q7_b#?N=[Gpgo_su=p:<5<.7KCeh"^"[2HA2,H"hlG\%OqQWNhSH`V=>-Yug"P"]?L<E7"l$Np3=[KAm3Yj+]W5Cd'X)[01PBt09u)ItJ%!"k0/Me\FQXh%`m2S>fS7-EHQ9<^EP/n's(dC8%1BU<!h9YQroCI*LKY_BB$&#;/l58S4LbCQ'XM`h(&1/#&<lkQVs,A)bbSQ59_Fur7log$T3ULT(FXRN7ja.ljS98pd2l5a]LtUnG%:[<na=8_:=\QNMBq5).RF6U,:>r59a*P5Ze0kOKfVkdEm<qnRiMSdWE._g-^1Bq,DUZ3fDcRZ_,))/Bt-`B#AZ#.`$iUeb;[B;+;%?FT0SrK^EJ3lRRX&?b@;Q)!LlGmYF1bFbSg>u%R7gX3*oqU?qI<%lRE0*iMda/T@[rRYQ@H*$kM$,9m\p,4MpZj:m!g>q"A:DT3t%3"A\ogD1TTVq^/dS)1OYa.dI+fm(la[Y*([)\4nOhuNYVFnbg#/dTscluIL/d[&0:[\W@PC`J9RA_&`WQeN?X"h0aARfg+%^\Xi6%3?s=S%M3d39*K@)p;V3LQ7oEoQ="AGm\/UIm?d`Qp*KARm/+P>?ddL#WB'O`UdAsD,B'8KDTqQ2[%:9Rdm))Dh]F$19>=V:fU"F:%hNp0\]\-\j5Vu,Tmjq=#9JCuD:6R=YZUEUhilEZ,^Mr[Qd&/tUrHcj7%X)j:&ZRpR('83?=>$!)TnH;'aPiKVmD]&;m#<3,*:Yf#%<066\#r#9;I7[<9pY"5SRTl:f8+nrYn6@['I*d9b9M[<`^HUk#jRD)6k^FC>.PltUdkB`PAOb'rqILYpg,#fH\p+"LK(<:SN$C)b%qFEP8GN[rd_!h/n]>_Yr][cOX+1,jh@D1%dqOlklbJCj<rVE0IoAn8)k^Is,WQZbsk^KL%jQ%sarUjSU6S+j\ogolQg(EZi(l':.%l@])iNHWAtp/,pl[ZCQt;:LoTa6idk@=pD`[%`QHi!Ek=a62CNo%h:k#bLT>"n=WDbn!B2A<^7]7R<uXS4sol<WsO@-TD6J8-/k[%[9)5?m*,i2JbuGndrT/?I^MRV9f&LHA<pt/Y9O2-j9(NQcY0>VYIc._*X$hk@MC*fcrY=-A[a!IMp>(HiHJoMaKUOt.ZX4,$V[jB%+^'0_;'L"K+"Jm&CDL+U5!d/gcS=\b,M"(3ArO5a,jhJ;U9*f70)Oo@nlllYVD[Xp.WN:i[<\QD:u*\4c.+DtIZdN0Jp&o"&W6V$%g:/>,BH!m$F#@Bm(9dJ$CQ2LUs6"7?n9OStTJ7!g_"Tl(BFG"]?+$I_Sbj!a7Y$df5bfYaMF2,1?K[P1ha0)Oel((^O>5Q6X_#6*%VO[B'_peD#VmUW!$tr4"JOU0kR.%U0+I21#)R\@uP-Y(mLKNW.@X+&VTWMBg,7A]!7s\kE>5%%q.C>Woj&h(^[=[&&T/5k2Cl!in%VL#iMB2Q4bSuY$%,^Q2a6k^Y83;BogcaqDJj]KpkXirB1d%k]pZfs$5D8'm?Q=$ZX.sG?lY,mW:o(Cesg7MQ`al--c?AY:<jkWb9%bD#kmal1mD*(g'-?i>!"$W9.tkmgI"-F_Se0RgP//((ECLd4l%*T>R>?FW=g(q6[fBX)$]Zm3C>L;]1_&O^Z_5qjS92*Z94mZD.h%CsuMa9Buscjh@iT(5ld$.:6LdJKdGMT2VYqbj1^K%>E>[D,1$0$N_n$G9>:KDRH=[m2k+=o+?-HUW;QgmDY\lAYX.rEBN`L*Y'][%Sn"Y2KX\FuV6d?UU*+WKDR;X:')>4XXW96]_tK,K2>Mn:+!X9<+,'6H8UEr4ro$:J'ttgbm:s4G(J[JErITCcML8VH\&0Lt3&aGA%Iq:/r/K1JZ+0!"#"4V_!FoMJW=[,i7hZ7I3SqaqQkGPZBEnbo8eiQKOKKLb^4%p3T`f'kc_Y\un+_;f8lliX23W$5,SJ[pKTfaiG%kMqZ/B`V*`@*m->$(aPH-D)VlRc?g5*&L!DdL`WqbTIbRIN(:0g]0`LQ`>Q;V]0N`B6//bN\+m@'Q3?.DS/aX3Vp^S\+H!fm%hrm%Mjb%nbo^Pu#VNY13bte\gsb0D<!L17>9em7B(";'M6P*2[pW:]b)sSINQ5)G!tA[T>*i+5\[]4,k%p8Jetukrep>nE[Igmje[(=M%@o5Cok(c+6KC1<GN^`QZ\MM*#)o\TMGW,2epHur"*qR?Np=Boc?'N#W+$SC4Cp@@^L`.eTQr:b.K=l2hls(X+C*E5\cF+`k06S;1%UAn9R.aGp"QWMfp/T.fsJeU*>MH!3cZ4mgb3_7\+RWJ($HW]=IOM&J/T'eL*iO$,ZmLUBQCLm.Ld94WH*/+r9/1fn"N[!MJ7L;mA%^YtnIIEaL4i$k8fKHUSNZTmkc=LeNC=RE"nf.S;k]@r<$K'QKpg;errIeqTC;ON@Y?":HAi"HXuIJ_HA.`1m>Kc,0#N"J(I=^M(5%,Kd[CGQ?0TGpRu3f/P]U4Jo21*]0q@Ss:XR#C\Y#liB:[#dIpP`H=A$<>;b1Nd?".g[G^f>P?`M1=^5lcCF1N8*9p4@,FOuRspp/%.J?KD=u^r72QCu%4Un[!QY5)>,;BX\B'$s+'antJo&Ro_.MgqHT.eb?\)dE(=l)=&n1i0NmcK6B0Z]OI:8C5OI_;hT<O]EKV*aBp%qTlZ-`*l],,u\t=gFVu--G6fKR48$7=^+t1^Wj36L!aP@V7Bm&PJ^6VrBOo7l\?m!<96u/\KfSe(>\M'"f]#`3Jg[qlitL;E0fI?%CBBP"itIBI(R5Fe*D.%M43Vq*ATn4e5)Z`TI*>sa.a@6i@6E:_(mE"%>OlXd#da%uE_F-+)or@G?@-J%b@uXgG8UB@Sj!Ps*&#^f%7ujJXakW'<lsrJ$^Mu&]N]W(i$obbf1"7Ggr[8ZXV,a4]*;`$VI4EWY;45aB1+UL^K@YHfSbF0.\D]Wjca!L>P.Am1Gnk.t>B7l1%E$LVc"Za0S`aWpbI!X&o2P3b:+,u=%jX-7,eFMmnq"3p?"=Y_)1i';gQZKW/[j0o?$isp/(!\a%+^>?NOsYr7!NL)Ir4$]7\Sga)%,KGn1B1Ie%.F0@>38\po`c!NRr9g=lLl4d&9dW4I:AsLIS8%I$EF3G053D$JP&N$ES`[nQ>hg;6gjF#FO1H:C.K`_DFC]6gGk%ns%R[8F%["Km"kE?D39fLY)-<:puNm-/u_5%G/NF0u4\q_5f-3Fa1:pu+<4Y]Ytro:P\al0Ib\>;*,Mn5rV?(A*SQ1bHJ@-t0e<Ne&2%U9Wm0H>17<iBeDK\li#s,LWu]T)Q?G%<H308;"%VS"j>Sm>qNVm'7MEA36U'2O,0U!22Rb[c,F^FSU6oRk&.`7o2ru.u?<=gam)V%]7L$0H!pA?e.KV*24A8iX_>B7%1;+8L-'Cc5AsAuDgtS"Dc!uORgNc([&T?A^gdPd@P2@p3VlA+EgPpifW`AETK0[l]56FTZHF)6%ie+ok<Z3KmMJt*dllnAI/Nt`!Md=9UB>!n[Q"\;1C*H2$2cl\"fWF`cafq'`fs=$TLeW1]"-+s[2U0P_l!0p2Cnut"T0(\-r+0Cp%Xa;tHKUg/UR5U>p_b`G#R9'0H-Q&Z=lMEkJlk,uJH66J7jMpl,onmocT$7*QHZT`Mf<qHIJ*-dGO&X41Co^jW;r#jSX%?R,s1o1W%Yr]Q(#P4*-*R%0G-TFBT0>'DjF;+/6URnX5CoGVDpUS(SMmGEMG9(-/onp2b[G9;nj6BIG/d[q`%ocE)XAt'uh000qqaV30@NK+5%0#j8DW<YS+F**I0;#6h4d`XHC.B":Nd2tl><!cGB$koUl&As3,\6/D;@.1Be>[D]2T_(NGhE$@9I,QPnSAIB:OCV?hB>c!DMKtG;%aUoR\Mq(LR'To0%p1`rn&t@mbI#tY_IdTNH]\(kPd70RUqiu&]p9Ufq#DjpN^fCCJ,41!b;"K]M4^.,erS;l`+uX77S6SHu.eE(*%W71Y&"Z(<9C4^VRi%[C$)Jn^I@MQnEe>2995'kA`W<AG^?OaKH:S,I.*B"=[9r,%2I8-iTWbdL7H4YogM%^;]OXNL``+ZD(5pV=g%gM=:1`P_>.ELZ,.2n$2=M/d<]dKilip]tG!g=s8U-g'l[((t(t2#e5\ipVZg">7+TDGb/_^B`Epk*NrA7snrhVtNeVOnP2eEK8:L%gllQ-r5cS,`QrU`jepo>R]3hurHS;58+Z!?iCie,E<!=Q1MnTt\K*e`R9%?!:M'i-3$MgP4*Z@M=_WHU&iTXK@:WS6&2]<(#6U&"%VBX-TfsqGP,G_6`(.C/3dOj4qph_<c&+9e4P*rcmPb^(j@V=6?eOt1FH5Bh;$YS9>;Y'=7aB92-Po@]N+`b#K,73P-+`/%F0<:$#%ptSqTao+3*.l]qm7K^*/fH^5Veg2Jq,,OLt9ra@gEa0\.h`Q97D'+MbE%Z`KL=jIek0*C&kk).EL4,<3heB_$RSMY>ZU;aBokQSh%:ED^>X^BQ!59?eUV8XM+FQ-kG*c@aG&i6((L4.!^dOQF+fJX*-N0`Y?Nb+tnDRQI_'8qVPF<97h?`YD3B&2Y`kf3MkBEd)bp&M_+%MXq%Y:iUToK3UIGr>6.&E#^fOcg1#p@\GB+3Iru!)qr`nQISnc&quNjWoicnjHdVbAHf'`i3=a[%qFLIgtg0&`s-'qX1n7^3)$lr%\7+6#%ch3`0fDW"io[\?0RX6rgeEmE0R3tMH,d>p=i=">+fdpO\0;Qq10\!."l="*l&C%WA>=Ks`euA;4="FoJ/n/>o-n:cg@4Z4%TLldS7s-pBp"Fq4'1V'Gfc#d!q?hdHraTUDo%!4-RW@5Oh?^P3j-34R9e7J51Q-o5LNC/Uj9VW:RbFilh+XQbneMk</\<Y"#aTE6%Wpt!mNaYN76F*&(N13P%?5[8D'5<#i:`,]5,Ap3DG^uS;N5uk20`aj4$f\LCI;V%jOJr*^Y(X,?pctQ#JY]_Q^AXF+`50<U_;k$u%dn;(IgBh7UH:H`r''j8Ij<kb7*,-2C2)`SQet-9=cU$NTKCoO<5.ngTTj2N][R;9cdRrXg.B!6-L:Fb(M<@4aOmKpi:97_u2X8U-%$2Dk@]#Rntr+YLFFre:-*lpH(,(.>.aQl:ZCcQ_6['P.gH.XOK0('pI*[9P-a(ol.cKj,13kE&oG(S&]dC+Ioi:F]Ag(r?D6b*Z%%s(1]d#4FO3@iWHLO3cS>PB7dcZJpoka(6\eS_oXRoQu29.-L>HZhD>QV9iS,K2=V_D^C(ZY&ZR(XqE92mcc]OK<hrXmF&j"dc!@?%E&\@cf&;b5#ug<u/u)H=VJUB!jcJmbQ4jlCFn/W1JTjA@<!k8G$odN*[f>i-J"@KRHSLXApA5^c+_DOq%*li``qimN@HSH/3RZfF%b/m'&SII4uhLu\;A=YF)6k]8-aKEauc[2XmO([)9Mib1qR4IBtRj4Bn.L^Kd:Nl5kHuR6PTP+(BMj/Sc,bP*uXA(H2IC*N8q,+FU%(#k),#`^s%m(1kh&*3B@B`)#&]"sLjpW%HMR,0\VIPP\;3&ghRM&9<2Ms@g9&*JOVY-[_1HalBJ;c=Ll$"^M?<>]A`DllYc:D>WL%'433<Qdi@]YPDLtZ%+BgX(l-g7SQ-;Fh+J'J%GLi5R''ZTg3+D;jcY^'<c9E%s!P;=!dbX-f-u<I.5bRdpQ#XgqIL"4U&IU$-UH=%h+o6<4MtIb%?"0?cd;QmrSa@1Y=*VqT'0t'jPAB:qp\CJVQ2,hr&bG6jP%\/Ir\l@r?(Uh+52!iMJj3H5FbhWrX\,[%tEk'Tr3^n%:FjV<i?[9K%EnIN(Z*,8L%#U3qPF3ZM#e):TYafg7#W%faBO7o\6,m#+pm#eE7l$dH*lu%K"Qab7`@f`_C!=;/CQ#9L[!l@RAVPF%_*bPWFpm\bhNLb2XC3`1j<+Hr`(3;B'm7$E^D=_ip9:6=GPSC`1V:$C\ScJ=5_q\2p"iK*PtD\0eQ-h^Eo*[c1m/)#^7T(f4M_<E%:S3;uBZ>7>G!+cJ-9oV+WHDrDliuQIGdXVsgZF,M]!nkT]uVi#^^s0h)BHK)_UG]-&R+RKoA'!eT:^G4&F*eN!=Gu6)39ApR3Mo\%9)19@aJ4FU0_H'Pg\/AY<\#+L:WI48?/Jm4))M5qVKf)/F._5Pr54,HSI5ZKjYE=-\8AlTR?_cr=j]@B4Q7i#hA,.:j+/&:D%"q(%eb[tfV+^Tdm[!<*4L@LrHL7Up?Xuiq*9&L9%ja.Y67K)hjoJn[?;/E2s'8/u[\cgQ\nY$+G@0gAT!k8/Df-Yo$E:R8H"g!/]naeO%f$i1"f;npsBfpQFn#md=VCGO+V(_ML2;;eLFWN3>V@#(dg^;#QaGtC'MUj;b:CbXh[BoFNp#GK<H/i'g=GWR_P1*Ipq37XR#"5S^%c>=R_7#,[EVmG\e3r`CZOtLS=2pt-+;["@X,CC^U!$I-ETm;,i/Y9?kXm_^!R;hM6'[K\9cdqsPL@`&cY?&E)>*"I8\)u/#6\RD8%f)3sDLTrk8CB]'2H:B[\$dBa%?KKanrH.#Q8J>`-m\dD1o+-)\Fo7Y#(RMKLHL"?Sl.k[^!WoQT+AIS(AZ0JTe()X9c"iQY!1iV<%9k>RgSkn8DOG%L`rkNbW="\j+%\"a":KbdoC%BJ;-P+P"JsW_)\mFC,<q:/[#LT@+cpaB1IRT<-o-*m[VF79GrNJgg$%>cbC@)2n%VcG8=6O:ICg.Lj%q!fjLNfD8:T1kFn'PMb)IeHC7(c3a#i#]#1/+'X#8LrO&J1'f?Mli(97V0o#p%=l%*g_-JqT`8!8-JhT9pM8m%M(`n+k0C,]80]+4G_rX$Z<3PK&+7a&giP".nq_q+JrEQrXc#1M^7tp9b[$e#Y3S<sf!ZMO5D8m;>OGO`T?Ma4Kk)IhWtqdA_ah^q%/-Llf)j\bm'f;/TCI)f#*XERlIk2)MeU#]Yd`8`X8WUFN:O</L/C85S34=IM^R?e9C1"SHqs!m_QQqU]:(edqTCBm(hsl;c7sP\\%U)rpUZN9[iQTU`'0+37qV":bB&Bj2.b[:@<#OO09auQeq5*ft7c1_8m`B+6@XRbcX91`$DgHm44_-J%`RMZ,$!J+aSe:.21WZ55X%C%b`@@.sH;Qn6JE]dds1e?6#'n1GZV0G2!d0/qI_Ns_Y4@U*a!\e%c'3p1*ZZ;S?->`*UpW#n[k'u\)b3fiMJjudB\#_b@[N0q>m%E%;pZOe-H^^q.5V_V=d_J$5p##a-Ck04*bZT/u[8aF(h0oLno2046/.!*1h&G,;"<0&8%ER>8f2e,86BfRD#+E7Nqp%ja,]W`eLM%$PlF!R30nGjlqM$5j)(I!'Fi'*%F:^p/aXQZ^6jd.l(cX[_3o9A`jX-A:_e!-i<VhP8ucNDmpeo:oi,&*bYg#Ttq@up;^D'\K@1S%Bl8rYFma\p<&0FTp@6$jq8;"DhH$TB,Wan<?I.b6?8YUQT;g'$iqM,IRRR#frPX>'kE18:ASXe[6,N]#F0Z<5C\p'(hu5/!_5k@=%5I_6kCi=p0IR%`[K$KLuUg28Uqru.AP=kc"Uo$76ica=:AhU$*Ih508/$_'AdlRWkga4ue2h?;HR@A_R5Bdr^"KG8-&UrJa]LH#Q%Jju-P<7>Jd'BnPN#uI,K5nedj(;5jcZOpr;h[a$<b[r%DFL10iJbr8]!k1h>9gEd7HR$bLGbb9r*Ag)dIm3_YcT%k'G$`sT]q!hr%e'E!"*1&keg@H5V<9uUTTNo]cX]Q1/<X]M7Dulq3U53/Xfn##O'_)#^(Fq`TNV6]^U&8`9)=dEJ#U`OO(X.s4)V:6jTj%Q&=nuYA%ohof!fAH]m#P*"A09,ZDH^/V*W+&,O2i57U":iW@<C@o4+@'Z'B6KNm/W\5'ZN*=ZGD^?GAk/mh4Ti+">7l;W"uPR2+*HMumo>9/%;1,Q+cDt/8!SYqlYepX7=E6rPM[_J@R*G7b.c%Y-.,n$.H+,6[>4RR"COuq=rii]>*2'/(EVATfq]!,0LfMa6ZLpinf3uSB=noT%%LKUflH/3OG<\B4-(ji;l<_c9coPa3TooaG,5NB`*T1V>0&KYHP,$(TXb9O^?C9aU[@r+-O&?BDIoNMQEN5]RPEKV2V`aAWUU$`>k%aScq&RC8!JXiN1(QU[G6*O?fZY'mIo]ICu7=d]gHluR,i\A%?O#]8Gca6PFTc[h8jp$[#?dc\EZhnRcO8=r9EM!mO?%f,(2%\*g5%J$24g31khm1qgB-T^T+M\%E7O80H,1SqoT.&3Rs%o0i60LN"hHUNe!Zn3a#2a$L:(M<Mhf&T[:Kl\XinLS3$&GJe.diA0b787aP%%q/Z0!q?IfRVor.#[h%ltIpY@8`0C0qU&XW6Ei+M):T9(7?OTK[(TArm4!eoGm>"['[(Q&'d^\\Wgcdol5Q,r/!n%!ZHZ-#@<LK$%%T$k#f;d$,[E_9E^:HA2/:8ruG.:m7Nrnm`Wl>K:7+&-,B9jcK9__2Z$CJ(5QS2r]3VCllMD@0J#V^u8O6N"$)l1@R+J+*1,G3W`*%Hg6/GDl4;Y<;CS3kIuHg,l01bRf9.!9=gfYME7Su1eX[+pg>V@",WaeL'ie*5h+o5r_iAW"hg^(0.E-b:&07<AX!U'9^+kmWPZ$A%B"DiD/7I4_X<#A]a"1qZ7O%:r:NDdQX.=R&IOGU3l7QYJ$uZim;Ud/nmJQrumG[X$J)p>W098p/p:ekL;P?kEB%apmR8_eoeGf1C%aq`aT*O76hh6P&LCQXWT98Y/4I7dM1Os3k`qFG:C8[X6faP)2=BR37Kgdge'T&_M,emNp%9rO-F1%pb":\9drc'#5FG.<`8>:l8?%0#EV8bCWL[D[h"A=k[9>A59(mX>+m^4iXdtJ"k*qbplkNiCrJCE)/3=lAD861<i)8%V2$499qpk[=`gSfj0s8#4$@c0`W4AJr5$\%6?S`#QE"'Gl"O6lajEN[$[l/34oJT;l'X)>^n-u/N/DW7W;&l5e?BoB7hO^OZ33l-gPN_>0+3*K^GY5SA8)/>e>/1*N"\h&33cH\%,@IN4U82L(K]M?s<AG!+%!S9r$]uFtee$"rPVuXQX-8-5Fdu:.GHKtgKkYsY4*@6L%Q@LnOLdj^D+RsY29VB8Cl<TB$_sDX!auuo%M\JV#,5B.+R(AN,*bfQDS)jF%!k:A@0aug6Y=,;tSL6LA[KQ^@R:]T#&<IsmYe\U*P9b=nFp+h=dD3!)<$qj;.1DJQ\ml#[b-EQ4%6mG;Y*A30R3@+732H<O!AQ[PAY6oMKLLn!@[.$bEWbT\V@bDPKE\poPPISDmjsVNCVtYe]&[_1F1mSlA*`Gi\Ab)[O6]<'A6Qsg2%K]\Z@'%<Z"\Zps%YXGh^0qE9!qT<D7IB/%5_U(p1]/mX-XqGb?_K\.]mfm9VMr7JR[H+8c6-ZXpH:po76[bb,)a`Zur9KA<*GLuo%YVed\M<^a@84*><oX9i!QAXG@P&32h?U]jPaqE738St;u*DJso"r0jnX/D+9ke`?]"feP9YRK+i#L?@?;5X?)j(Hf-1K^MinrX--%f9E.2&#lEUX(n%`9B\.IO,V9C><<=S<_]L^CM<uSQH#uM&kd3.e67a3ZG`G/j0dp,3^1/BQU*nHC!prsL!K_H,dg(_0f6]j6a?#d%=H*%QDX_&/X"='oI_%s?'_MtCP`i6bSh1_#,>i8WTcS/pROf`2FOT6-'SFC;,`2cURNs`:)'UUUHl,b]!12;WPqEFgJP#/8maC4G%l(.&J0O5>Ia\a%A>(UOHESHf2R0j9G\?p@I.n\pX1n#T:%=f'_Ct1j^g8)[A3^6Ok=QN(_@"cX77V2.eBqF?*Bf1QQJYl;[MF\j@%gL>_OOcG%JLfN\al"G]EFQdt1'"1]Dh%dgM85pS"AIJ[)*'EZAj_%0W0heeX+rW:n<0Nd5N^]h>)(`[oA!lnX0PhM<(9KETkRK%%%JeeNF(-4:JM7!kaKk*5A'#)L?8>GoJO,uc.;F##oMQVnrBV_"P,TW6Z:etN+.Z)>>^RV$YUl)/f=-Vu_d9$trTqngU>eUA`KL@V1%l/A(??jZ+F)iKf*A5jo!i^!m=::q=D@*jMI!a^L&;/D[1OO-&3;^U@qP8leJ2)n()>W-88dSsGFNi?_+73.h*,u$d(:Y,aBWK=Wb%![R29VJ3V0);u-UdunOpgm6l/;bKKPl__T@do=_NO9sBu0I&hj+HZg6H<ZZLg[b.i]n-FC8]m^F!p;Cs4!qcfb7q%F&pI;+VKXT?%9L[s$@1u*qU+31]*T>AO\Y^3COI4s-nsN@C/Bbn\A=0'129!f?6;IXl'SY;a&>fh0Ra*Q,CXS'"*:I=0RBHub,?kED&DGSG0[Tp>%=@(8Q#7n3EepIZ9&CiiX3L26oLRNBY=+LF16lc@56XlONaqBCXL1XD!aQTWl*CI<s<Gk*Q>P&.miif5Y!-;TN)C)%io6SAueCf)#%Mg2K,ipag*a"dn>J&lj8iodZ<R1P-ENKCQt'T#H+g#N7110GC#X[F-rVa2r&,tl0becQ43R?4X9[1dE!8WF\=@\gj0[!BH#$C,25%Lgq<djZ/d(b#e39:BdpY<<`qJ4,4PY+L:-M+.\4J$K>m$ng[A-L5(ASaCYa@!48F,&h.)$;,(>&jd&;5'dSA6nnDiqZmGcJ63O-T%8;a0VZBcj/*59WT>u%.Mcf%J%(N1kDJ3QVj,7-n-.Zr"P<&GIrfN9UF)3r=L%&'X/-7T`gKkA+=%Y5)s!J.5[GU%=m3Um<EjO!Fh%'q4\]p1\6<iZVei2Smf$Na7*u*5(c3W.s;p)SnfH1.ual"MIYY5gXUAP7XN&\jKp6im!PjK6[r;[c8QlM>JHYjj7s'd35s\4Ud3'%o:2Tbc:)D(Nh"It_RJWLW[T+2&573@!K%7HE]g!-V@,J_+>*^%Y@N_#SV^*>-HkCK:gsb@(75kR(Nro/iO0@Olk&"5.2-LE8Ichc%nR8)bj+L"mi1Z0J:R:/L0M68HaFQ^k(IM<i8NP<?@=U2EYbRZ*Es0lU;HtNod5>ZP85'P;Laf).+k&U,d;2<Zjd&:jL0b$P.k\i?%(A"&LW(keV+NP1=R)$/lA[Y6QG[7l?#FZ_#aRod<n6ec<M2=K,Gn@l(]:MX;j@_!Elt?k[*@*@FfJ1/`cr@l7*?o$]/Vt76keQ^0%(7P"b#<apjmP#TLjS7,=O(Sdp!>R:\m&pVlkfe2-pf&7W_2-fh$3E`Fj@'jK(*nHolq":S>0M+3PBr,r7GX,.\HU@n@&$Z!,l'9a%C7+B66u^/GE2$QA:K9IAE1(:lP4+bVo,TG*lQ^Hn;LnP!XP<hS/0-?Le<Ci<Ko;Af,\?PCD,X!`iAX+SkUsDs!eZfE0PhkO"OioP%M[jXFUZ]6^+4Zk%Vr<e%dTT8O.^UACG_YXPLp.F^VbNGd)RUhM!V&tg'TZdb,=SK&maV>M7.h[!D-5gh5WU^d!aDGBPh'raA]QjJ%";79M,kO(Fie"+>h,.=l\nF6lPS&b+\I`osa,oFJ&eTA-rSTj^K$0H='+0VlZV7V4;HY,N:!/%(7LdE4!AP_UQ`m<M10GAiBNdhE%>$#CM'8)Q.8<u4@\M5hTYi=Y#a(AWsDplK!3Dc^Q?82J8=RG&k+Zpg?Y>*rGjUE8_;aOB*dS\+)p#R4;fG"^]%_jK5FrJK2`Y)LL%k<i_4@%&QWP%)ii6cL%)b4^.]#pbNS4g$g]%2<ZhN]eQs!9]$69d50)K+oOFHEEs0/5qDLJ,jArlm#J/aRQ20Mn+(n'Pc""<#2]H%#6GjpXJ_5e4-oERTP?<?'u!V1-@JF<7`5?@gTb;J0MHX6D)m84?8Z#J?d<.@6<Ig>i.f9\n9M+hM0VeF[hQKW"+-?RC7ds/d;VOS%%f:o*\J(R9S$##a*(dguc8p=hBh;4Bg'K#k_!(&;@t]N4.T8f-,^:YID/!/#Ke:IL3('RRjhk%N1nMc6A",QR$Qp-@",5k4#UG+U%X?d^Yj>DgsaCiM(-qaa>L!0T6&F,@1m5fW[_1ignMhW_M1B;9_A>9VhP6JR'6G6iiIYQO1&Pa/u&n]>7KA[sV@7tif\_L%(\LW::%rsMP381Zc0'Mr;p`O6DN<K>SM8Oa/iZ]$IHO>tVb0_1&8;*/4>A.6E+K1VZg4<Xf5K*R"I;,_8%9R(VQ'!=;t`4+GsVW\&&,Jsj6%[$k_\@<4P(YSbtj8_G+C/[GeM)1i'KT`q8+=4LT5<s?K=,Chr,A0us8_(%<#OaBlH'k-L6n,=W0duL.el#NTsZap:k)XC:_nY-@.%qb(lQCH8DSW=KXP8a&l+QC,Utn@DRd'+Be1"u1Hq<+3t5fQ[CQE-SN_1Eg#1Sk@/(7hp=t'B?u-,q!H*1b@@\mB2:&*2p$%d9nYR%L0Ge*7(fcClRX49B!?qG;dQC;$i[f7$t[g/1Fsu]iMZ>sJ>6;R>a$C>0qf&?h`02[6Zb)W6EEs>:eDofE[G"f4a9b<1qf:4bHZ]'%\q@KN_8ulta=rj("=rt1Rd^kJmdsoe+g9dhPR&3q)EpTD9fF=R^e5e)KInR,TPlB4G,6t*UPIlm2G5k1rJ"Hkn1<-EoaFQta6pM?%J#*R(,b/i0]/6L/(JEBk"po!]2G6TI"9h?=mT=)*Gm[1EI!pC-Bh4(QfZjCm@Y4m:b9=ieh`92RKD2Sg79.ShUg4rjULl!noWAE-%_2oi:bJ"iF1,e)F?5I-RZ.*/aK7nKW]S_[h)E=euD'k+"L]Vm.'.sX&)Of#>+CL#FN)Fq1JCLSqh(e4H;!We5c'<<C<Nbc>Lar/(%9mSU)m3#>,fuLO#jA^<T>E8%4QV4kX\s+_l>U&4l3d5RKFsgk<;d<iL;rOg14/Q(=9M2l8_N$*f&hQ/_4GI?/3fcSuQumk6P"'6r%hU<=TAh]9GU@/FOd9O''d02!uH60=JJ`.Ap`)05hh#n\]FFY>BQEFXT9.'n2D%"HT$2(7mFk<p[\`T8GhIj[d$&NP@ZR9>OPaqSP%Rl%o=,W`tqQr4"[k8h_cPn?KJ2AoNhk9!YO^bI)=Wf5jN/9c>J>^#;QjJ8Nt$9Fi497sg^WkbIK=G[?7E#InlNATkW]hAcglcGK7%RI*%K$d`5T*<r.ZIYkmO(2dQJ9&*Wp/0bA]10M,'1`32XX<Gu!D1tC,'R),s!&4q!\?K?g^mZTX"bjn'@"KSZAI-"EL"R=O)_ANV%[GiC!\>1I?Q6Bn,:b7B5._WQX1J*t&X=+?.6=M\,/4AA<1;]N31*-`c98a5[2!p+[nK[)"4-nR.Ts9P?i(d1WjQjV*9.Cl+%WaFh%#aMNJM)HA`3r?Vk^KUig,)8%$.*<-GEke.sr).h8:btZr&aP`4/"f4K?\9^L(^MCQJ`f?$f;_Xef,IBr2JmY9O;Vlie=c*C#7l5d%[H0_h]!nXcdobmA=sN=3KW%ThR!`.%K#?,0"q.Pn'`]Cn1lP7.l5UfP,\068@0_W@K.Vom+E@Z!$^Q*0'MW"GD*fSm+q;bZjoH/'%M6tg5Y`g61JZ[+u#sj:,YnLtMFRfD4QsCr4h-F1$Klk$N-9XV&?/pp"/aWEQj%0Am'7FgfA6/nnC['7Tm;29'iE[&`Xl2tdn^7UM%jR!j'4cVeapVUPILqS4$OLK-F;cQPt<fV.l4H+6<!qU7G6</F>7Y8=%npZqeR'oul20e.hWi+D#K][gK<uAoES=$0QO!2oe%j<+p%>-Pq"FQOhodnIUZc,(rc28b*m`t>g<#'FAo.%BjYSL&s]J?bmYSjPed:i,l3=c;;*"@qAg14JMKT5!N+?l=`!E\5(c1`ItROZ99i%!b``sJ>Mp<;C9S-5[tAub=i6P@6h"=!NA_:+WH/ARjGup2"hnYg2mT86Pc=V^+WPVXHr.kN[bIsK6FUdIWWVOe4>:X"*$3H,Ai_A%-aWt7$C6<9+L,<GLW!Zr0<AVDq?MSgNZjf-.=SW.9L8'PV/]&&AW7pS8P`1lP=mZJN"K05<1CS>#oPG866.WOFZ#KD3\6FjhqVm\%IKGKcLc!;>>+VU1,d(q*jJo4"F_aNZVk-N'jD.s\8)ifio&@6DqQ$lOQ;h.imtPDY`1^MQ>:3TsY[pJn\o1u@AP7B"+4^FGFktD$%l'3U&"\?^ZV>DmN]9#^?0nBOrKuc$:^PL?0la-g?]c@a8;[F%8>PL1Vf6nNY:Ij]F^'pI-%BHu=T*D&$,RX%V@-3r?h5.^=C!gUl%_%\Aikd64LN1d2T2"7BjTN\#/r6CnTh[Ad.6EiIPGi<!9&`@/L@F19ENFB6F`lYKmEH3UISGTh'EUMjbhk-)7'_[USg@WLZ5TgQ_%mt<)W&`H&TBc\.PSF/de8sZ,?R]^;A(Xu@i&P[/]8n6b30;Ahf\Oql8K7ruiBQ2<ZAk6=Xb$_GN/2"M,-#Z/H]>H@j?HG)f*$!3@%<7>i_kq5p_92XdL'46J7`gT6la_ucm`,2Du.Oi:%rg\#a%W!fA,TY-b92;<\/>b1jSb&>OY>=>jG?7S>S*0DCF#A+>nF63nrc7[e%I[Rcm\pC5^EAdFeoC61Lcn4,9R7q\6Q25t?[A4!~>%AI9_PrivateDataEnd