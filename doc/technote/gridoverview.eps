%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: gridoverview.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: Ben Still BlackMac
%%CreationDate: 3/22/11
%%BoundingBox: 0 0 715 423
%%HiResBoundingBox: 0 0 715 423
%%CropBox: 0 0 715 423
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.0 x406 R agm 4.4378 ct 5.1039%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 76 8%%BeginData: 8686 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD3DFF7D7D2752275227527DFD75FFA827527DA8A8FFFFFF7D5227%52A8FD71FF7D27A8FD0AFF5227A8FD6FFF7D27FD0DFF7D27A8FD6EFF27FD%0FFF527DFD6DFF527DFD04FFA8FD05FFA8FD05FF27FD6DFF7D7DFD04FF7D%2752277D2752A8FD04FF52A8FD6CFF527DFD04FF7D27277D275227A8FD04%FF27FD6EFF27FD0FFF527DFD6EFF7D2EFD0DFF7D27AFFD6EFFBC684BA8FD%0AFF7D4BA0FD6CFFCAC3BCFCFCA127527DA8A8FFA8FF7D522752C9C19FCA%FD67FFCAC3B5BCBCCACAFFFFFF7D7D27526F76275252FFFFFFCACFC9C8C9%FD62FFCAC3B5BCBCCAFD0AFFAFBCA1FD09FFCAC9C2C9C9FD52FFCACAC3C3%C3FD05FFCAC3B5BCBCCAFD0EFFBCCAFD0CFFCAC9C2C9CAFD05FFCACFFD47%FFCAB5BCBCB5B5C3FFC3BCB5BCBCCAFD11FFBCC3FD0FFFC9C8C2C9CFFFFF%C9C2C9CAFD41FFC3BCC3FFFFBCCAC3CABCBCB5BCC3FD15FFBCCAFD12FFC9%C8C9CFFD06C9CFFD3CFFCAC3BCC3FCC3CACAC3BCB5BCBCFD13FFCAFD04FF%BCCAFFFFFFCAFD10FFCAC2C8C9CAC2C9C2C9C9CFFD3BFFBCC3C3CAB5BCBC%BCC3FD0FFFC3BCBCBCC3FFC3B5BCBCC3FFBCBCCAFFC3B5BCCACACABCCACA%FFCAFFBCCAC3BCC3FFFFFFCAC9C2C9C9CFC9C9C2FD3AFFCABCBCBCB5BCC3%FD11FFCABCB5BCB5BCFFC3B5C3B5B5B5BCFCBCFFC3FCB5B5BCFD05B5C3CA%B5FCB5B5B5BCFD05FFC9C9C2C9C9CAFD39FFC3BCB5C3C3FD14FFCAC3CABC%CABCCACAFFCAC3C3C3B5C3FFFFCAC3C3CAC3CAC3CAC3CACAFFC3CAC3CAC3%CAFD08FFC9C9C9CFFD35FFC3BCB5BCC3FD24FFFCBCFD1EFFCAC2C8C9CFFD%21FFA8A87DA8A8FD09FFC3BCB5BCC3FD24FFA852596F76527DA8FD1DFFCA%C9C2C9C9FD1CFF7D522752527D525227527DFFFFCABCBCB5BCC3FD25FF52%27527D7DA87D7D5252277DFD1EFFC9C9C2C9CAFD18FF27527DFD07FF7D52%27BCBCC3CAFD26FFA8277DFD09FFA82752FD20FFC9C9C2CFFD06FFA87D7D%7D527D7DFD08FF277DFD0BFFA8F8A8FD10FFCAFD05FFC3C3C3CAFD0DFFA8%F8A8FD0CFF5252FD21FFCFC2C8C2CFA87D2752527D7D7D52522752A8FD04%FF277DFD0DFFAF27FD0FFFC3CACAC3BCC3CABCB5C3B5BCC3C3CAFD09FF27%A8FD0EFF277DFD0AFFCAC9CAFD15FFCFCFC27552A8FD08FF7D2752FFFF7D%52FD0FFF7D52FD0EFFCAFD04BCFCCAC3CAC3BCB5C3B5CAFD08FF7D52FD06%FFA8A8A8FD06FFA827FD0AFFCAC2C9C3C9C3C9C9CFCAFD0FFFA8277DFD0B%FFA82752FF527DFD06FFA8A8A8FD06FFA852BCBCC3CAC3C3C3CAFD06C3BC%BCBCC3BCB5BCC3C3C3FD05BCC3BCC3BCC3BCC3BC937DFD06FF7D7D27A8FD%06FF7CC9C9C9CFC9CFCAFFCFFFCAC9C9C9C2C9C9C9C2C9FD0FFF2784FD0E%FF527D52A8FD06FF525227FD07FF27B5FCC3BCC3BCBCBCC3BCBCBCC3BCFD%16C3CA767DFD06FF527D27FD07FF4BCAFD06C9C2C9C2C9C2C9C2C2C2C9C2%C2C1C9C9CACACFCAFFCAFD06FF7D27FD07FFA8FD07FF7D527D52FD06FFA8%7DA8FD06FF7D52FD25FFA827FD07FFA8A8A8FD05FF7D52FD0CFFCFFFCFCF%CACFC9CAFD04C9C2C9C2C9C2C9C2C9C2C875A8FD06FFA85252FD07FF27A8%27A8FD0EFF277DFD25FF832752FD0DFFA827A8FD1BFFCFFFCAFFCAC9C276%7DFD06FFA85252FD07FF27FF7D27A8FD0CFF5252FF83AEFD22FFAE835827%52FD0BFFA8517DFD23FF7D52FD08FFA8FD06FFA827FFFF7D2752FD09FF7D%2704FF835E58AEFD20FF8333835E102D277DA8FD05FFA8A8522728FFFF78%7EFD21FF277DFD0EFF27A8FFFFA9014C27527D7DA8A87D522752A8833383%5E5E585EFD1DFF838383335E1033FFCB52522753767D525227A7FF2A0254%7E7EFD22FF277DFD0CFF277DFFFFFF7E23A2FF7D7D5275527D7DA8FFFFFF%A8105E835E5883A8FD1BFF5883835E33AEA8FFFFFFA9A899997DA8A8FFFF%FF7E29297E297EFD22FF27527DFD07FFA852277DFD05FF54FD05FFC1CFFD%08FF585EA883335E83FD18FFAEA8FF58335EFD08FFC1C9FD08FF5478784D%7FFD22FF7D52275252A87D7D275252FD07FF54A8FFFFFFCAC2C9FD09FF5E%33585E5E83FD16FFA883585E833383FD08FFC9C9FD09FFA84E787E54FD25%FF7D7D757D7DA8FD09FF54A9FD04FFC9CFFD0AFFA83333AEFF8358FD13FF%835E33AE105EAEFD08FFCFC2FD0BFFA94E545454FD25FFCFC1C9FD0BFF7E%53FD04FFC9C9FD0BFFAE5858A8588333FD0FFFA8AE83585883335EFD0AFF%C1CFFD0CFFA8294DFF7E78A9FD22FFCAC2CFFD0BFFA878FD04FFCAC9FD0D%FF83335E835E58A8FD0CFFA85E5883AE8333AEFD0AFFC9C9FD0EFFA8547E%78547EFD22FFC8CFFD0DFF29FD05FFC2FD0EFFAE33838383585EFD0CFF58%AEA83333FD0BFFC9C8FD10FF7E29A87E78A8FD20FFC9C8FD0EFF547EFD04%FFC9CAFD0FFF585EA883FD04FF7D7D527D7DFD05FF835E5EFD0CFFC8CAFD%11FF7E4EA85454FD1FFFCFC2CAFD0EFF7E54FD04FFC9C9FD10FF5E0A33FF%52272752527D525227277DFF833383FD0CFFC9C2C9C9FD11FF544E784E7E%FD1BFFCAFFCAC2C9FD10FF29FD05FFC2FD11FF5E33277DA8FD07FFA85204%58FD0DFFCFC2CAC2C9FD12FF544E4E4EA9FD17FFCACFC8C8CAC8C9FD11FF%5478FD04FFC9C9FD10FF7D27AEFD0BFFA827A8FD09FFC9C2FFC2CFC9C8C9%FD12FFA901297EFD17FFC9C8C2C9C2C1C9FD12FFA94EFD04FFCAC9FD0FFF%A827FD0EFFA827FD08FFC9C9CFC8C9C9C9CAFD11FF7D5227522852275252%A8FD10FFCACAC9C8C9CFC2C8CFFD14FF4D7EFD04FFC2CFCAC9C3FD0BFF27%7DFD0FFF527DFD06FFCFC2C9C9C8C2C1C9FD10FF7D27527DFFCFFFA8FFA8%7D2752A8FD0DFFC2C8C2C9C9C9C2C9FD16FFA929FD04FFCFC2CAC9C9FD0B%FF52FD04FFA8A87D7D7DA87D7DA8FFFFFF7D52FD05FFCFC2C8CAC9CAC9C8%FD10FF7D27A8FD0AFF7D27A8FD0CFFCFC8CAC9C9C8FD19FF547EFFFFCFC9%C9C9CAC2FD0BFF27FD04FF7D27527DFD0427A8FFFFFFA852FD04FFCAC2C9%C9C9C2C9C2CFFD0FFF7D27FD0DFFA827A8FD0BFFCAC9C2C9CAFD1AFFA94E%FFFFC2FFFFC9CAC8C9FD0AFF527DFFFFFFA8A8FD067DA8FFFFFF527DFD05%FFCFC9CFC8CFC2CFFD10FF27FD0FFF7D52FD08FFCACAC2C8C9FD1EFF5454%FFFFC9CAC9C8CAC2C2FD09FF7D27A8FD0BFFA8FFA827A8FD07FFC1CAFFCA%CFFD0FFF527CFD06FF7D7D52A8FD06FF27CACAFFC9C9C3C9C2C9C3CFFD21%FF29A9FFCAC2FFC9C9C9C8CFFD09FF5227A8FD0BFFA8277DFD07FFFD04C9%CAFD0FFFC9A07DFD06FF7D2752A8FD06FF7CC2C9C8C9C9CFCAFD25FFA923%FFFFC9C2CFC2CACFFD0BFF522752FD08FFA852277DFD05FFCFFFCAC2FFFF%CAFD0DFFC9C9C2CA767DFD06FF7D7D7DFD07FF27FD2DFF7E4DFFCFC9C2CF%C2FD0DFFA87D2752527D7D7D5252277DFD08FFC2C8CAFD0DFFC9C9C2C9CA%FFFFFF27FD0FFF5252FD2EFF5453FFC9C2CACFC1FD0FFF7D7D5258042DA8%FD09FFCFC1C1C9FD0AFFC9C9C2C9C9FD06FF7DF8FD0DFF7D27A8FFFFFF53%547EA954A9A8FD25FF4E7EFFC9C9FFCFC2FD13FF5E5EA8FD07FF7EA198A0%A8FD07FFCFC9C2C9C9FD0AFF7D27A8FD0AFF5227A8FD04FF7E784E295429%54FD25FFA829A8FFC2C9FFCAC1CFFFFF83335EAE83AEA8AEA8FF835E83AE%AE83335E3358FFA852272752527D5252277DA8FFC9C9C2C8C9FD0EFFA827%5252A8A8FFA8FF7D5227522929A8FFFFFFFD077EFD26FFA829A9CEC2CAFF%CFC1CFFF833383335E3333835EFD0483335E3383FF5E102D277DA8FD06FF%A852279FC1C2FD13FFA87DFD045227527DFFFF7F027EFD30FF7E5429A2CF%CAFFFFCFC1C984FFA8AE838383A833FFA8FD0483AE83FFFF2D2DFD0BFFA8%2751FD17FFA8FFA8FD07FF297EFFFF534E7EA9A8A9537EA2A9A87E53A8A2%A97EFD1BFFA954FFA84EA8FD05FFC2C9FD11FF7D52FD0EFF2E7DFD21FF29%A3FF54294E4D78295429547854294E29544D2AA2FD1BFFA2547E7E297EFD%05FFC9C2C9FD0EFFA827FD0FFF7D27FD22FF23297EA97EA9537E7EA27EA2%78A97E7E7EA97EA9FD18FFA954A9FF7E29787E4E54FD05FFCFC9C2FD0DFF%7D7DFD06FFA87D7D7DA8FD05FF27FD22FF53017DA8FD28FF537E7EFFFFA9%5354535429FD06FFCAC2C9CAFD0AFF7D52FD05FF7D7D27277DFD06FF52A8%FD1EFF7D272751525252272752A8FD24FFA9787E7EFFFFFF547E787E29A9%FD06FFC9C8C2CFFD08FFA852FD06FF52A8A87DA8FD05FF27FD1DFFA85227%A8FD06FFA8A82752A8FD24FF53787EFFFFFF7EA9FFA92954A9FD06FFCAC2%C8C9CFCFFD05FF277DFD0EFF2E59FD1CFF7D277DFD0BFF5227A8FD24FF53%5454FD07FF544E7EFD07FFCACAC8C9C2C9C9CFCFCA26A8FD0CFF7C4BCAFD%1BFFA827A8FD0DFF7D27FD23FFA9A8542954FD07FFA84E29A9FD08FFCFCA%C9C9C2C8C2C92752A8FD08FFA82775BAC2C2C9C2FD06C9CAC9CFCAFFCAFD%0CFF5252FD0FFF277DFD24FFA97EFD0AFFA94D54A8FD0FFF5252527D7DA8%7D7D525227A8FFCFCAFFCAFFCACFC9CFFD06C9C2C9C8C9C2FD06C9CAC9CF%51FD07FF7D7D7DFD06FFA852FD32FF7E4E29A9FD0FFFA8FD05527DA8FD13%FFCFFFCFFFCACFCACAFD04C9C276A8FD05FFA852F852FD06FF7D52FD34FF%A94D5454A9FD34FF27A8FD06FF7D7D7DFD06FF7D52FD36FFA87E294E537E%A8FD30FFA727FD0FFFF8FD3AFFA9A354544D7E787E7EA9A9FFA9FFA9FFA9%FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9%FFA9FFA9FFFF5252FD0DFF27A8FD3FFF7E7E545453544D544D544D544D54%4D544D544D544D544D544D544D544D544D544D544D544D544D544D544D54%4D544D544D29277DFD08FFA87DF87DFD72FFA82752527D7DA87D7D522752%FD76FFA87DFD05527DA8FD1AFFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:16:18        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2011-03-22T12:23:40Z</xap:CreateDate>
         <xap:ModifyDate>2011-03-22T12:23:40Z</xap:ModifyDate>
         <xap:MetadataDate>2011-03-22T12:23:40Z</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>152</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAmAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FWFed/P8Ae6Zqlr5X8sWC6z5x1CMzQ2juY7a0tweP1u9kUEpFy2UD4nOwxVLY&#xA;/wAqNX1k/WPPHmvUtVmf+80zTZn0rTUB/YWK2KzSU6cpJSTiqt/yoP8AKkLRNHljcdJUv79ZR7+o&#xA;J+dfE13xVDz/AJc+dfLwN15F81XUnp7/AKB8wyNqFlIB0RJ2/wBKg+Ydvliqf+Q/PsPmeK8tLuzk&#xA;0jzLpLiHWtDnYNJbu1Sjo4ossMgFY5F2YYqyrFXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXnP5SRxXWr+fdZuPj1efzHdWNw7GrJbWCpFaRey+kfUH+viqb&#xA;fmb57vfJmk2t9baU2rPez/UoII3Kt9aljZrZDRJPhkkTgW7EjFWDx/8AORnquRF5emdLz0ZNFk9Q&#xA;8Z4HuWWSWVghEPC19OdQa8uXEbjFXoP5decX82+W11aWGG3nE0kE0NtN9ZiVoz0EwVEk2I+JOSns&#xA;cVSDzPDHZfnZ5JvbMBLvVrLVbDU+NKyWlvElxEX7n056AH/LxV6NirsVdirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVUbu8tLOBri7njtoE+3NK6og+bMQMBkALLZjx&#xA;TyS4YAyl3Dd4Xe+e4tH/ADavtR8j2k/mC01aFG8y6ZZqJEma2QBLyydSazKlY3QgI9B8XKmYsdbC&#xA;U+AWfdyd9l9mdRi0v5jIY4wP4ZWJeQquZ6bvUvK35k+RvNY4aTqkEt4hpNps59G8hkBoVktpeMqs&#xA;rbfZpXocy3nWSiCEAARqAAABQbAbAYqw/wAx/mr5F8tsunJdrqOsueNp5f0lRd3sjk/ZWCGvDvu/&#xA;Ee+Ksf8AIKX15521PzN5weO38wyxfUdK01G/cWFiHDmFXfg0k8r/ABStxpsANtswMXaWKczDeMh3&#xA;0P0ufl7OyQgJ7Sie7f8AQ9TzPcB2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kux&#xA;VA61rVho2nvf37MlujIhKI0jFpGCIoVAT8TMBkMmQQFlydJpJ6jIIQ+rfrXLc8/Ji15+bGiWrsZL&#xA;S4aLgDH6fpvI8pMX7viG4D4bmMgl99x1G+PLWRHQ/j+13OL2bzTG0o3fW6r1b8r5xl0ZQdd0hNLh&#xA;1We7itrCeJJo7id1iXg6hlJLkDocyPEjw8ROzpvyeU5DijEymDVAXuPcx8/mVp165i8t6fe+YZQe&#xA;Pq2kXp2obwe6nMcX/Ak5R+aB+gGXu5fN2n8g5MYvUThgHdI3L4QjZ+dLRa/mbq55XN3Z+WrQ7+ja&#xA;J9eu6Hs0soWFT7qhxrNLmRAeW5/UnxOzsH0xnnl3y9EP9KLkfiQrWn5ZeWFuFu9UWfXr5fs3OrSt&#xA;dEf6sbUhX6EwjSQuz6j57sMnb+pMeHHw4Yd2McP2/UfmyWKys4ZBJFBHHIEEQdEVWEYJYJUD7IJJ&#xA;pmQIgOollnIUSSLvn17/AHpL5l/L7yP5n+LzBoVlqUtKCeeFGmAHZZaCQfQ2Free2X5MflnN551X&#xA;SJdFWTTbaws54bZp7kqJJZJlcmslWBEa/CxIzHjI+KR0ofpdxmxRGgxyAHEckxfWgIdXpfl3yf5V&#xA;8twGDQNItNLjYASfVYUiZ6fzsoDP/sjmQ6dH3GnWFyHE9vHKJKc+Sg1oKCvyyqeCE74gDbbDPOFc&#xA;JIpL/wBBXFp8Wk3r26j/AI9ZqzQfIBjzX6GzF/Jyh/dSMfI+qP6x83K/ORn/AHsRLzG0v1H5O/TN&#xA;/abarYsqDrd2tZovmVA9RfuOP5qcP72P+dHcfrC/lYT/ALqXwlsf1FMbO/sr2P1bSdJk7lCDT5jt&#xA;9OZWLNDILiQXFy4Z4zUgQhrvXLC0vBbTlkPD1Glp8CgV6mte3h4eIyrLrIQnwy7rvo24tJOcOKPf&#xA;VdUejq6K6mqsAQfY5kg2LcYijTeFDsVdirsVdirsVdirsVdirsVdirsVdirsVdiryrztrMt5q99E&#xA;b5E07S29MhrptORXuIJEPKQsnOS3nhWRfhY8ZNgds1uedyO+w86/FH73tOydKMeKB4Tx5N/oGT6Z&#xA;A8qNRnGRidxvHekFouratqHly58tW9hN5n02SOSOK9tYns42aWQy8vrd36ca+mT8ISJ+gNexjjnK&#xA;UDADjHy+0/qcjV6bFi1EdRKY0+QEExkRM7CvohZ9XW5R6sgHkjzXq08s+pTafocM6oj22nwC7m9N&#xA;AVVTNcj0o2ANCY4d/oGXfl5yNmo+7f7/ANTrD2tpsAEcYyZiL3nLhFn+jD1H/OknOm/lp5StJ1ur&#xA;m2fVr9RQXupyNdy7dKCSqLT/ACVGWx0sBuRxHz3dfn7f1Uxwxl4cP5uMcA+zc/EllCqqKEQBVUAK&#xA;oFAAOgAzJdOSSbLeKGHa3+YYstY/RWm2UepT8oUEn1lYow0i3jSKzcJApj+oMCPE02pmLk1NS4QL&#xA;+Pv/AFO+0nYniYvFySOMb/w2dvDrqPq8QfAdbVtI8/2uqeV9U1+G1ZY9OjeZbdnHORUtY7oVoPgr&#xA;6vHvTDDUiUDKuX6ra9T2LLDqceAy3mQLrYesw+PK+iTRfnBDF9UfVNLksYrhDNIxaUukQjuZA3py&#xA;wQs1fqhA+f31DW1VivwfLydhL2YMuIY8gmYmum5uA5iUq+v7PkBg8/aPb/mFJeCG5lg1mzsLaD04&#xA;JHZGEt1yLqqt0KUp36ioBOQGpiMt7+oD9LkT7Gyy0AhcQcU8kjchvtj5fP8AQd2R+bPzBHl7XbDS&#xA;zp7XUd2sbzXKuVESyTCGp/dsgArWruo98vzangkBXN1XZvYv5rDPJx8JjdCudR4u+/kJIW9/N3y7&#xA;Dpz3cENxK/omWGN09NWPB5VQv8fEtHE7jboMjLWwAsN2L2Z1EsnDIxG9He+oF1tdEge9FJ+afleS&#xA;cW8QuZJ39ARRrCSXNz6fpAGtKss8bb02b2NJfm4XW/8Aa0n2d1IjxHhA9XXlw3f+5kPh5i3ah+ZG&#xA;k6dr1zo95bziaGWOKF4V9QSGRbfqPh4/HeRp3wy1UYyMT+OX60YewsuXBHLAxogk3tVcfz2hIpd5&#xA;a8z+W/NsluTZS6Zq1zG00ckRINFWOSgnQIGcRTxswK0Fab0zEjDFmN1wz7xsfm5Wv7P1GiB9QyYo&#xA;mt/iPpN0OKMgN+nRN7zy9qSSmaq6mu2zsYJ9qAUIrEx4ihLLuNsry6HIDf8Aef7GX/En4jk4OLW4&#xA;yK/u/wDZR/4ofA80uglktLiMvNJDcrI0gt7gCBmLmNXKliYXJQP+0Nz9GYkJGEhZIld1L086uv4T&#xA;tfXq5c4icTQBjVXH1crq/wCIb106Mk0a91W4eZb+3EPphODAMAxI+KhJIYVHUdqZt9JlyzJExVU6&#xA;jVYsUQDA3dppmY4bsVdirsVdirsVdirsVYdrv5wflzot+dNutZjuNUWoOnWCS39yGXYq0VqkzIf9&#xA;amKpf/yuvy6g9SfRfMdvadr2XRNQEJH81RETQjfpiqeeVvzJ8i+anaHQdat7u6SvOyJMN0tOvK3m&#xA;Ecy/SmKprrHmHQtFg9fVr+CxjoSpnkVC1P5VJqx9hkJ5YwFyNOVpdFm1EuHFCUz5D8Ux7/lYN1qI&#xA;p5X0C+1YN9i8mX6hZkeIluArt/sUOUfmTL6ImX2D7XafyLHF/jOWGL+iPXP5R2Hxk79B/mFqw/3L&#xA;a7Do9ux+K00aKsnHwN1cBiD7rGMfDyy+qXD/AFf1lfzmhw/3WI5Zfzsp2/0kf0yKM0v8ufKGnzi7&#xA;NiL7UOrahqDNeXBP83OYvxP+rTJQ0sIm6s953aNR25qsseHi4IfzYeiPyjX22yXpsMyHUOxV2Kux&#xA;V2KpTdeUvK136v1rSLOb6xMLmf1II25zAFRI9V+JqMdz45UcMDzAc3H2lqYVw5JjhHCKkdh3DybH&#xA;lnyvBNc3o0yziluIWhu5/RjUvAVAZJGpunFRUHbD4MLuhug9o6gxETknwxNgcR2PePNg+q/mf+WN&#xA;zfva6Xpc3nDULRfQkTRNPOoLEoV09M3FFtlHGV14+p+0fHCccTzAYQ1maAqM5AE3sTz2N++wPkGK&#xA;6JceYNG873vmZfI/mUaFLCsdjpUX1NmhIrv9XF3TiCzcEH2ebeG+Nj0vDlMv4a2H4/G7u9Z24M2h&#xA;hhI/e8R4pVuR037ztxf1QzGz/MP8q/MOvWlrrFqNM8zRkCysvMFk1ndgg1X0WuF4MeXQRucyZY4y&#xA;NkAl0uHW5sUDCE5RjLmASAfezJvK3lluPLSbM8Ivq6Vgj2hNf3Y+H7O52weDDuDIdo6gf5SfPi+o&#xA;8+/3ro/LXl2Of6xHpdok4KsJVgjDAo/qKQQK7P8AEPfHwoXdBB1+oMeE5J8PdxHqK+7ZfPoGhz3R&#xA;u59Pt5Losrmd4kMhZTGynkRWoMEdP9UeGE44k3QtjDWZox4BOQj3Wa6/8VL5nvdY6BodhP8AWLLT&#xA;7a2n9JYPVhiRH9JAAqclAPEBQKewxjjiDYAXNrc2SPDOcpRu6JJ3PX3o/JuMsnt4LiIxTxrLG3VH&#xA;AYH6DkZwjIVIWGUJyibiaKVny+bY8tKu5LE9fQ/vYD/zzc7f7EjML8lwb4pGHlzj8j+hzPzvHtli&#xA;J+fKXzH6Wv0pq1ntqViZIx1urKsi/Noz8a/jj+Yy4/7yFjvjv9nP70/l8WT+7lR7pbfby+5HWOqa&#xA;ffIWtJ0mp9pQfiH+spow+kZk4dRjyC4EFxs2nyYz6hSKy5pdirsVdirsVeXau2sfmP5p1Py1Z3k+&#xA;meR9BkFrr15aOYrnUb0qHexilG8UMSsBMV+JieI23xVnnlzyp5a8tWC2GgaZb6ZaKAPTto1TlQUq&#xA;7D4nb/KYk4qmuKsa84/lx5Q83RL+mLFTew0NpqsB9C+t3XdXhuEpIpU7gVp4g4qwb8s9Es/LvnPU&#xA;PJvmG0h1DXreH9J6J5mnT1Li+sGk4P6jOX4T28jBH4kcgQ1PGmOnhE2Bu7LP2xqssBCWSXANqHpH&#xA;yFB69lzrXYq7FWLeYvPdjoGsyWl+0awDT3vII+QFxPMjlfRhViA7MBsBvXMbLqBCVHut3Oh7Hnqc&#xA;QlC78QRP82Ir6pdyW6Z+a9hf6rYaati6yXsghEolRoyxaVeULD++QegeTL0JAyENYDICuf7fnycv&#xA;Uezk8eKeTiFQF1Rv+H6v5p9WwPOik9/+Zvm6ztr29ksLZbJL+7stPdkakotFuyTyWdmqDaryrGvX&#xA;avUVS1cwCaFWQPhfn5Ofh7A0uSUYCcuPw4Slvy4vD/of0zXqPn3E30v82bDUL2wtlsJYRf3klkjy&#xA;SICrRiMiqCr8v3o5AgcfHpW2GsEiBXM04Oo9m54oTlxg8EBLYHrfXl02PXu5s8zMeadiryzU7K6/&#xA;M3zfqei3Uzw+QPLMy2mo2sLNG2qalwEkkMrqQ31a3V1DIPtP4gbKvS9O03T9MsorHTraKzsoF4QW&#xA;0CLHGijsqqABiq/63a8xH60fMsUCchUsACVpXrQ9MVQXmHy1oHmPS5dL12wh1GwmFHgnUMP9ZT1V&#xA;h2ZSCO2KsG8mT6t5N85r+X2p3c2o6JfWsl95R1G6YvOiW7AXGnyyHeQwh1eNv5Nj0FFXpeKuxVLd&#xA;Q1uGxu44JYz6bLyeatFWpP47Vp18K5iZ9WMchEjbv/H47rcvBpDkiSDv3fj8d9N/4g0gIrm5Wjcd&#xA;u45KWHIdtlOP53FV8SPyWW64UbHcQSmkcisakEAitVNDt7ZkRyRPItEoSHMKmTYOxVA32iaZeuJJ&#xA;oQJx9m4jJjlB9nWhzGzaTHkNkervGx+bk4dXkxigfT3HcfJj/mjX38laPLq+o6nHNpcJVBFdBvrD&#xA;u5okULRBmlkc9F4E5T4efH9MuMd0uf8Apv1hu8TBk+qPAe+PL/S/qKTC3/ODzVK836Qg8kaEzH6t&#xA;DBALzVZo67PI1wFht+a7hfTLr0bfpmwJIBIouFMAEgGwrD8nY2BNx5081zzdpf0tJDQ9aiOBIovo&#xA;KkZJipyeQvzH0as3lbzxcXvH4v0Z5lijvoZCOi/WYVguYx7jl8sVTDyb+Yzarq83lfzFpzaB5wtY&#xA;vXk0139WG4gB4/WbOcALLHXqNmU7EbVxVLfyguYrK783+WLkhNY03Xb68mRv7ya11KU3Vtc+4dZO&#xA;FfFcVej4q880Hyr5/tvNFvd6hfq+k2lxNVRdzSNPE7X8iO8TIqqR9dhTiWP9312XFXoeKvJPPWnP&#xA;5x/NjS9D0fUZ9OuvLuk3s+q6pZn4oG1JoUtrdiCKNIIHcrUNx7gHevLAziQDTmdn6qODNHJKEcgH&#xA;8MuRZFo/5a6hY6Va2knmzWQ8EaowglgWKoH7CvA7AfNj88x4aUiIHHL7P1O31Xb0MmWUxp8NE9RK&#xA;/jUwPsCN/wABXn/U269/yPtf+ybJ/lz/AD5fZ+px/wCWYf8AKPg/0s/+La/5V/M3955q16SnT/So&#xA;kp/yLhSv04/lv6c/n+xP8tAcsGAf5hP3yLR/LpCwY+ZNdLDoTe7j/hMH5X+lL5r/AC4f9Rwf6T9q&#xA;Fk/KbSZbyG+k1nV3vLcUguWulMiDcfCxjqPtH7zkTo43fFK/e3R9pMogYDHh4Jcxwmj8OJFf8q4t&#xA;22k8w67IBUgfpCRKE9T+7CHJflR/Ol82n+XZDlhwD/kmD99u/wCVbWNa/pvXajcH9KXPU/7LD+VH&#xA;86X+mK/y9P8A1LB/yqh+pd/yrmz/AOr7r3/cUuv+asfyo/nS/wBMUfy7P/UsH/KqH6mv+VbaY202&#xA;r63On++5NUuytfHZxj+VHfL/AExT/L2QcseAe7FD9TGfyh1TTNM8yebvJP1hXu7fUptU09y3Nriz&#xA;ueKsS5JZ5IJkaKUt8VaV65biEQKBunUZ9WdRM5Dw2f5oAG23IbB6nljU8r0z8l7my8z6FrMl1p0y&#xA;6JLdtzWykiurkXTwuJ7mZJ6S3K+iRzZeJrXjir1TFXm2r3a+ZPzi0zSNOcmDytY3U+u3kRoYptQE&#xA;SW1skg+JJWWNpGp+xseuVZsQyCiSPcabcOUwNgA+8WzT/D9Psalfr4fv+VP+DVsxvyXdPJ/pv1uR&#xA;+d74Y/8AS/qd+hr9f7rWLoU6cxC/31TfD+VmOWSX+xP6F/NQPPHH/ZD9KFuvLd/ctzl1FZX4lA8l&#xA;tEW4mu1UKeJp4ZTk0E5mzO/fEfopux6+EBQhXukf02hP8H3yiQLdQy+pu/OOVeWzKQSsvQiRhmP/&#xA;ACXMX6om/I+f9LzLf/KkDXpkK8x5f0fIN2/l3Xba/jvYpLR5Ig2x9VQ3MsW5E8zWrneuGGhzQmJg&#xA;wse/rfv71nrsM4GBE6Pu6V7u5NPX8zp9q0tJO/wTuv0fFHmbx6kfwwP+cf1OFwaY/wAUx/mj9bv0&#xA;hr4+1pCn/UuUP/ElXB4+f/U/9kP1BfAwf6p/sT+sqc+t6pDBJJJo8y8ELVEkLjYV34vkZ6vJEEnH&#xA;L5x/WyhpMciAMkflL9TBUkHmr84tIXVLd4Lfy7o76rZafLWhvbm4NuLniQAwjjjIQ9QzE7d7tJqD&#xA;lhxGJj72nV6cYp8IkJe56nmU4zA/P/5mS+VNY0+wFnBLDdtCZ7me4MPBJZHQ8I1SR5X+DZUBO9aU&#xA;UnFWeYq83/PW2itfKlt5sgAj1rytf2d7ptx9lv3tzHbzwFhvwnilKMvfbFUn/wCchwNA0i089aL9&#xA;ZtfOOnyx2llfWic1e2kflLBepRlkt6VIDUo5FCK75mh0nj5OC+HZUy0r8zPP9lp9tL5p8kXt0k8S&#xA;Spqfl4C7icOob4rOVoryEitChViDmLOPCSD0VHf8rn0VkAh8v+ZJ7mrB7NNGvPWQrT7asihQ1RQk&#xA;0/HKxMEkXuGRgQAa2KFn8w/m35qRrby9oX+DrCUUbXddMUt4qnYmDToWkHMdR60gX2yTFjunWuoe&#xA;SNIbyzdxzw61qV6Lm78xRzkvrJYkvS6lKGK4NFHpll+EHgakZr8uaY9MtjfTr7u4urz6jIPRIUb5&#xA;jkR5HofwGS+WvzCu7WeLS9bglWKJGM9/KWdoWUysyySceEkcPD0DLy5NIOhrXDi1JB4ZfP8AHdyv&#xA;vTg1hB4Zj493P7uV970aORJEV42DowqrKagg9wRmfbswbbxV2KuxV2KuxV2KvN/M/wCYOsSaH9Y0&#xA;iGG2Sczn1pplEq2kTCF5tyiQuJWCfEW4tSopWmBm1MuG4/gfodZn1kuC47c+vTlfluwWHyBr/nLX&#xA;dJv7RJdI0i2HrW/mKDnDc/WYofTe5t1lcycbo8S3MfvKVflTerTjIZgx2h18/n3tGlGYzBjtj6+d&#xA;dd/53fzZ0mp/nZ5cX0L7SLLzraRikepWFwmmXpUftT21xWAt/wAY5QPbNo7pfB+a+vXcRFj5B1q5&#xA;uVJDIsum+kp/ZrMLpl3+WU4tRDJfCbpuy6eeOuIVanPH+dXmlTbutn5D0qTaaWOUanqxXuI2UJaw&#xA;8h+1VyvbLml5x+XfnzV/LGl3PkuTQo9B1aK5k+v+YGW5uWlXnJDNqbW7pJPct6sXANzKcyteK0Gb&#xA;6fZmIVOEuKPdtz50T07/AHcle0/l15wh80+WLW/M0cl8qKt8sQKgORUPwJPESL8VKmm61JU5q9Zp&#xA;ziyEdOisnzFV2KuxV2KuxV2KuxVgP5keXfMUeqaX548pwi71/Q0lgutKZhGNR06cq0ttzOyyIyCS&#xA;Inbl1riqc+TvzF8q+bYnGl3fDUYKrfaPcj0L62dTRknt3o68TtWnHwJxVkbwwuVZ0VipBUsASCOh&#xA;FcVQ+qatpek2Ul/ql5DY2UIrLc3MixRqPd3IGKvLzqF5+bGvaeun28kP5a6Rcx30+pzI0Tavd2zc&#xA;4IreNwG+qxyAO8hFHI4jpXFWWfm9psuo/lj5ltoa+sthNPEB15249daU78o9szOz58OeBP8AO+/Z&#xA;WQ6Hqceq6Jp+qR0Md/bQ3KFenGaMOKV/1sx8sOCZj3GlS2zsUt/N93J6sjPcWyzUYih+MoVoANlo&#xA;tM1GLCI6uRs+qN/bX2bU7PLmMtLEUPTKvsv7d7T/ADZusQuqaVp2q2EthqNul1ZzjjLDIKqR/Ajs&#xA;RuMjOAkKIsMMmOMxUhYeVedPJmt6RaMUmn1PQI1URz7y3tmkZLIslPiuIELEqR8cZ+IV4jNbnwSi&#xA;O+P2j9Y+51Gp004DrKH2j9Y+0Jz5e1y30PSoo9Ijt9T/AEkJ9SitbOcpaW9rAscRigeReTuWp8HF&#xA;SXZq8ctxZBCPpo3vtyA8vxzb8OUY4+mpcVnY7ACuX45s70rVdP1WwivrCdLi2mFUkjZWFe4JUkVH&#xA;QjM2ExIWOTsMeQTFg2EXkmbsVdiqT655q0fSLGS5lnjldH9JbdJIw7SBlVl+JgF4cwXJ+yNzlWTN&#xA;GItpy6iMBZLzPXfPXmG/MMqq8DyXMM2h6Xb8ZZLwRTIzIygKxAMZrKr+mBXrUZr8monL57Dv/Hfy&#xA;dVl1U5fMcIHXf8b8mTaN+Xf6Q1V/MXmq1tVvJnE0ejWqL9XicVKvcOAPrUwr9pvhBrQZkQ0vFLjm&#xA;Bfd0+PeXKx6Pilx5AL/mjl8e8s+6bDM12KW65fSwQpa2oD396TFbodwNvjkb/JQb5iavMYgRj9c9&#xA;h+k/By9JhEiZS+iG5/QPiqaNo1npNr9XtgaMQ0jk1LPxClvatOmS0ulhgjwxY6rVTzS4pI7MlxmL&#xA;efvItt5p0+JoZvqGvaeWl0bVkFXglIoysP24ZR8MkZ2Zcy9JqjiO+8DzHf8AtHQq8a8k3mqaL5+g&#xA;0610F4dcjnFrqGkxyS/VoEegluVL7vG8a8oJXbjHGoiVC1Tm61UYzwmRl6KsHqfL9Y6n1Wh77pfm&#xA;LQ9Vub61029iurjTZRDfRxtUxSGux+4io7gjqDnPTwzgAZChLklMcrV2KuxV2KuxV2KuxVjXmr8t&#xA;/I/mt0m13SIbq7ip6N8vKG6SnQLcQmOYD2DYqw3UPy1Sw1W00zTNf8zraXKEzxx6vcv6MYcDlFzZ&#xA;2WnQ+3TffNfqdTOOaEIiwdz7uTsNNpoSwznI0RsPfzTzT/yS/L23vU1C+spte1GM8kvNbuZ9ScHq&#xA;CFuXkjBHiFrmwdezsAKAAKAbADoBiq2aKOaJ4ZVDxyKUdT0KsKEYQaNqwX8mJ5YPKUvlu5Yte+Vb&#xA;240eYk7tHA/K2eng1vJHTM/tIXk4xyyAS+fP7bVkurEW2raZfdEZ2tJj7TCqf8Og+/NDqfRlhPz4&#xA;T8eX2hztN68U4eXEPhz+wpvmc4LsVdirAPNX5ZW0s8uqaDbW31qQs95pF0gNndFl4uy97ecr0ljp&#xA;v18cws2kBPFEC+7of1Hzddn0IJ4oAX1B5H9R8wxvyrcWp80WujaRc32i6rC7T6xYXYHGC2hCl4BH&#xA;UQzGdmqsyj4UpQAZj4SOMRiTGXUeXd5339zjacjxBCJlGXUHoO7uN9/cyjUPzs/L22vX0+xvZte1&#xA;GNuL2eiW0+pOD3Ba2SSMEeBaubV3SifzktIwHufKPmm2g7zvpEzqo8WWIyOB/scVTjyz+ZPkLzc8&#xA;tjo+rxXF4qkT6dJztrtRT4q28wimFK9eOJCCLYRpulRw6lLpHk9E1HVLO5kWTXXJ+p2trJGI/q9x&#xA;xHC4lCgAov2iqs5rUZq4Qo8OPcg8+gHce900MdS4cW8gfq6Adx7z/aXoHlfyZp2g+pcmR7/WLkAX&#xA;uq3FDNJT9habRxinwxrsBTM3DgEN+cu92WDTRx785Hmfx08mQZe5CncXENtBJPMwSKJSzsewGQnM&#xA;QiZHkGcIGchEcykuhTRXd/PfXLgahMo9G1J+KG22Kini1QzfMZr9HITmZyPrPIfzY/t5lz9ZEwgI&#xA;RHoHM/zpfjYJ9mzda7FXYqwv8x/IEvmK2TUtGuP0d5qsI3jsL4M8aywyf3tpcGMq5hlHcHkjfEu/&#xA;XO0er8M8MheM8x+keY+3kryC28x2Ogajb6zpmjvp02n3K2WoaKAhbTJSv760gRjIzG79EuJ6cWVv&#xA;3aczK67mWE5ImMpXYsS/ndxP9W+XluaoEPorTdRstSsYb6ylSe1uF5xyRsrqR0IqpIqDsd+uc1OB&#xA;iaPMJRORV2KuxV2KuxV2KqF5e21pavdTuEhjHJm/gPEntleXLGETKR2DZixSnIRiNygdFtriSWbV&#xA;bxClzdgLFCesUCmqIfc15NmNpMciTlntKXId0eg/SXJ1WSIAxQ3jHme+XU/oCa5muE7FXYq89v2P&#xA;lb82bXUD8Gj+dYVsLpjsiarZqWtWJ8Z4OUY8SozYw/e6cj+LFv8A5p5/I7qzfVrAX+nT2teLOtY3&#xA;/ldTyRvoYDNPqcPiYzHv+/o36bN4eQS7vu6qGn61by6Sl5dOIXT93cqeqzL8LJQb1r0GVYdXE4hO&#xA;Rroff1DZm0shlMIi+o93Qo63niuIUmiblG4qp6feD0OZUJiQBHIuNOBiSDzCpkmLsVeLDydpP5pe&#xA;dtV1K6tIrXyfo1zLpx+rKsVxrF5EQly9xOlH+rxsDGoU/HvVqbZV4MOLir1NP5eHFx0OLvevaVpG&#xA;laRZR2GlWcFhZRbR21tGsUa/JEAGWtyLxVjnnL8vPKXm+2WPWrFJLmGjWmoxgJd27jcNDMByWh34&#xA;mqnuDglEEUWMoiQIPIsb/K2+1LRNRv8A8uNbETX+hwx3ek6hDGsIv9NmZkWZok+FZY5FKS+Joe9c&#xA;EICIobBEMcYCoig9HyTNKde1Q2qJbRPwnnBpItHZAKb+mKseW4qAadcwdZqOAcIO8vs+HP8AU52j&#xA;0/GeIjaP2/Hl+tIdQ1aeRIbfUG9SC0YG8kVCVeetUicL2jX4nG1SKZrM+pJAjk3jH6tucugPu5y+&#xA;TssGmAJlj2lL6d+UepHv5D5pvoWkypM2ozOyvKXKQksRRwKsfUVWBJXwrTqTmfo9MQfEJ53t7/eL&#xA;/G9uDrNSCPDA5Vv7vca/G1J7myda7FXYqxfzd+ZXlLyrNDZ6jcvPq10K2ejWMT3d9N/qW8IZ6bfa&#xA;ag98VeN/mJ5Z/Mnz95k0/wAwaB5UvtCigRIrpr27tbKa8hWT1FWZYZpJU4/s8lJWv3bXQdojDAwl&#xA;HiB5eXwVmHlTW/NXkbQ4NMu/y71QadDUyXWm3dnqsrOaAsYI/qr0oBtHF06L2zA1GeWWfFJWd+UP&#xA;P/lPzdDK+h36zzWx43llIrw3UDdOM0EoSRN9qkUPY5SrIcVdirsVSSbzZYglbdWnYcwDUKOSryXr&#xA;vRqGm1duma6XaUP4d+f4+LsY9mz/AItuX4+CTXF7d3EQW7lk5XDlorJAWlZSa8UVeJAHxLzJoVbx&#xA;Ga+eWcx6ifUdo9fhy8xfKj5OfDFGJ9IHpG8unx5+RrnY80y0Ly5cRxwyam5f0CXtbLkWjiJNeTbn&#xA;k2+3Ydsy9HoJAA5Dy5R6D9Z+5xNZrokkY+vOXU/qH3sizbOqdirsVdiqQ+efKsXmnyzd6QZTb3Lh&#xA;ZbC8X7UF1CwkgmUjf4JFHTtUZkaXP4WQS5jqO8dQqW+SPOV/r3lSWaa3EfmbSnax1vTm2Md5BQSE&#xA;AdUkH7yOnUECuR7SwnDZx+oEXHzH6x97ZhjGUgJGg1dxRW11663QuBMw+sSoVjaC8IIjcgBvTVx8&#xA;DVHz3zm8kRCXFxcV8zy4Z9D5A/Sft3d1jkZx4eHhrkOfFDqPMjmP1Jj5f1VEZdLnj9KdS7IOopWv&#xA;F2JP7wkk0FffeuZWi1IB8KQqW/4P9Jxdbpif3sTcdvwP6LIM2jq3Yq83/I66itNA1Lyfcfu9a8sa&#xA;ne299C5/ePHc3Ml1b3VOvCeKYEN3IOKqnn7yZ571bWWn0DWDaaZLbo9zZtcTQF7m29RFiR4gxiju&#xA;Irg+o67q0aMB1qqxW7/K/wDN55Lv9G6/+jbC+txCbA393dPbiO4muoUhuJU51qUhdv5GIH2RVV6H&#xA;+W2g+YdE0Cay1yX1rg3Uklu7XUt7L6LKtPWnlWPk/MMfgRVpTblyxVIrK6j1v897q4sPjtPLGiNp&#xA;2o3SH4TeX9zHOtsT0b0ooOTAdCwrir0aVWaN1RuDspCuBXiSNjQ+GCQJFDZMSAbO7D7vTXsbmMsE&#xA;bUZikFiQ7sruCS1w6uTx4cgab/Fmhy4DjkLrxDQjudz/ADjfKvvd9izjJE1fALMthsP5ornf3Iiz&#xA;8vTNfrbTD/Q7StXohMjFkkBLEs3JyCW2BHStMtxaEmfCfoj7t+R99nry+TVl1oEOIfXL37cx7qHT&#xA;n82VAACg2A6DN06V2KuxVin5m+atQ8ueVnn0mJJ9e1C4g0zRIZf7tr28kEURen7KVLt7LirXkD8u&#xA;tJ8o2kkgdtS8w33x6zr918d3dymhJZzUrGKUSMGigDvviqe6tr+iaOLc6rfwWIu5RBam4kWP1JW6&#xA;IvIipxVdo2uaRrdgmoaReRX1jISEuIGDoSOtCMVYp+Yf5dprQXzDoDLpnnvTFMmkavGArSFR/vLd&#xA;dpYJPslW6VqO9VU58hebIvNfk3S/MQi+rNfQcri3J/up42Mc8dTT+7lRl+jFU0uNX0q3B9e8hjp2&#xA;aRQfurXKJ6rFH6pRHxb4abLL6YyPwQf+JLabbT7e4v2PRooysdfeSTguUfn4y/u4yn7ht8zQb/yE&#xA;o/3hjD3nf5CygotB1S5uZLiZk09JTVo4j60wBIYgO3wJuK1Vcxo6PJORkahfdufnyHwDkS1mOERE&#xA;XOu/YfLmfiU40/SLCwDfV4/3j7yTuS8jnxZzucz8Gmhi+kb9/U/FwM+pnl+o7d3QfBGZkNDsVdir&#xA;sVdirsVed+erG98q68v5iaNC81usa2/m/TohVp7FN0u0UdZrWpPvHUbUzZaWQyw8GXP+A9x7vdL7&#xA;1TS6eza2i1bTm+v6HqUSFFiPqJIkpZ6L8LFQxcFSCKHxNBnLa7TywTNg8J2MfibHLbc7URv37O50&#xA;mXxQATU47g/Lfnvy357d26vo8VvDqFtFqK87nh/uOumrSRR1R6hf3sfTcV+nIaWMY5IjJ9Vek9/k&#xA;f6UfNdVKUscjj+m/UO7zH9GTKc3TpnYqwzzp+XR1nU7fzHoOpSeX/N1lH6MGqwqJI5oK8vq15ASF&#xA;niruATVTuDiqWR+efzL0X9z5o8kzaiqbfpTy1NFdRSf5X1S4eC4j+XxfTiqlffntpFlJb28/lnzD&#xA;He3RK29nLZR28rtWlFE80Qb5g0yo5oiXCTRaZaiAnwE0XXMv5yeb0a1htIvIOkSfDNeyyx32rulf&#xA;90Rwn6vAWG3JnZl6gVy1uZl5R8oaH5T0WPSNHiaO3VmlmmkYyTzzybyTzyH4pJHP2mPy6ADFUVrm&#xA;p/ozTnvOIbgyLRqgUZwp6eAOY2s1Hg4zP3fe5Ok0/jZBD3/clehfUtaa71G5CzyS/uVgYchDD1VK&#xA;nbk32mpmFo+DUcWSW5O1fzR3e/qXM1nHp+HHHYDe+89/u6BO7Kxt7OIxQhqFizM7F2JO27NUmgAA&#xA;9s2OLDHGKDr8uaWQ2URlrUl135g0u2k9H1fXue1vADLIT/qpWn05iZNbjgau5dw3P2OVj0WSYuqj&#xA;3nYfaofWfMV5/vPbx6fCf923J9SWh7iJDxB/1myvxNRk+mIgO+W5+Q/SW3w8GP6iZnujsPmf0Bif&#xA;5n6FrkHlhdb0+W41bVNDvLTVnsm40nhsp1lmhijA4q5jUlafFUU75Zj0lS4pSlKX2fIbNeTV3Hhj&#xA;GMY/b8zuzPy75i0fzHotprWjXK3enXsYlgmTwI+yw6qy9GU7g7ZluIgPN3k2z8zLpy3NzLajT7pb&#xA;pWgWLmxXqnqOjvGGGzcCCVqD1xVf5I8p2/lPy1aaBbXDXNvZArFK6RRtxJruIVjUnxNKnviq3zx5&#xA;z0nyf5cuda1Fq+mPTs7Rd5bm5faK3hUVLPI2wAHv0GKpL+W/kdbDyTpEPmG0jl1ww+tqFQPgmndp&#xA;mi22/dc+H0ZiS0GGRMjEEly46/NEUJEAIvQfNv5a38syaXc2ccsDKj+pEbVmLMyLwM6R+oCyMoKV&#xA;FRmaeyfCo+GB7gP0Nc9VllzlI/FPNK8zeXtXoNM1G3u2PqUSKRWf905jc8a8qK60rSmTyYJw+oEN&#xA;CZZUrsVdirsVdirsVdirsVcQCKHpirx241HT/wAtvM17pMLvP5FvVF1qFrArOdBmuXKrLVVIS2mf&#xA;4glaoasBTrtp4PzmH1bZeQP8+v8AfDvZQmYyBHRnWk2M99am0ukD6dIgmtriMpxQ0UxPA6HieQNf&#xA;hFB4muclh0szeLJGo/7k9K/G3nbtc2ohEjJjPq+8db/G/lSPtdTubCdLDV2FW+G1v/spL/kv/LJ+&#xA;vL8eoljlwZfhLoff3FoyaeOQceL4x6j3d4YrBqv5mw6rf3LQLc6U9+9lZ280dHRGuxGk4WONH9JI&#xA;eRZncg7Go3yQnmEiel19rzoyZxImrjxUPnz5cqbsvPPna4lgSXQhaRys6zTzRXKpARGjUkJVdld/&#xA;TZ9lP2h8IajHUZD/AA181jqspq4189vxy+1e/m7zPqnlqx1e1t5dPtL25ZZJ7S3N9cRW6Qniwho3&#xA;L1LheNeNAtD3rh8acoCQ2BPTc/i0nUZJ4xICgT0Fmq7vf9iB1TW/NGsRS6Lf+WFu4WaGP17u1lZD&#xA;yt3d5jGvJQeaigWT4CeJNd8hPJOXpMb948mvJlyTHCYXy5jy5/g7JHqMvnnyT+X9lr2namf0fDBH&#xA;carp+qhUW14UZkie4ZJhzYel6Z5E1+GhpkIwzRgDA35Hp82EceohjicZvvB6fPfyTuy1783fOkCX&#xA;Oi2dt5K0OVQY77VImvdSmBFecVnWGOJOw9Y8j145sokkb7O2iSQCRRRn/Kq9eu4z+mfP2u3sjCjC&#xA;JNOt4K1rUQfVJFr4ZXmwxyR4ZCw34c0scuKJoqC+Tvzb0CNT5d8222swRii6VrtlFEhHfjdWAhdT&#xA;4VjbJwgIigKDCczI2TZXaR+Zut6prUHl2fSRonmiKP1dQ0q7f1AYyxQS28qhFuIR9ovHUjo3HMHU&#xA;5dQJgY4+nqT+L2c7TYtOYE5JeroB+K3Zf+gZ7rfVb6W5U9beL9xD8iE+JvpbD+TlP+9mZeQ9I+zf&#xA;7UfnIw/uoiPmfUft2+xMrSxs7OP07WFIU8EULX5065l48MICogAOJkzTmbkSVbLGt2KvPNR/Ku70&#xA;7V7jXfIGrt5Z1C8czahprRC50q7lNKvLakp6cjU3khZT898VbXzD+dth+6vfKGl6ww63WmaqbZT/&#xA;AM8byDkPf94fpxVa+tfnnqQ9Oy8taP5fH/LRqeoSXxA3FRDaRRivehkp74qw7z3+VP5nRSaV5s0n&#xA;XH8z+dbC5ZuN5DaxWMMHpOx+qWkgZIn5KqcuRc1B5CmbHs+WCyMw9JGx7j8Pxsr1fyV5t0zzRoUW&#xA;oWUjGWM+hf28qelPb3Ue0sM0RJMbq3b7qjMbU6eWKdH4dxHeFeXWHkf8rPMsE+nRebL+d7YiCITG&#xA;K1KQyvOBBCJLaH1o3mdzX4qso32zaz1WoxESMI7/AB7t+ZrZU6sfLH5beUfMtlrf+IJ3nSa7htrT&#xA;mk8IluPVlmVlgiLKwV+5Gyitconnz5oGHCOnlyquZV6HP5l8u28TyzanapGnq8iZo/8AdA5S9+qA&#xA;VYds1wwzPIH5d6qWm+b/ACzqUCz2epQPE4coWb0yyxoJHZRJxJVUYEsNsM9PkiaIKpnbXVtdQrPa&#xA;zJPA9eEsTB0NCQaMtRsRTKpRINFVTArsVdirsVdiqS+ZfMh0cWMEFo9/qWpzm2sbRWWNWZY3mkZ5&#xA;W+FESONmJ3PYDL8OHjsk1GIs/crCNX07zUdDuda8o200P6fZ7rWNGvIoHmS49BomDi4Vy8LMiLKi&#xA;1PAfuh8WZ2OePjEch+jYEXyvy69x7/qVhHkv8xpPKtysWnp9b8szcpZ/LMExvLnTF9JZ3ktJOKlo&#xA;0Bf1LV6OnFmTkgJzP1Oj8UWdp/zuQl03/RLkbF0UPdtO1LQfMujRXthPDqWlXiVjlQh0YfrDA9Qd&#xA;wffOc1Gnq4ZI+8Fsx5JQPFE0UMINW0f/AHmDajpo6W7H/SIh4Ix/vFHgd81vBlwfT68fd/EPd3+7&#xA;m53Hiz/V6Mnf/Cff3e/kj7HVNP1GNvq8gcjaWFhR17EOh3GZWHUwyj0n4dfiHFz6aeP6h+o/FFoi&#xA;ooRAFRQAqgUAA6ADL2hvFXm/m2zh8yfm75c8uagPU0jR9Pn8xSWjbx3F2k6WtrzX9oQc3f50rir0&#xA;jFWA+Z/zj8v+XWU3lpdNCtxe29zMgjpEunrG08pBerLSUUA3PhirMNF1G71CwW5u9Pm0uckhrO4e&#xA;GR1A6HlbyTR0Yb/axVgv58WKweS283WtItd8oSpqul3QorDg6rPCx7xzxFkZe+2KvR0YOisKgMAR&#xA;UFTv4g0IxVvFXYq7FXYq7FXYqpXV1a2lvJc3UyW9tEpaWaVgiIo6lmYgAfPFXzv+Z/n/AExdb/T3&#xA;5Rag995olH1fXV0y2ub23uYFFIi4it5rd5UbZZPUVgNtwdttodRiI8PP9A5eR/V5Kh0sPyVhit5d&#xA;b/xB5XmLRzXq6hptxDG04MhPqyvaPHulyy1qq0oevUy7WygkbEcuvl5+VqzHyz+T/kXX9MGp2/mB&#xA;tW9a4lmF5pstv6AVpbmRIhxRm5L9cbkWbly9gABLtaf8IFV+r9SpyfyF8sNDZW76jqDWtjURW/K2&#xA;VCnBYkV+EC8yka8ebVc92OR/lXJZNRs+/wDX+xUPF/zjx5RSJ421DUJBNG0U5LW6lv3csaMOMI4c&#xA;PrDmiUDftBske2MndH7fLz8v1Kzryn5U03yvpkmnae8j28lxNdH1SpIedy7KOCoOIJ22zA1Golll&#xA;xS50B8lTnKFdirsVdirsVQWr6Jo+s2n1PVrKG+tQ6yCG4jWVA6/Zbi4IqMsx5ZQNxJBV422p69+V&#xA;moX3p21xqegKYze3lxA0CTOqCrpNyaMTAGss0tPXc8UVeBObrghq4jcRn0F3Xw7u4D6Rueas6vfJ&#xA;XlHzjLa+YYECw3gP16QRPHJeW4AT0iX4lUkMSB3VayRgLy4HNfHU5MNwPTl5H8fI+aqGr/l3qOla&#xA;lP5g/L65i0nU7g+pqGjTAnS79h3kjXeGU/79j+kGpyWPWRnEQzDij0P8Uf1jyKovy5+Z2m32oroW&#xA;v2svlrzP0GlXxHGahpys7gUiuE/1d/bI5tDKMeOB48feOnvHRWS3+i6feuJZUKXC/YuYiY5V+TrQ&#xA;/fmozaSGQ2R6u8bH5uTh1U8YoH09x3HyQwtvMVntBcx6hCP913I9OWngJEBB+lcp8PUY/pkJj+ls&#xA;fmP1N3iaef1RMD/R3HyP62/03dxbXelXUZ8YQtwv3oeX/C4fzch9WOQ93q+79SPykT9OSJ9/p+/9&#xA;bBvzDkvDq2iecPK8Mtz5g0JpIJ9JeKWI32n3fET24dlCrIpRZIixpyHvhGvxE16r/qy/UxOgygX6&#xA;a/rR/Wy7yd598r+b7E3Oi3YeaL4bzT5f3d3ayA0aO4gb442VhTfbwJzNcNFw+UfK8OpXepx6Varq&#xA;F8GW8ufSQvKrgBw5I35AfF44qrabpeheXtL+rafbW+l6Zb8pDHEqwwpU8nY0oo8ScVeVedPNum/m&#xA;DeWHlvSbhZPJQvEfzHrUbK0dytrIH+pW1DyZWkUerJsvH7JbcZhajtDFikIyO5c3T9n5csTKI2D1&#xA;JPM3l9+moQjem7hf10wjtDAf44/NB0GcfwS+SuutaO/2b+3anWkqH+OWDV4jynH5hrOkyjnCXyKu&#xA;t3aP9maNqdaMD/HLRlieRDUcUhzBVeu4ybB2KuxVB6zq1ho+k3urahJ6Njp8ElzdSnfjHEpdjTvs&#xA;OmKvNPLXkm8/MAW/nD8w0ae0uaXGg+T3P+hWdu28Ml1ENri4dKM3qVC1pTwVep21tb2sEdvbRJBb&#xA;xKFihjUIiqOgVVoAMVVCARQ7g9Rirz3zR+U9r9al8x+R5F8tecEHNbi2HC0vStT6F/brSORH6c6c&#xA;16g7Yqn35fecB5r8tRalLbGx1GGSWy1fTmNWtr62cx3EJPcBhVT3UjFWSYq7FXYq7FXYq7FXYq7F&#xA;UJqGkaTqXoDUbKC8FtIJrcXEaS+nKAQHTmDxYA9Rk4ZJRvhJFqi8grsVS3zB5a0DzFp7adrlhDqF&#xA;m2/pTKG4t05I32kb/KUg5bhzzxy4oGirDl8ofmD5WNfKGtLq+lJ08v68zuyL/LbX6BpVoNlWVXA8&#xA;czfzGHL/AHkeGX86P6Y8vlSqifm/p+mssPnTSL/ypcH4fWuozc2LN4Je23qRU/1+OA9nSlvilHIP&#xA;LY/6UqzDSNf0LWYPX0jUbbUYevqWs0cyj5lC2YWTFOBqQI96o/K1Yp5p/K7yR5mvF1HUdP8AS1iP&#xA;+61iykks75aCg/0iBo5GAHQMSPbFUoX8p9VhAS0/MDzPFCfhdJbm1uTw7hZJrZ5Af8osTirl/JDy&#xA;pdSpJ5kv9W82em3OOHW72Se3Vq1r9WiEFufpjOKs5h0zToILe3gtYooLSn1WKNFRIqbD01UAL9GR&#xA;lAGrHJlGZF0eau8MT/bRWqKHkAdvpxMQeYUSI5FQfS9Nfd7SFvnGh/hlZ0+M84x+QbBqMg5Sl8yo&#xA;N5e0JqV0+328IkH6hlZ0OA/wR+QbBrcw/jl8ypf4V8v9RZIp8VLL/wARIyH8nYP5oZ/yjn/nF3+F&#xA;9IH92s0R8UnmH0fbwfyfi6WP86X61/lDL1o/5sf1O/w7CP7u9vYwOgFzIQPoYtj+RHSUx/nFfzx6&#xA;xgf80MV/NTypqF5+XHmS2sbi61C5ewnMVhM/NZSqcuFFUOSafCA3XJR0hBvjn8x+pEtWCK4IfI/r&#xA;ZX5W8xaX5k8uadrulSCTT9QgSeAinwhhuhp0ZGqrDsRTMxw0B+Yei6vrXlK907SJGj1CUxGFkuXs&#xA;/sSqxDTRpI/EgfEoA5Daq1qFUq/K/wAseatCi1r/ABJcfWrq+v5rmGVbqW5j9GSV2jSNZlDxKiMq&#xA;0LN88VZu7oiM7sFRQSzE0AA3JJOKvO/yYlTUIPNfmO1HHSdf1+6u9KIFElgiiitfrCj/AIukt2b3&#xA;xV6LirsVdirsVdirsVdirsVdirsVdirsVdirTKrKVYAqRQg7gg4qxHV/yj/LfVbj61c6DbRXdam6&#xA;s+VlMT4mS1aFyfmczMfaGeAoSNee/wB9qg/+VU+hX9G+b/MlgBX04vr4uo18Bxu47g8R4Vyz8/f1&#xA;Y8Z/za+6lb/wJ56iNLb8w9SVT9oTWemzGvsWtxTB+axHnij85frV3+CvzF/8uLe/9w3S/wDqhj+Z&#xA;wf6kP9NL9au/wV+Yv/lxb3/uG6X/ANUMfzOD/Uh/ppfrV3+CvzF/8uLe/wDcN0v/AKoY/mcH+pD/&#xA;AE0v1q7/AAV+Yv8A5cW9/wC4bpf/AFQx/M4P9SH+ml+tXf4K/MX/AMuLe/8AcN0v/qhj+Zwf6kP9&#xA;NL9au/wV+Yv/AJcW9/7hul/9UMfzOD/Uh/ppfrV3+CvzF/8ALi3v/cN0v/qhj+Zwf6kP9NL9au/w&#xA;V+Yv/lxb3/uG6X/1Qx/M4P8AUh/ppfrV3+CvzF/8uLe/9w3S/wDqhj+Zwf6kP9NL9au/wV+Yv/lx&#xA;b3/uG6X/ANUMfzOD/Uh/ppfrVjWlfll+Zfka4vNR8oa/ba1Deztc33l3UrdbO3kdzWSS3ktiUt5W&#xA;/wAmIIf2htlGfLjkBwQ4PiT96p7D+bV9akQeYfJPmHTLpaeq1tZnVLUe6T2Jl5D5oMx1XT/nFat8&#xA;Gl+VPM2pzHZFTSZ7aPl4NLefV0X33xVL7ry5+ZHn+lt5sWPyp5Rf/erQbK4FxqF6nX0rq7jAjhib&#xA;oyw1JFRy74q9KsbGzsLOCysoUtrO2jWK3t4lCokaDiqqo2AAGKq2KuxV2KuxV2Kv/9k=</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/">
         <xapMM:DocumentID>uuid:75ADEE8C1156E0118C67E1189BDA6050</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:76ADEE8C1156E0118C67E1189BDA6050</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource"/>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>715.000000</stDim:w>
            <stDim:h>423.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>True</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:Fonts>
            <rdf:Bag>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>Calibri</stFnt:fontName>
                  <stFnt:fontFamily>Calibri</stFnt:fontFamily>
                  <stFnt:fontFace>Regular</stFnt:fontFace>
                  <stFnt:fontType>Open Type</stFnt:fontType>
                  <stFnt:versionString>Version 2.00</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Calibri.ttf</stFnt:fontFileName>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>Arial-BoldMT</stFnt:fontName>
                  <stFnt:fontFamily>Arial</stFnt:fontFamily>
                  <stFnt:fontFace>Bold</stFnt:fontFace>
                  <stFnt:fontType>Open Type</stFnt:fontType>
                  <stFnt:versionString>Version 5.01.2x</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Arial Bold.ttf</stFnt:fontFileName>
               </rdf:li>
            </rdf:Bag>
         </xapTPg:Fonts>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -423 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 423 li
715 423 li
715 0 li
cp
clp
[1 0 0 1 0 0 ]ct
gsave
0 423 mo
714.996 423 li
714.996 0 li
0 0 li
0 423 li
clp
714.996 423 mo
0 423 li
0 0 li
714.996 0 li
714.996 423 li
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
f
159.454 273.938 mo
161.454 273.938 li
161.456 269.684 162.707 265.631 165.031 261.873 cv
168.511 256.242 174.449 251.31 182.041 247.81 cv
189.627 244.307 198.844 242.237 208.783 242.238 cv
222.035 242.234 234.001 245.923 242.535 251.76 cv
246.804 254.676 250.211 258.119 252.534 261.873 cv
254.858 265.631 256.109 269.684 256.111 273.938 cv
256.109 278.191 254.858 282.244 252.534 286.002 cv
249.053 291.633 243.116 296.565 235.524 300.065 cv
227.938 303.568 218.722 305.638 208.783 305.637 cv
195.53 305.641 183.564 301.952 175.03 296.115 cv
170.761 293.199 167.354 289.756 165.031 286.002 cv
162.707 282.244 161.456 278.191 161.454 273.938 cv
159.454 273.938 li
157.454 273.938 li
157.452 278.989 158.961 283.802 161.63 288.107 cv
165.638 294.572 172.21 299.93 180.364 303.697 cv
188.524 307.462 198.289 309.635 208.783 309.637 cv
222.774 309.632 235.472 305.778 244.791 299.418 cv
249.449 296.235 253.266 292.417 255.935 288.107 cv
258.603 283.802 260.113 278.989 260.111 273.938 cv
260.113 268.886 258.603 264.073 255.935 259.768 cv
251.927 253.303 245.355 247.945 237.201 244.178 cv
229.042 240.413 219.276 238.239 208.783 238.238 cv
194.792 238.243 182.093 242.097 172.774 248.457 cv
168.116 251.64 164.299 255.458 161.63 259.768 cv
158.961 264.073 157.452 268.886 157.454 273.938 cv
159.454 273.938 li
cp
0.74902 0.678431 0.670588 0.901961 cmyk
f
%ADOBeginSubsetFont: Calibri Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2011 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /Calibri def/FontInfo 5 dict dup begin/ItalicAngle 0 def/FSType 8 defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 77 /M putdup 79 /O putdup 83 /S putdup 86 /V putdef/FontBBox {-476 -194 1214 952} defendsystemdict begindup /Private7 dict dup begin/|- {def} def/| {put} def/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings5 dict dup begin/.notdef <1C60D8A8C9B7A086528E2CBE7FD4F03CC1C545DFC3C53F52C692334252531335C4AFD91E9493A7B9787114ADBF50CAD0D8D8F4E0FD112CA0EDC244BC77AFB35E52902467E4B7D65BC23E8AB084EE08EDC3C9FE17948A4E93ECA5D5D8A99AF099DAB98A96A7EEC3487AD5909F63F36A9F52E364FE794F0586CEACB0693AEA3E3B131EDB924E9018AC085D5D058B3A8419D5096479413ADE107D9F5302816818EECEB683CD82FAAA79E358EAA71283CC02664EE09C62BDF6E0D9BC98D9F308DF8AEA61A9B7C090BD7FD96A3223C7AE0D3D1A8F2E623FA6B7C467CA6FECDBA0B792188DFEEBD3D01BCE6CC077D778842DE1B5E36F7F8EB4C68A439269E0981B28AD1790AA058065E4B6AD27A659E12C7322A5BE1E7DF9729C0030192F3688A380035351BB0945D5DC7515959F458727E2B8854977E466D6DDC900E997B52F6BAB4C73A178A3B47EBB3C3FC842F51CC6E114336F3E4E5E72B20D8F94A7BA3BA965E83BF37BAA664C34B8502BB9E9B9BEDD7EBC5DCBC4FFF5EBCA9C032449885D42A9DCCBA2A816B59D7978373DF4208E5608F69A2EAF492AC156CC637D5A11AF573B17CF9F38> |-/M <1C60D8A8C9B68A39A0A3DD2F1EDB806B8EBA2991979DEC8D258B1A02A1906FD2B1CA205517F0A68C4C6A5BF2AC6E6CDCF7977F45552A42319D772D0594959118289EBC1461685C8CF4E5DD263C4C1910B7D8FD4E5500044A8F06771B257FC21C3072148523EDBD4AE8CCE0BCF86532F61410F6C0201E2ADF6D872A8FDBBE97EA7C8789A51927AEAFFA42E03A39CC922DAB964B6BCFFA4430A330843D8297EBD008ACDDBEFAE9E40226AF265DABF6CE80E6C4FB13353BC50063552BC667360325D0B42F7528AA00A89119A771AE5A7A3F69D8025BCAB7EBC18E2CEFCB7A52A1D8652FE7D376D9B1F2CA62FEF82187CF27562517F2AA24976B64146E2D4DD287500E273B12ACFFC0C2B592A5CFA9E9511593BE31B739BECC693D9698B175F68FEC3CF86BC604ABD82815EBA74C3E98930057A86AF494D184AB704B672B8745> |-/O <1C60D8A8C9B64B6A243C5D499416E7BC4B22E8B629E09B8028C056D587EE9CF3EDF2973119D5417CAB133A39C67B614E010AE0DD832BCFA4821BD97E225D43A74776F0BFD87B432DD8C21445FC4ADD550E21897D7C9E8DE35386D83093D3FF407F51B83131A4C29A9A19F0D66509D8A0DC226CCF6F69FBA7442E368FC0BB3313B0C314C003045967AC913CA278D0CD495B5C5D3B104FD8FE9306C40B1E684F8B702E1CF50ACD13BCB247F919B2F23E586EB73CDBD82C4696F7C27EE8FF40F1B366DF4538A9B1C7C873783BED33A9CC79EC8072551DCD083245F853F09D7BA82936C03B9ABC832E704C4042C4CFF1A8C1165F42A0> |-/S <1C60D8A8C9B770DA42E8D37F1E32882D4AD6464D850106A0DE7A83B47F0EC65143E84B8F9887D8EF560BBB7DAED9582F38B6974AE06071D74243DE04377A9E38C603D44A0AA623BF84EDE575A39EAD4593C4B3F424F5317061A5AEF0FCBD5198E5F9AB43FD8C228E541FA391BADB0ACDBD5FBBD08EBCA2700B6A1105DB45395D242F8C44AC433C3725A9D5F6A91B5DF820F4E2F6E66101242BAA426ABA584BF91A7E8CBD825612324F28F3BB6B5F4B6A98D5678C5683C423898401C97DB6AEBB3B08F0E49015B8C09294559F0324646775C30687BA8725A301A8E7ACA559E180CD1BA525300AD3D8DFA8A8C34309FA6E01CA0BA9F33D60D410C3785C9A35A4D33DC4DA697FAAF83556B3BAF038631153B21CFA05AC7F6B965B6C9DD580ECDAA5E19D631487362428CB6C15F8951776CB9C454AE2ECDA7CED1F00599F60578050870FD9F672ABB02F7641BFFDFC908D98DE75282B9085EDCE585EED996ACD325E186C6CC942676730FDB64EACBC2CC9670AC8631DB84FE5F13182767EAE21F9BC28BA89B244DFD720C9DF35E92F57747BB59E5AF5F4663BAF9B03DC716D74DBD0D4D1BB2703443369B43A50F5B2916833184106C2158995BEF98CEF08C3DF5A6182> |-/V <1C60D8A8C9B7E46D3595E262380DCCCAA6E0E0BA4C996D5098A92E632ED5356A9916B4B99AB06AD951B62795F2944115780C872E7F123891EAF1856E4A402315D956ED20BB59B6DFC7B0C8DDFBBB6489AC9F05116C49F6645589E6E5C6219DCD98FFCCF74F280D5CA828656CA0DEA4A3590C0CE2656E288F10B56FF6A6534FAD666710C7E6204526D48A9BE83CD7E4DC0B2E8DF7D568501DDB0E18670BEBF5CFC81A0AAE8E22C1553C764F7775B8986DD68E6C24BFBFC4A9922D2C513EA361E017749016E6C565BD94109B7E1999BA44DDA7D1D05F2F> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/LCRYXI+Calibri /Calibri findfont ct_VMDictPut/LCRYXI+Calibri*1 [77{/.notdef}rp /M /.notdef /O 3{/.notdef}rp /S 2{/.notdef}rp /V 169{/.notdef}rp]LCRYXI+Calibri nfLCRYXI+Calibri*1 [18 -2.20436e-15 -2.20436e-15 -18 0 0 ]msf186.082 281.137 mo(VOMS)[10.2129 11.918 15.3896 0 ]xsh317.876 36.4346 mo
319.876 36.4346 li
319.878 32.1807 321.129 28.1283 323.453 24.3703 cv
326.933 18.7395 332.871 13.8073 340.462 10.307 cv
348.049 6.80407 357.265 4.7346 367.204 4.73584 cv
380.456 4.73119 392.422 8.42064 400.956 14.2574 cv
405.225 17.1731 408.632 20.6165 410.955 24.3703 cv
413.279 28.1283 414.53 32.1807 414.532 36.4346 cv
414.53 40.6884 413.279 44.7408 410.955 48.4989 cv
407.475 54.1298 401.537 59.062 393.946 62.5625 cv
386.359 66.0655 377.143 68.135 367.204 68.1338 cv
353.952 68.1384 341.986 64.4489 333.452 58.612 cv
329.183 55.6963 325.776 52.2528 323.453 48.4989 cv
321.129 44.7408 319.878 40.6884 319.876 36.4346 cv
317.876 36.4346 li
315.876 36.4346 li
315.874 41.4864 317.383 46.2992 320.052 50.6045 cv
324.06 57.0688 330.632 62.4275 338.786 66.1943 cv
346.945 69.9586 356.711 72.1325 367.204 72.1338 cv
381.195 72.1291 393.893 68.2748 403.213 61.9148 cv
407.87 58.7322 411.687 54.9141 414.356 50.6045 cv
417.025 46.2992 418.534 41.4864 418.532 36.4346 cv
418.534 31.3827 417.025 26.57 414.356 22.2647 cv
410.348 15.8005 403.777 10.4418 395.622 6.67512 cv
387.463 2.91093 377.698 0.737059 367.204 0.735838 cv
353.213 0.740484 340.515 4.59472 331.196 10.9545 cv
326.538 14.1371 322.721 17.9551 320.052 22.2647 cv
317.383 26.57 315.874 31.3827 315.876 36.4346 cv
317.876 36.4346 li
cp
f
%ADOBeginSubsetFont: Calibri AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2011 Adobe System Incorporated. All rights reserved.systemdict beginLCRYXI+Calibri dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/W <1C60D8A8C9B59C1010CD6DE510D8E88403DDDCE882F1AC7D165B8C14E05CD3E52F9320567E3515D0AEBAF4F8B245451AF9B039B3C0D154BF663C02801384FB41D3B0A978B89351A95F33C6B07F4E867FF418B4DA8644FB59D063C472223843674822014F7AFDDB012DC03C8B95191E00381FA3AEAE43A10A87EE59876999DCD54ADF7C28072901B72989402F130B22ACFF69FAA4EC941A59DEAE071310E6E07660CFB4C9D8C0A6C6CFB36AE30EE4A8215D9C95C1B1C50E4A19F5E49920B8469BBDC4C918E728AB0C706159DF9B41E918B58FDF609A022499AEF6D11660C9F78D19FF461D056CEDC8E040EA7A6AEC4E74E921FEF28CD7572CD683133F7595FBE79122E9ABACC3B6A2B81236A36A2781652DA4A3F0A36E7672763E65392339C7D4D8BA4D82CC4447ADD1F7AA7FB01EFF306694F7657082271F405466DE99F9C9065E9946587234E7DCDE6A1DC19FE9> |-systemdict /gcheck known {setglobal} if end {end} ifendLCRYXI+Calibri /Encoding getdup 87 /W putpop%ADOEndSubsetFont
/LCRYXI+Calibri*1 [77{/.notdef}rp /M /.notdef /O 3{/.notdef}rp /S 2{/.notdef}rp /V /W 168{/.notdef}rp]LCRYXI+Calibri nfLCRYXI+Calibri*1 [18 -2.20436e-15 -2.20436e-15 -18 0 0 ]msf347.562 43.6338 mo(WMS)[16.0137 15.3896 0 ]xsh613.697 172.841 mo
615.697 172.841 li
615.699 168.587 616.951 164.535 619.274 160.777 cv
622.755 155.146 628.692 150.214 636.284 146.713 cv
643.87 143.21 653.086 141.141 663.025 141.142 cv
676.278 141.137 688.244 144.827 696.778 150.664 cv
701.047 153.579 704.455 157.023 706.778 160.777 cv
709.101 164.535 710.352 168.587 710.354 172.841 cv
710.352 177.095 709.101 181.147 706.778 184.905 cv
703.297 190.536 697.359 195.468 689.768 198.968 cv
682.181 202.471 672.965 204.541 663.025 204.54 cv
649.773 204.544 637.807 200.855 629.273 195.018 cv
625.004 192.102 621.597 188.659 619.274 184.905 cv
616.951 181.147 615.699 177.095 615.697 172.841 cv
613.697 172.841 li
611.697 172.841 li
611.695 177.893 613.205 182.705 615.873 187.011 cv
619.881 193.475 626.453 198.834 634.607 202.6 cv
642.767 206.364 652.532 208.538 663.025 208.54 cv
677.017 208.535 689.715 204.681 699.035 198.321 cv
703.692 195.138 707.509 191.32 710.178 187.011 cv
712.847 182.705 714.357 177.893 714.354 172.841 cv
714.357 167.789 712.847 162.976 710.178 158.671 cv
706.17 152.207 699.599 146.848 691.444 143.081 cv
683.285 139.317 673.519 137.143 663.025 137.142 cv
649.034 137.147 636.336 141.001 627.017 147.361 cv
622.359 150.543 618.543 154.361 615.873 158.671 cv
613.205 162.976 611.695 167.789 611.697 172.841 cv
613.697 172.841 li
cp
f
%ADOBeginSubsetFont: Calibri AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2011 Adobe System Incorporated. All rights reserved.systemdict beginLCRYXI+Calibri dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/I <1C60D8A8C9B86ED904793239D5A87846341C6685DE5ABE7704D2C21702B19492F988F7BDB944EF3CF61808A6DB9D1F22BBD335BB859C853102ABDC306BF0344F58C180F59706796F6A9C1DD4450E8611E916B0A530128C4C5E0E96FFF301F980705D57CD45F3B705E62B3216F34902178F51AC490CA8AF3698463F806A35B46CD69D> |-systemdict /gcheck known {setglobal} if end {end} ifendLCRYXI+Calibri /Encoding getdup 73 /I putpop%ADOEndSubsetFont
/LCRYXI+Calibri*1 [73{/.notdef}rp /I 3{/.notdef}rp /M /.notdef /O 3{/.notdef}rp /S 2{/.notdef}rp /V /W 168{/.notdef}rp]LCRYXI+Calibri nfLCRYXI+Calibri*1 [18 -2.20436e-15 -2.20436e-15 -18 0 0 ]msf656.818 180.04 mo(IS)[4.53516 0 ]xsh234.777 352.848 mo
236.777 352.848 li
236.779 348.594 238.03 344.541 240.354 340.783 cv
243.834 335.152 249.772 330.22 257.363 326.72 cv
264.95 323.217 274.166 321.147 284.105 321.148 cv
297.357 321.144 309.324 324.833 317.857 330.67 cv
322.126 333.586 325.534 337.029 327.857 340.783 cv
330.18 344.541 331.431 348.594 331.434 352.848 cv
331.431 357.101 330.18 361.154 327.857 364.912 cv
324.376 370.543 318.438 375.475 310.847 378.976 cv
303.26 382.479 294.044 384.548 284.105 384.547 cv
270.853 384.552 258.887 380.862 250.353 375.025 cv
246.084 372.109 242.677 368.666 240.354 364.912 cv
238.03 361.154 236.779 357.101 236.777 352.848 cv
234.777 352.848 li
232.777 352.848 li
232.775 357.899 234.284 362.712 236.953 367.018 cv
240.961 373.482 247.533 378.841 255.687 382.607 cv
263.846 386.372 273.612 388.546 284.105 388.547 cv
298.096 388.542 310.794 384.688 320.114 378.328 cv
324.771 375.145 328.588 371.327 331.258 367.018 cv
333.926 362.712 335.436 357.899 335.434 352.848 cv
335.436 347.796 333.926 342.983 331.258 338.678 cv
327.25 332.213 320.678 326.855 312.523 323.088 cv
304.364 319.324 294.599 317.15 284.105 317.148 cv
270.114 317.153 257.416 321.007 248.097 327.367 cv
243.439 330.55 239.622 334.368 236.953 338.678 cv
234.284 342.983 232.775 347.796 232.777 352.848 cv
234.777 352.848 li
cp
f
%ADOBeginSubsetFont: Calibri AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2011 Adobe System Incorporated. All rights reserved.systemdict beginLCRYXI+Calibri dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/C <1C60D8A8C9B786996D057DD9ECF9C9FE8F34FA37C423F5980BE7D786896E9EA4586FE497E33F39AB964ACDD89D26E486E7ED8F0DC4FBA51D700DEE7B191A63C96E17E766A2327A1204635F41F9C49078958E183EEFB6984182E65EDA1F8B441B6E4AB84D91335816B7734083F4F4FD892A7BCA407D109F62E4EE67EE6C6C391D2BD510DDC6B5D5CC22D17AC103A7D2131E72C317F3BAC05393ECDC293B2ECAB1568ADB4263F35E5423335599179483E82F60A5AD75F98D7415F42E948543DCCF85D6B636864749244B612B22564859487973200635BA3DA904CEFECDBCC8B01666891D22D161E426CFA4178953236E0C0CC024ABFD25C62F85F4D9DE2FD93AA1C37E4CC144A605E56698682CB24FC97AD3BD836F4B14863B5FD90FDACDF515F988F6144041EE6DE72D3696AC15A7CD39C4F2A134E2CF9BC30D1C6766E73FC3D1AD93F0B1FE898AB1ACC306D4BD68327F6E0E6DF2C6B68065348695779B77D4> |-/F <1C60D8A8C9B770DA42EB776051437272AB3109214F2F5AF299B91EDE1F768C5024668BC49B69066FA908CF8FE87EDFDF17A758EE488BEC994A194C62BD1C9426343C7C81CA3B3F963FDAD914A0EC9F4FE665084402A52314B863A06B82A12C3F91EE9C0F2B145AA7D2782C4C7297D5A7A4C8227440D2EB6A6858EEAF3E8D5172513D85C8059F336BE8B10563AA3DFEF476A6E0B2054B979D1F9B4679850776A59C7497BC538F93679A65B973B2A534700FFE8CC98CDC2940E7759A9043FA0F4AD602EBE420E53281F2FA075E541FDAF915055861D63FE68E0F45> |-/L <1C60D8A8C9B7171E8B1A8E6313E3398209E3D260B6F15325DCB45ECD7736181F507CB4487F34F0C59AFEB0721592A12F0589FA4C3A7603462313C63656B09A8D44D0BD8D70558844CA341A4EE2AC79F611A3ED366B2D2FE339B138BAAEB8D89A1F21C50A63D7C75CB2B4AF444273F3D83A0ACE429472C68390F392B236C485C1D89000FF66B1CD626A7276BDCB191387CD8BEAF0A2AA6552> |-systemdict /gcheck known {setglobal} if end {end} ifendLCRYXI+Calibri /Encoding getdup 67 /C putdup 70 /F putdup 76 /L putpop%ADOEndSubsetFont
/LCRYXI+Calibri*1 [67{/.notdef}rp /C 2{/.notdef}rp /F 2{/.notdef}rp /I 2{/.notdef}rp /L /M /.notdef /O 3{/.notdef}rp /S 2{/.notdef}rp /V /W 168{/.notdef}rp]LCRYXI+Calibri nfLCRYXI+Calibri*1 [18 -2.20436e-15 -2.20436e-15 -18 0 0 ]msf271.582 360.047 mo(LFC)[7.56738 8.27051 0 ]xsh418.767 292.986 mo
420.767 292.986 li
420.769 288.732 422.02 284.68 424.344 280.922 cv
427.824 275.291 433.762 270.359 441.353 266.858 cv
448.94 263.355 458.156 261.286 468.095 261.287 cv
481.347 261.282 493.313 264.972 501.847 270.809 cv
506.116 273.725 509.523 277.168 511.846 280.922 cv
514.169 284.68 515.421 288.732 515.423 292.986 cv
515.421 297.24 514.169 301.293 511.846 305.051 cv
508.365 310.682 502.428 315.614 494.836 319.114 cv
487.25 322.617 478.034 324.687 468.095 324.686 cv
454.842 324.69 442.876 321.001 434.343 315.164 cv
430.074 312.248 426.666 308.805 424.344 305.051 cv
422.02 301.293 420.769 297.24 420.767 292.986 cv
418.767 292.986 li
416.767 292.986 li
416.764 298.038 418.274 302.851 420.943 307.156 cv
424.951 313.621 431.522 318.979 439.677 322.746 cv
447.836 326.51 457.601 328.684 468.095 328.686 cv
482.086 328.681 494.784 324.827 504.103 318.467 cv
508.761 315.284 512.578 311.466 515.247 307.156 cv
517.915 302.851 519.425 298.038 519.423 292.986 cv
519.425 287.934 517.915 283.122 515.247 278.816 cv
511.239 272.352 504.667 266.993 496.513 263.227 cv
488.354 259.462 478.588 257.288 468.095 257.287 cv
454.104 257.292 441.406 261.146 432.086 267.506 cv
427.429 270.689 423.612 274.507 420.943 278.816 cv
418.274 283.122 416.764 287.934 416.767 292.986 cv
418.767 292.986 li
cp
f
%ADOBeginSubsetFont: Calibri AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2011 Adobe System Incorporated. All rights reserved.systemdict beginLCRYXI+Calibri dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/E <1C60D8A8C9B75378CEF864E8E645E238F010DC67C4EDB2AB6204D0088CBCDD1DEE9C8C2CECE062788346A01E3802B2091033ED5950E4C033A20CCD093D289D2F26A5FD341F46577D4549CD89253F9A6A8D03D896A47E90D75A9B095338D4F1A428EFD6368B03F3457933B96836318838D6ECFD4EE598A6ACB918E7DEB21FD5DF405153F50F967DA33761036143519A115970687B392DB7F04F6DFA832832EFCCEC991D7C99016AF229E38C2C2CB9F54CE4D5FFFF9ABBA880E56F5C9CF0D6C000EF7BE5CDA2F2ABD168F271B1C1D0D0D56ECDD1C59923F3DD9E4C7BEDD7EE3581E1726538020B2D60F1F9E52CFA> |-systemdict /gcheck known {setglobal} if end {end} ifendLCRYXI+Calibri /Encoding getdup 69 /E putpop%ADOEndSubsetFont
/LCRYXI+Calibri*1 [67{/.notdef}rp /C /.notdef /E /F 2{/.notdef}rp /I 2{/.notdef}rp /L /M /.notdef /O 3{/.notdef}rp /S 2{/.notdef}rp /V /W 168{/.notdef}rp]LCRYXI+Calibri nfLCRYXI+Calibri*1 [18 -2.20436e-15 -2.20436e-15 -18 0 0 ]msf459.76 300.186 mo(SE)[8.27051 0 ]xsh317.876 160.83 mo
319.876 160.83 li
319.878 156.576 321.129 152.524 323.453 148.766 cv
326.933 143.135 332.871 138.203 340.462 134.702 cv
348.049 131.199 357.265 129.13 367.204 129.131 cv
380.456 129.126 392.422 132.816 400.956 138.653 cv
405.225 141.568 408.632 145.012 410.955 148.766 cv
413.279 152.524 414.53 156.576 414.532 160.83 cv
414.53 165.084 413.279 169.136 410.955 172.894 cv
407.475 178.525 401.537 183.457 393.946 186.958 cv
386.359 190.461 377.143 192.53 367.204 192.529 cv
353.952 192.533 341.986 188.844 333.452 183.007 cv
329.183 180.092 325.776 176.648 323.453 172.894 cv
321.129 169.136 319.878 165.084 319.876 160.83 cv
317.876 160.83 li
315.876 160.83 li
315.874 165.882 317.383 170.695 320.052 175 cv
324.06 181.464 330.632 186.823 338.786 190.59 cv
346.945 194.354 356.711 196.528 367.204 196.529 cv
381.195 196.524 393.893 192.67 403.213 186.31 cv
407.87 183.128 411.687 179.309 414.356 175 cv
417.025 170.695 418.534 165.882 418.532 160.83 cv
418.534 155.778 417.025 150.965 414.356 146.66 cv
410.348 140.196 403.777 134.837 395.622 131.07 cv
387.463 127.306 377.698 125.132 367.204 125.131 cv
353.213 125.135 340.515 128.99 331.196 135.35 cv
326.538 138.532 322.721 142.351 320.052 146.66 cv
317.383 150.965 315.874 155.778 315.876 160.83 cv
317.876 160.83 li
cp
f
0.74902 0.678431 0.670588 0.901961 cmyk
LCRYXI+Calibri*1 [18 -2.20436e-15 -2.20436e-15 -18 0 0 ]msf358.206 168.029 mo(CE)[9.59766 0 ]xsh89.1782 141.028 mo
329.123 63.3843 li
327.891 59.5786 li
87.9468 137.222 li
0 0.937255 1 0 cmyk
f
319.048 58.2358 mo
332.313 60.25 li
322.743 69.6528 li
319.048 58.2358 li
cp
ef
317.855 158.813 mo
106.98 160.96 li
107.02 164.959 li
317.895 162.812 li
f
115.061 168.877 mo
103 163 li
114.938 156.878 li
115.061 168.877 li
cp
ef
628.856 147.138 mo
406.517 59.8502 li
405.055 63.5736 li
627.394 150.862 li
0 0.4 0.733333 0 cmyk
f
411.04 70.2202 mo
402.063 60.25 li
415.425 59.0503 li
411.04 70.2202 li
cp
ef
416.441 162.809 mo
609.574 174.566 li
609.817 170.573 li
416.684 158.816 li
f
602.074 166.095 mo
613.688 172.813 li
601.345 178.072 li
602.074 166.095 li
cp
ef
87.3706 188.419 mo
169.471 249.347 li
171.855 246.135 li
89.7544 185.206 li
0.87451 0.176471 1 0.0588235 cmyk
f
167.814 238.155 mo
173.875 250.125 li
160.663 247.792 li
167.814 238.155 li
cp
ef
244.875 251.734 mo
330.283 188.672 li
327.907 185.455 li
242.5 248.516 li
f
319.095 186.989 mo
332.313 184.688 li
326.223 196.642 li
319.095 186.989 li
cp
ef
287.99 316.931 mo
366.633 198.938 li
363.305 196.719 li
284.662 314.713 li
0 0.4 0.733333 0 cmyk
f
284.125 319.125 mo
285.16 301.835 li
285.227 300.732 286.174 299.893 287.276 299.958 cv
288.379 300.024 289.219 300.972 289.153 302.074 cv
288.528 312.52 li
297.928 307.922 li
298.92 307.438 300.118 307.848 300.603 308.841 cv
301.088 309.833 300.677 311.03 299.685 311.516 cv
284.125 319.125 li
cp
ef
355.54 201.158 mo
367.188 194.5 li
365.525 207.813 li
355.54 201.158 li
cp
ef
489.088 386.547 mo
491.088 386.547 li
491.09 382.293 492.341 378.24 494.665 374.482 cv
498.145 368.851 504.083 363.919 511.674 360.419 cv
519.261 356.916 528.477 354.846 538.416 354.848 cv
551.668 354.843 563.634 358.532 572.168 364.369 cv
576.437 367.285 579.844 370.728 582.167 374.482 cv
584.491 378.24 585.742 382.293 585.744 386.547 cv
585.742 390.801 584.491 394.853 582.167 398.611 cv
578.687 404.242 572.749 409.174 565.158 412.674 cv
557.571 416.177 548.355 418.246 538.416 418.245 cv
525.164 418.25 513.198 414.56 504.664 408.724 cv
500.395 405.808 496.988 402.365 494.665 398.611 cv
492.341 394.853 491.09 390.801 491.088 386.547 cv
489.088 386.547 li
487.088 386.547 li
487.086 391.599 488.595 396.411 491.264 400.717 cv
495.272 407.181 501.844 412.539 509.998 416.306 cv
518.157 420.07 527.923 422.244 538.416 422.245 cv
552.407 422.24 565.105 418.386 574.424 412.027 cv
579.082 408.844 582.899 405.026 585.568 400.717 cv
588.237 396.411 589.746 391.599 589.744 386.547 cv
589.746 381.495 588.237 376.682 585.568 372.376 cv
581.56 365.912 574.988 360.553 566.834 356.787 cv
558.675 353.023 548.909 350.849 538.416 350.848 cv
524.425 350.852 511.727 354.706 502.408 361.066 cv
497.75 364.249 493.933 368.067 491.264 372.376 cv
488.595 376.682 487.086 381.495 487.088 386.547 cv
489.088 386.547 li
cp
0.74902 0.678431 0.670588 0.901961 cmyk
f
0.74902 0.678431 0.670588 0.901961 cmyk
LCRYXI+Calibri*1 [18 -2.20436e-15 -2.20436e-15 -18 0 0 ]msf530.081 393.745 mo(SE)[8.27051 0 ]xsh504.377 321.068 mo
534.207 351.423 li
537.06 348.62 li
507.23 318.264 li
1 0.94902 0.0117647 0.0117647 cmyk
f
507.131 329.577 mo
503 316.813 li
515.69 321.166 li
507.131 329.577 li
cp
ef
534.307 340.11 mo
538.438 352.875 li
525.747 348.521 li
534.307 340.11 li
cp
ef
418.071 291.119 mo
322.084 325.761 li
323.442 329.524 li
419.429 294.881 li
0 0.4 0.733333 0 cmyk
f
332.324 330.57 mo
319 329 li
328.25 319.282 li
332.324 330.57 li
cp
ef
489.178 384.566 mo
323.109 374.922 li
322.877 378.916 li
488.947 388.559 li
f
330.632 383.373 mo
319 376.688 li
331.328 371.394 li
330.632 383.373 li
cp
ef
0 0.937255 1 0 cmyk
%ADOBeginSubsetFont: Arial-BoldMT Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2011 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /Arial-BoldMT def/FontInfo 5 dict dup begin/ItalicAngle 0 def/FSType 8 defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 32 /space putdup 68 /D putdup 70 /F putdup 74 /J putdup 76 /L putdup 101 /e putdup 103 /g putdup 105 /i putdup 108 /l putdup 111 /o putdup 115 /s putdef/FontBBox {-628 -376 2000 1010} defendsystemdict begindup /Private7 dict dup begin/|- {def} def/| {put} def/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings12 dict dup begin/.notdef <1C60D8A8C9B6E3FA5101D97F0BCF44F7161DEB1E2A84766DD477E7C8A936AA182F5809A9> |-/space <1C60D8A8C9B854D00D> |-/D <1C60D8A8C9B6079F41181AF4EB36AA0D0A9CB43D77E9AB20A6E8CC956A65DB49EB6635E16A93399048C7FF414644050887228FE6A7D0206D976F49A17D261AA33D3EBB94BE961959DEF2B6629671CF61014D6F7BD7E457F47E2A8118C52D305371EF3BCBDE1CFFB87BA758D818C2C45B8180F337D5F9BDA254CBE936AECDBA1BA66E23577AFD9B2756741C424503> |-/F <1C60D8A8C9B7D8BE164A384446DA6B7BAA798AC9D25A30491D373B778ABEDC450E08B3A2A56A100F> |-/J <1C60D8A8C9B7EF322BCBE280C22367457BA30917BF0D1B07B12F1A04A9C60A4874C9EE5DB3B90A588C5C07B1C8F3479DF10173E78C0C37BBC3FD504697A6FABECEE626AD51A845B5C58CC51C8DFC4D1E3679BDE58DCC1C90> |-/L <1C60D8A8C9B7D8BE1956BCE10252E2B5E44265236D2FAF854B3B3BF8> |-/e <1C60D8A8C9B7EF322BF270AB151730C1576B3DBF6DAC6B05EF7C7C2AC3550E4D7D76EEB5EC00E2AE0B63EA674701E41362C9EF4C943E6044930A81C0288C730E9CD4222EC82D37FE43450E9A846C17FEBAA9742B3180B655FFA4E0E014EF214E09E7DE6E45A7476C6DEA21B47E198DDC2AD648DA39E6CBF2981071855AA94524E4E0809AB2B25573430347DD> |-/g <1C60D8A8C9B7D8BE2780ECF91BB8FE73517B0190DDC8DBC9897295332E6D8EF13268DE217D7EA63F2C2488BA6624154001DFCD86A24A51CFE6922F8614F4FD4481342B3992244B419F0D448BA14CBCD530939FD538BD00615A031E3CBF1609B0E4C3D7F5A051C575D052C1A51F88B318CA9D0C7CFDFA53AA8FB2F2EE274EE2F4C85657CA9E748262BB03EF446591D320994414EE439D72B9883F38366A41CF501DCE32006C591422CCF439307E4D3088D90FF7CD2955301C96A46D1D1545AF9D499025D541CB2077BD42919F91257F222D868E80527F0D65> |-/i <1C60D8A8C9B854D0F456B21D2F64F910BA7B8B592C84A4B1CA21D58F6678BEC800D8864E53D53A> |-/l <1C60D8A8C9B854D0F4565C5D96D196F316A2594284F4> |-/o <1C60D8A8C9B7D8BE34A30C11766266259B98A0BA89715D82F7092153A6228252D7594BDD75B2A7C57DC89088F8B1FFC43993725AE434A67B356F5F6B64D528A1696640F00DD016EBC232B8C863EA85B4B724E805002B9447A61792050E5F2AB51B8800BF6303526C74FB360B7027D54FFCEDAF13BF8EA7CB1A81691C0A4FB25E1EA64C0904433C6A5F35BBF9DD5C4CBFC1A5> |-/s <1C60D8A8C9B7EF322FE651D521834CDC537E3DD6EDE0ABF561677B8E076DDC9728066ABB56D1B743872DFE7AE020F0764CE3958A51AA0338BC1551D98AE3FB37FA10E152AF1ED0A626D6C892D666067C463296034FB47068E23F64D99406EC5C2C17229C4A63CE0EFA8720ACDB7F7406ADA1BC78971EA6415F061291692781A355051246F6EE6DC9DD910EE9B57ECB7AA0A970570176A3D15D1E3F2012D47AFFA014792503A125E8700D4C4B9A85575792648D6CE60E59BBF3015C0285B0> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/LCRYXJ+Arial-BoldMT-Identity-H /Arial-BoldMT findfont ct_VMDictPut/LCRYXJ+Arial-BoldMT-Identity-H*1 [32{/.notdef}rp /space 35{/.notdef}rp /D /.notdef /F 3{/.notdef}rp /J /.notdef /L 24{/.notdef}rp /e /.notdef /g /.notdef /i 2{/.notdef}rp /l 2{/.notdef}rp /o 3{/.notdef}rp /s 140{/.notdef}rp]LCRYXJ+Arial-BoldMT-Identity-H nfLCRYXJ+Arial-BoldMT-Identity-H*1 [17.1231 -5.54981 -5.5498 -17.1231 0 0 ]msf160.685 110.37 mo(JDL File )[9.52246 -3.08691 12.3662 -4.00781 10.459 -3.39014 4.75781 -1.5415 10.459 -3.39014 4.75781 -1.54199 4.75684 -1.54199 9.52344 -3.08643 0 0 ]xyshLCRYXJ+Arial-BoldMT-Identity-H*1 [18 -2.20436e-15 -2.20436e-15 -18 0 0 ]msf186.832 155.503 mo(Log Files )[10.9951 10.9951 10.9951 5.00098 10.9951 5.00098 5.00098 10.0107 10.0107 0 ]xsh0.87451 0.176471 1 0.0588235 cmyk
%ADOBeginSubsetFont: Arial-BoldMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2011 Adobe System Incorporated. All rights reserved.systemdict beginLCRYXJ+Arial-BoldMT-Identity-H dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/C <1C60D8A8C9B6079F6DE2AEDD76F722AB1905C7EE1983D1040F12090A2B6BB93FD7976832C00E38F0C4C79BDBC9D981E45F6BB26E1DD13A0FA297509E8F73D8E4A29558A673AA886D0B1CE2BDB03B1E58D12F23798709409D59C03EBEE5D9CA02E1DEC19C7936D25A234D617C91BF02C16AA27F9D6F9EC37F9EB080F7BD6AF1EE128160DD9B3DB18FE4> |-/G <1C60D8A8C9B6FF86FA39BD8455388B96A79DE6C661D434721B9BFE9AFE31A8D3B1EE2339E46446F423E77240C51C0B1A82619322B37485E3A6C3AEE324ED7B0632685A57EF9CA7E19AAC2082E01C4F403DAE12BF8F2830FC26B22875DFBD55FC1C80EE740D53E34A2534A4362B0D86968D9BDA4CFAC87CE7506BF4518D62FCE7E6EAEDFB7B13AA321234AF3D6EFC462C35D2578BD423792DB837448E> |-/I <1C60D8A8C9B854D0F45A9260868E9F30993A194AB723> |-/P <1C60D8A8C9B64EDFF4BBA9405C68CB1D32394A0B35B38FF15650A7F4CA980D304B0E82F2EE31DE1B207C9690A7D1CE7998A46A2671A721A2721266CDB3CB7162FB8735F8901B59D497FC48B1C8BA82BBC82DEF38A7FA67F275089B99C047F77478B3299CF33148E1E790C5C7235CAB593CF69659FDEE7364A65AC06E6296> |-/R <1C60D8A8C9B6079F62C490F8C1A9447E753B366F00BE2E6D6A1AEC57FEFC5F04FB7246489EDF70068115D0A2805C8D6EC79F6064E7969601096F448222EBB1DD7F1F6323EF89F566062038A8AC4D6CAD80E8B896F19CFFFE99D83DBA0C0E40A706B7FE43A7E0AA62F51DDB688D792B5246324FF62981CEA7E6D7B38DF1C5C95D599B2DC4BC9304A423DA3839EE77DFF504E2ADB006C72F6FEA3F44E88D7A> |-/r <1C60D8A8C9B7361F02EEC91E54B85D1C77E667FE2BCF3D09A421FBF63CB630EA2A0B7B19FFD8078B4DB5A7731C633809BCAB3FF296D65B89F29DE6B6DB35AA635F12FEC0F1664A8FB613C79352FA72> |-/t <1C60D8A8C9B81F2C3AD0BF8CA40D7105A9B3D27345F202DEBDE44606EFD0E90137AE13DC9D19FB7B4ABCA40FDADEB59FF02A690A47D6F26E8BDAADCFC0513C14FCD80BF39C6AFCEFE1132622D45FBB576E32F86682C5BCCAD00B4E7E375350009EFCA5AC835906F56B697B29> |-/x <1C60D8A8C9B7EF322B2F5C1A3006093EF821CFB8EEC448BAC2558676A15C34F8B668902BE5E0FC2E5DDA8A5B7BD49832847B77EDB26628EA3C9B> |-/y <1C60D8A8C9B7EF322B7536945647B4BA07C8DC342FF58A782AE941212DA936B500226D637B658433D28B8CA55D32CD6B9B1269E0231AED7EEAE92EA48D1AB958BAD61D13401B6A794D4ED73191B8ADB547A985247846F2CB1E080C4F3C74337DE0> |-systemdict /gcheck known {setglobal} if end {end} ifendLCRYXJ+Arial-BoldMT-Identity-H /Encoding getdup 67 /C putdup 71 /G putdup 73 /I putdup 80 /P putdup 82 /R putdup 114 /r putdup 116 /t putdup 120 /x putdup 121 /y putpop%ADOEndSubsetFont
/LCRYXJ+Arial-BoldMT-Identity-H*1 [32{/.notdef}rp /space 34{/.notdef}rp /C /D /.notdef /F /G /.notdef /I /J /.notdef /L 3{/.notdef}rp /P /.notdef /R 18{/.notdef}rp /e /.notdef /g /.notdef /i 2{/.notdef}rp /l 2{/.notdef}rp /o 2{/.notdef}rp /r /s /t 3{/.notdef}rp /x /y 134{/.notdef}rp]LCRYXJ+Arial-BoldMT-Identity-H nfLCRYXJ+Arial-BoldMT-Identity-H*1 [14.5763 10.5609 10.5609 -14.5763 0 0 ]msf101.457 190.161 mo(GRID Cert )[11.3379 8.21387 10.5269 7.62695 4.0498 2.93457 10.5264 7.62695 4.0498 2.93359 10.5264 7.62695 8.10693 5.87305 5.67236 4.11035 4.854 3.5166 0 0 ]xyshLCRYXJ+Arial-BoldMT-Identity-H*1 [14.6696 -10.4308 -10.4308 -14.6696 0 0 ]msf250.86 237.679 mo(Proxy Cert )[9.78516 -6.95752 5.70898 -4.05908 8.96094 -6.37158 8.1582 -5.80127 8.1582 -5.80078 4.07617 -2.89844 10.5938 -7.53271 8.1582 -5.80078 5.70898 -4.05957 4.88574 -3.47363 0 0 ]xysh503.891 408.402 mo
503.516 408.34 li
503.4 408.32 503.306 408.313 503.188 408.313 cv
502.224 408.313 li
500.509 408.251 li
500.438 408.25 li
498.145 408.25 li
495.167 408.188 li
495.125 408.188 li
491.576 408.188 li
487.468 408.125 li
487.438 408.125 li
482.762 408.125 li
477.524 408.063 li
477.5 408.063 li
471.75 408.063 li
471.77 408.063 li
465.52 408 li
465.5 408 li
458.813 408 li
458.83 408 li
451.705 407.938 li
451.688 407.938 li
444.125 407.938 li
436.188 407.938 li
436.202 407.938 li
427.827 407.875 li
427.813 407.875 li
410.125 407.875 li
410.132 407.875 li
391.132 407.813 li
371.131 407.75 li
371.125 407.75 li
350.188 407.75 li
350.193 407.75 li
328.568 407.688 li
328.563 407.688 li
306.375 407.688 li
261.216 407.688 li
249.923 407.377 li
238.725 406.449 li
227.516 404.839 li
216.426 402.733 li
205.335 400.007 li
194.426 396.783 li
183.641 393.002 li
172.974 388.723 li
162.495 383.949 li
152.2 378.677 li
142.147 372.968 li
132.341 366.886 li
122.787 360.372 li
113.495 353.433 li
95.8995 338.574 li
87.6022 330.648 li
79.7262 322.4 li
72.2174 313.836 li
65.1476 305.092 li
58.5127 296.039 li
52.3116 286.799 li
46.6121 277.382 li
41.41 267.721 li
36.7665 257.939 li
32.6795 248.031 li
29.0923 238.012 li
26.1871 227.875 li
23.8386 217.677 li
22.1712 207.425 li
21.122 197.119 li
20.9312 190.751 li
16.933 190.87 li
17.1259 197.31 li
17.1353 197.453 li
18.1978 207.89 li
18.2134 208.009 li
19.9009 218.384 li
19.926 218.511 li
22.301 228.824 li
22.3274 228.926 li
25.2649 239.176 li
25.3045 239.299 li
28.9295 249.424 li
28.9636 249.513 li
33.0886 259.513 li
33.1307 259.608 li
37.8182 269.483 li
37.8641 269.573 li
43.1141 279.323 li
43.164 279.411 li
48.914 288.911 li
48.9643 288.99 li
55.2143 298.302 li
55.2618 298.37 li
61.9493 307.495 li
62.0072 307.57 li
69.1322 316.382 li
69.1837 316.444 li
76.7462 325.069 li
76.8035 325.131 li
84.741 333.444 li
84.806 333.509 li
93.181 341.509 li
93.2721 341.59 li
110.96 356.528 li
111.053 356.603 li
120.428 363.603 li
120.498 363.652 li
130.123 370.215 li
130.196 370.262 li
140.071 376.387 li
140.137 376.427 li
150.262 382.177 li
150.338 382.218 li
160.713 387.53 li
160.796 387.57 li
171.358 392.382 li
171.443 392.419 li
182.193 396.731 li
182.276 396.762 li
193.151 400.575 li
193.246 400.606 li
204.246 403.856 li
204.335 403.88 li
215.523 406.63 li
215.627 406.652 li
226.814 408.777 li
226.903 408.792 li
238.216 410.417 li
238.335 410.431 li
249.647 411.368 li
249.758 411.374 li
261.133 411.687 li
261.188 411.687 li
306.375 411.687 li
328.563 411.687 li
328.557 411.687 li
350.182 411.75 li
350.188 411.75 li
371.125 411.75 li
371.119 411.75 li
391.119 411.812 li
410.118 411.875 li
410.125 411.875 li
427.813 411.875 li
427.798 411.875 li
436.173 411.937 li
436.188 411.937 li
444.125 411.937 li
451.688 411.937 li
451.67 411.937 li
458.795 412 li
458.813 412 li
465.492 412 li
471.73 412.062 li
471.75 412.062 li
477.488 412.062 li
482.726 412.125 li
482.75 412.125 li
487.422 412.125 li
491.532 412.187 li
491.563 412.187 li
495.105 412.187 li
498.083 412.25 li
498.125 412.25 li
500.401 412.25 li
502.116 412.311 li
502.188 412.313 li
503.022 412.313 li
503.234 412.348 li
503.891 408.402 li
cp
1 0.94902 0.0117647 0.0117647 cmyk
f
13.1743 198.987 mo
18.8125 186.813 li
25.1689 198.627 li
13.1743 198.987 li
cp
ef
0 0.4 0.733333 0 cmyk
%ADOBeginSubsetFont: Arial-BoldMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2011 Adobe System Incorporated. All rights reserved.systemdict beginLCRYXJ+Arial-BoldMT-Identity-H dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/a <1C60D8A8C9B7EF322B767253CD3BE18E6883E9BFEE680E471A3E543E6B629FFE599C78BF6E9BC360B4FD3F4193BE88F8A133134BAA650EBC31A9DBCA73D443463241F1A95A036612031AED6950283B0D14D29C497685C55C7946BF118B40E370FC30C35C6DDC0B89863AEC8E7000DED8B394346462262BD43999923C02BB76E45D38F5FACA7247DBA2EBA6371EEFDE7DB20E4C849532AD601D5FE565E2F9524F3166F0EDA1C9CBD6F2D9FAE6CBD991E5FC9CACD3E5ACCC612FA46CAB683778C9E93119C2E309BBBA2FB6B108D4ACC24630A4E27912F2F48E37DD6F256C920ECC30772CD6DD1CCCB84D330E3FAA> |-/k <1C60D8A8C9B7EF322B75AAFD4DB9E7AD574572B7D2556469383B3D4CBB5184BAC1997D5B0A13D1B495BE0C6B6EE29F273838B3F19F49> |-/p <1C60D8A8C9B7D8BE2E8563B32C07DCC3804272870E069E443B687857C9ACB5C7CA1CF4F6A17C25172CC3E3E31B65AB87A5F695EADCB9429C1CB7981C750B5DB31D41989E5AF25C22D1AF173045FD1E2E798D136DAECB194448D3991450715E7374AE8B43D8B50AD9D750A67743A1F2A35DFF73BE71D039D15D8530023A7DA074A0D1B66504E092406A88A86DBDD558> |-/u <1C60D8A8C9B7D8BE193D97D4CEC9E264886B4FEB6039471A932F20C88E939BABF490859EEC52AD38B7ED294F8DF2A47649EF77BF43349A736D065D0A253D952638D54F7BA1B47314F68FC1495C51454777F8F9475426838BE461BAFE9BF3E443E03AAD9292AF57449A5275904AD9> |-systemdict /gcheck known {setglobal} if end {end} ifendLCRYXJ+Arial-BoldMT-Identity-H /Encoding getdup 97 /a putdup 107 /k putdup 112 /p putdup 117 /u putpop%ADOEndSubsetFont
/LCRYXJ+Arial-BoldMT-Identity-H*1 [32{/.notdef}rp /space 34{/.notdef}rp /C /D /.notdef /F /G /.notdef /I /J /.notdef /L 3{/.notdef}rp /P /.notdef /R 14{/.notdef}rp /a 3{/.notdef}rp /e /.notdef /g /.notdef /i /.notdef /k /l 2{/.notdef}rp /o /p /.notdef /r /s /t /u 2{/.notdef}rp /x /y 134{/.notdef}rp]LCRYXJ+Arial-BoldMT-Identity-H nfLCRYXJ+Arial-BoldMT-Identity-H*1 [9.81182 -15.0907 -15.0907 -9.81182 0 0 ]msf298.102 286.131 mo(Data )[7.08594 -10.8979 5.45605 -8.39258 3.26758 -5.02539 5.45703 -8.39258 0 0 ]xysh316.546 298.124 mo(Lookup )[5.99316 -9.21777 5.99316 -9.21826 5.99414 -9.21777 5.45605 -8.39258 5.99414 -9.21826 5.99316 -9.21777 0 0 ]xysh365.25 70.1831 mo
365.134 123.183 li
369.134 123.192 li
369.25 70.1919 li
0 0.937255 1 0 cmyk
f
373.151 115.201 mo
367.125 127.188 li
361.151 115.174 li
373.151 115.201 li
cp
ef
0 0.937255 1 0 cmyk
%ADOBeginSubsetFont: Arial-BoldMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2011 Adobe System Incorporated. All rights reserved.systemdict beginLCRYXJ+Arial-BoldMT-Identity-H dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/plus <1C60D8A8C9B7F3748955B68D822A628847CA2801E333DB589D7D89B881C355D626DF5C5ABE2A218F1AD3792D2ADF78> |-/B <1C60D8A8C9B6079F41181ADFF82FD511AE28F2C86910E87A2408036CAE220A294923EA0E343A2E6A98A318DE85DC7C76B01F1EC3BBDAB8243406F64AA60EC47C4740DC38CA972359346DC4F829F6F2F025BAF490F6C12F4FDEE6E00BC02718C2A815AF9445D30C8E56633A71FE0D0177EB4631ACBF3247225C96DE555742F231ACF12ABFAF7923DBF44FBF12BDB4408FA2F2BAEBD8E7E077E25AB5122D52C15E7FE3C32CA90E2552D23E0B4ABA9EE9903B7FFBC9DA58DB417DC8D58F11CC4F5D7250D4EBACD68EE666FFFB942A580FB288> |-/f <1C60D8A8C9B81F2C5A71D50B9B0701F5A31E22DDFBF554FF2D149AB14DDEFC1B9ADBD8105EC88497FBC09B03794C95967111EB4354C8578F0E042075107F9743D9A4F26007EA81109EB5443BB577E4EC9F8677529403BA64E3F5> |-/n <1C60D8A8C9B7D8BE193B13518E6892DBA9B266D0A17D5C8CBB8FCA3DEC31FFDE21FB19188C5C709BB859EE16635D8123C09E9F6380448F624FEDEAFC78CB8E4436A865BB0CB81152FE1F90E6EB1DE7D9B62F15D5F2855507D6B695B1CC6AFD11F003818163793142F6A0F46BD84EFADF> |-systemdict /gcheck known {setglobal} if end {end} ifendLCRYXJ+Arial-BoldMT-Identity-H /Encoding getdup 43 /plus putdup 66 /B putdup 102 /f putdup 110 /n putpop%ADOEndSubsetFont
/LCRYXJ+Arial-BoldMT-Identity-H*1 [32{/.notdef}rp /space 10{/.notdef}rp /plus 22{/.notdef}rp /B /C /D /.notdef /F /G /.notdef /I /J /.notdef /L 3{/.notdef}rp /P /.notdef /R 14{/.notdef}rp /a 3{/.notdef}rp /e /f /g /.notdef /i /.notdef /k /l /.notdef /n /o /p /.notdef /r /s /t /u 2{/.notdef}rp /x /y 134{/.notdef}rp]LCRYXJ+Arial-BoldMT-Identity-H nfLCRYXJ+Arial-BoldMT-Identity-H*1 [18 -2.20436e-15 -2.20436e-15 -18 0 0 ]msf292.968 113.304 mo(JDL File +  Broker Info )[10.0107 12.999 10.9951 5.00098 10.9951 5.00098 5.00098 10.0107 5.00098 10.5117 5.00098 5.00098 12.999 7.00488 10.9951 10.0107 10.0107 7.00488 5.00098 5.00098 10.9951 5.99414 10.9951 0 ]xsh0 0.4 0.733333 0 cmyk
%ADOBeginSubsetFont: Arial-BoldMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2011 Adobe System Incorporated. All rights reserved.systemdict beginLCRYXJ+Arial-BoldMT-Identity-H dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/S <1C60D8A8C9B64EDFF4DB3154EF1496D6E24F0CAC281A26842F998257597280DD1E6498DF18A9DA7D721D169321D8C5E0431AC7382FA4310DC48BBF78710C6BC5247040A24ACAC01421F5FBDE686580BE547F54A1AA74DC005E8E5CD476A95687DB199C1234EC19B3DCC9809D20AF7E582B47F9C3146B190D9EA96357C8C75B37ED0E8A0609D6AA98D6ECE5CCE67035EEBD2539BAF0BB0A05B823E40DDAE9B8EE162F6E47FABB31D9FF0B75F8D71F52C148E77FE80FB24454F3884141B009620C0B57EC496B1B9A1D8EA8A41DD33836FFD894AD961F351294F76A> |-systemdict /gcheck known {setglobal} if end {end} ifendLCRYXJ+Arial-BoldMT-Identity-H /Encoding getdup 83 /S putpop%ADOEndSubsetFont
/LCRYXJ+Arial-BoldMT-Identity-H*1 [32{/.notdef}rp /space 10{/.notdef}rp /plus 22{/.notdef}rp /B /C /D /.notdef /F /G /.notdef /I /J /.notdef /L 3{/.notdef}rp /P /.notdef /R /S 13{/.notdef}rp /a 3{/.notdef}rp /e /f /g /.notdef /i /.notdef /k /l /.notdef /n /o /p /.notdef /r /s /t /u 2{/.notdef}rp /x /y 134{/.notdef}rp]LCRYXJ+Arial-BoldMT-Identity-H nfLCRYXJ+Arial-BoldMT-Identity-H*1 [16.8601 6.30373 6.30373 -16.8601 0 0 ]msf495.784 91.292 mo(Status )[11.2456 4.2041 5.61475 2.09961 9.37695 3.50586 5.61426 2.09863 10.2988 3.85059 9.37695 3.50586 0 0 ]xyshLCRYXJ+Arial-BoldMT-Identity-H*1 [17.9266 1.62412 1.62412 -17.9266 0 0 ]msf476.037 159.849 mo(Status )[11.957 1.08301 5.96973 0.541016 9.96973 0.90332 5.96973 0.541016 10.9502 0.992188 9.97021 0.90332 0 0 ]xyshLCRYXJ+Arial-BoldMT-Identity-H*1 [15.9197 -8.40028 -8.40028 -15.9197 0 0 ]msf585.684 276.875 mo(Status )[10.6182 -5.60303 5.30176 -2.79712 8.85352 -4.67188 5.30078 -2.79736 9.72461 -5.13135 8.85352 -4.67188 0 0 ]xysh517.511 294.999 mo
531.136 294.499 li
531.273 294.489 li
544.836 293.051 li
544.967 293.033 li
558.28 290.72 li
558.416 290.692 li
571.353 287.504 li
571.473 287.471 li
584.036 283.533 li
584.145 283.496 li
596.208 278.933 li
596.338 278.878 li
607.713 273.628 li
607.835 273.567 li
618.46 267.755 li
618.59 267.677 li
628.402 261.302 li
628.529 261.213 li
637.341 254.463 li
637.479 254.347 li
645.229 247.222 li
645.368 247.08 li
651.993 239.643 li
652.15 239.443 li
657.462 231.693 li
657.601 231.457 li
661.539 223.582 li
661.641 223.338 li
663.016 219.338 li
663.06 219.194 li
664.122 215.131 li
664.164 214.934 li
664.789 210.934 li
664.811 210.712 li
664.813 210.646 li
660.817 210.471 li
660.814 210.537 li
662.813 210.625 li
660.836 210.316 li
660.227 214.216 li
659.209 218.109 li
657.902 221.912 li
654.085 229.545 li
648.922 237.077 li
642.448 244.345 li
634.838 251.342 li
626.158 257.99 li
616.473 264.282 li
605.975 270.025 li
594.726 275.217 li
582.784 279.734 li
570.336 283.635 li
557.527 286.791 li
544.348 289.081 li
530.92 290.504 li
517.364 291.001 li
517.511 294.999 li
cp
f
656.454 218.274 mo
663 206.563 li
668.441 218.825 li
656.454 218.274 li
cp
ef
403.279 191.116 mo
463.952 257.703 li
466.909 255.008 li
406.235 188.422 li
1 0.94902 0.0117647 0.0117647 cmyk
f
405.71 199.724 mo
402.063 186.813 li
414.58 191.641 li
405.71 199.724 li
cp
ef
464.478 246.401 mo
468.125 259.313 li
455.607 254.483 li
464.478 246.401 li
cp
ef
1 0.94902 0.0117647 0.0117647 cmyk
%ADOBeginSubsetFont: Arial-BoldMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2011 Adobe System Incorporated. All rights reserved.systemdict beginLCRYXJ+Arial-BoldMT-Identity-H dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/c <1C60D8A8C9B7EF32242001ABD2AFBBD336641D8D7284783472C96CFCC434DFC100FC24422711A9090DEA4D32109037578992AFF27835B7F260887A799CBA44C497ED942D76A3A4BD63536DE6F757481EB22D2DEF055F331ED9622202739AC583596554B76ADC212E19C7FBCE810B4022B5DAB3AF3C114AF2730DCBE9D35CB6B42E872730D77BAB> |-systemdict /gcheck known {setglobal} if end {end} ifendLCRYXJ+Arial-BoldMT-Identity-H /Encoding getdup 99 /c putpop%ADOEndSubsetFont
/LCRYXJ+Arial-BoldMT-Identity-H*1 [32{/.notdef}rp /space 10{/.notdef}rp /plus 22{/.notdef}rp /B /C /D /.notdef /F /G /.notdef /I /J /.notdef /L 3{/.notdef}rp /P /.notdef /R /S 13{/.notdef}rp /a /.notdef /c /.notdef /e /f /g /.notdef /i /.notdef /k /l /.notdef /n /o /p /.notdef /r /s /t /u 2{/.notdef}rp /x /y 134{/.notdef}rp]LCRYXJ+Arial-BoldMT-Identity-H nfLCRYXJ+Arial-BoldMT-Identity-H*1 [12.3411 13.1033 13.1033 -12.3411 0 0 ]msf413.207 192.952 mo(Data Files )[8.9126 9.46289 6.86328 7.28711 4.10986 4.36426 6.86377 7.28711 3.42871 3.64063 7.53809 8.00391 3.4292 3.64063 3.42871 3.64063 6.86328 7.28711 6.86377 7.28711 0 0 ]xyshLCRYXJ+Arial-BoldMT-Identity-H*1 [18 -2.20436e-15 -2.20436e-15 -18 0 0 ]msf536.146 321.463 mo(Data )[12.999 10.0107 5.99414 10.0107 0 ]xsh536.146 343.463 mo(Replication )[12.999 10.0107 10.9951 5.00098 5.00098 10.0107 10.0107 5.99414 5.00098 10.9951 10.9951 0 ]xshLCRYXJ+Arial-BoldMT-Identity-H*1 [13.7976 11.5597 11.5597 -13.7976 0 0 ]msf69.0762 337.915 mo(Local )[8.42773 7.06055 8.42822 7.06152 7.67383 6.42871 7.67334 6.42969 3.8335 3.21094 0 0 ]xysh54.9478 354.778 mo(Copy )[9.96387 8.34766 8.42822 7.06152 8.42822 7.06055 7.67334 6.42969 0 0 ]xysh207.878 309.393 mo
244.779 328.899 li
246.648 325.363 li
209.747 305.857 li
0.87451 0.176471 1 0.0588235 cmyk
f
241.445 318.088 mo
249.25 329 li
235.837 328.696 li
241.445 318.088 li
cp
ef
0.87451 0.176471 1 0.0588235 cmyk
LCRYXJ+Arial-BoldMT-Identity-H*1 [18 -2.20436e-15 -2.20436e-15 -18 0 0 ]msf136.429 332.94 mo(Proxy Cert )[12.0059 7.00488 10.9951 10.0107 10.0107 5.00098 12.999 10.0107 7.00488 5.99414 0 ]xsh4.3667 162.971 mo
6.3667 162.971 li
6.36879 158.717 7.61998 154.664 9.94361 150.906 cv
13.4241 145.276 19.3619 140.343 26.9531 136.843 cv
34.5397 133.34 43.7558 131.271 53.6948 131.272 cv
66.9471 131.267 78.9132 134.957 87.4471 140.794 cv
91.7162 143.709 95.1234 147.153 97.4464 150.906 cv
99.7701 154.664 101.021 158.717 101.023 162.971 cv
101.021 167.225 99.7701 171.277 97.4464 175.035 cv
93.9659 180.666 88.028 185.598 80.4367 189.098 cv
72.8501 192.601 63.6338 194.671 53.6948 194.669 cv
40.4425 194.674 28.4765 190.985 19.9428 185.148 cv
15.6737 182.232 12.2666 178.789 9.94361 175.035 cv
7.61998 171.277 6.36879 167.225 6.3667 162.971 cv
4.3667 162.971 li
2.3667 162.971 li
2.36459 168.023 3.87401 172.835 6.54268 177.141 cv
10.5506 183.605 17.1224 188.963 25.2769 192.73 cv
33.436 196.494 43.2014 198.668 53.6948 198.669 cv
67.6857 198.665 80.3839 194.811 89.7035 188.451 cv
94.3611 185.268 98.178 181.45 100.847 177.141 cv
103.516 172.835 105.026 168.023 105.023 162.971 cv
105.026 157.919 103.516 153.106 100.847 148.801 cv
96.8393 142.337 90.2675 136.978 82.1129 133.211 cv
73.9537 129.447 64.1882 127.273 53.6948 127.272 cv
39.7039 127.277 27.0059 131.131 17.6864 137.491 cv
13.0288 140.673 9.212 144.491 6.54268 148.801 cv
3.874 153.106 2.36458 157.919 2.3667 162.971 cv
4.3667 162.971 li
cp
0.74902 0.678431 0.670588 0.901961 cmyk
f
0.74902 0.678431 0.670588 0.901961 cmyk
%ADOBeginSubsetFont: Calibri AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2011 Adobe System Incorporated. All rights reserved.systemdict beginLCRYXI+Calibri dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/U <1C60D8A8C9B677ECC2D761C908DB90C47A92800E8DA9F580AE95DF3036F3660C02232DCD6E66BA74E64BCFF08FC69541BD1ADF528637E7F048CA5FC0AB911EBFD42B9E8671A2AA23DE68C399177D223C5833F931D4B1D26350A985298765460954328F76A286CB6F3EB98D05D1D02FA99091438D6A70CDAD1BD0B7EAC0209E113AC49242A65FCE3FE16DD39B5FBB080521F00CF4EC25D97E8AB7617F9F8753D0683EC16C7483F3F827C65A33CB62EC6035151C9ED285A449D64D70D55E975B6FDE8BD5D93C1FC1CD7F52373AAB43F261624B7081D091DB595365DB519E652118E1DAAF0D73DA6FEC04B26239B5A2899D37EAA1FDE91EB5E7> |-systemdict /gcheck known {setglobal} if end {end} ifendLCRYXI+Calibri /Encoding getdup 85 /U putpop%ADOEndSubsetFont
/LCRYXI+Calibri*1 [67{/.notdef}rp /C /.notdef /E /F 2{/.notdef}rp /I 2{/.notdef}rp /L /M /.notdef /O 3{/.notdef}rp /S /.notdef /U /V /W 168{/.notdef}rp]LCRYXI+Calibri nfLCRYXI+Calibri*1 [18 -2.20436e-15 -2.20436e-15 -18 0 0 ]msf45.8477 170.17 mo(UI)[11.5488 0 ]xsh243.744 374.688 mo
234.931 374.44 li
226.107 373.638 li
217.398 372.402 li
208.688 370.673 li
200.034 368.509 li
191.51 365.915 li
183.035 362.822 li
174.746 359.42 li
166.516 355.522 li
158.488 351.322 li
142.927 341.775 li
128.188 330.999 li
114.442 318.987 li
101.806 305.918 li
90.3365 291.968 li
85.1538 284.749 li
80.3292 277.265 li
75.8731 269.652 li
71.7938 261.926 li
68.1492 254.02 li
64.9396 246.057 li
62.223 237.969 li
59.878 229.762 li
58.0902 221.562 li
56.7344 213.304 li
55.9347 204.999 li
55.8053 200.626 li
51.807 200.745 li
51.9384 205.184 li
51.9467 205.317 li
52.7592 213.754 li
52.7764 213.887 li
54.1514 222.262 li
54.1709 222.364 li
55.9834 230.676 li
56.0145 230.799 li
58.3895 239.112 li
58.4166 239.199 li
61.1666 247.387 li
61.2075 247.498 li
64.4575 255.56 li
64.4962 255.65 li
68.1837 263.65 li
68.2314 263.746 li
72.3564 271.559 li
72.399 271.635 li
76.899 279.323 li
76.944 279.396 li
81.819 286.959 li
81.8754 287.041 li
87.1254 294.354 li
87.2051 294.458 li
98.7676 308.52 li
98.8746 308.64 li
111.625 321.828 li
111.746 321.943 li
125.621 334.068 li
125.757 334.177 li
140.632 345.052 li
140.767 345.142 li
156.454 354.767 li
156.573 354.835 li
164.698 359.085 li
164.769 359.12 li
173.081 363.057 li
173.178 363.1 li
181.553 366.538 li
181.627 366.566 li
190.189 369.691 li
190.293 369.726 li
198.918 372.351 li
199.015 372.378 li
207.765 374.565 li
207.86 374.587 li
216.673 376.337 li
216.782 376.355 li
225.594 377.605 li
225.694 377.617 li
234.631 378.429 li
234.756 378.437 li
243.631 378.687 li
243.744 374.688 li
cp
0 0.4 0.733333 0 cmyk
f
48.0454 208.86 mo
53.6875 196.688 li
60.04 208.504 li
48.0454 208.86 li
cp
ef
LCRYXJ+Arial-BoldMT-Identity-H*1 [10.3353 14.7371 14.7371 -10.3353 0 0 ]msf78.7495 267.63 mo(Data )[7.46387 10.6436 5.74805 8.19531 3.44189 4.9082 5.74805 8.19531 0 0 ]xysh60.7378 280.262 mo(Lookup )[6.31348 9.00293 6.31299 9.00195 6.31348 9.00195 5.74805 8.19531 6.31299 9.00195 6.31299 9.00293 0 0 ]xyshgrestore
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
/LCRYXI+Calibri*1 uf/LCRYXI+Calibri uf/Calibri uf/LCRYXJ+Arial-BoldMT-Identity-H*1 uf/LCRYXJ+Arial-BoldMT-Identity-H uf/Arial-BoldMT ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 13.0%%AI8_CreatorVersion: 13.0.0%%For: (Ben Still BlackMac) ()%%Title: (gridoverview.eps)%%CreationDate: 3/22/11 12:23 PM%AI9_DataStream%Gb"-6Bj3@)Z2f4N!<5>aPaNS['p,Bq7DsHmQrFb#)d%HhrSdbLRnD*R4Tb**qjci`lWFLaFAf);<N7NKM9f7l/B7YIpnK\A41iJ)%s&*ZB/'dZ+T<CGk(sFPR/!JiLB/#pd`CXu%S!>@rM)`[rQ2g*-[n]",W2-bB58]A,s4Sr^3k]I^/&GgZ7obK,YVV0$-DUS)'e0Z0%PrkaL<ue5T?7r,(d;[IAIA>Fc]F)R(5a[?lSbZ;5b.og!HS$h(UOI"KdiF7tXZ2Mta8@HBp3MJ/6kI7[o!gFBN>DIY)o4W"2h"Tn%$jon9q"s/\5"E+JE3Q;4o'-+0HL(o%d8W6GE9M3qQ&bGerk]r/C%N^hYaHcKjaXo[HjjY/YqmIs`m4\6mFC--3pOoo(s@:N'hrLa%/;l\lhe>eA6sM7-hMSPZ1b)5jWN@EbQYIqt1AGWEpfA6U7;k/W:M-50d-Y8&@&k^$08KQsj-QYXSmEs;"7^\""DhRQA]SYbPQ"sC%#>X.k7NK8IKE#GH:K$/O,CU'`Lk$hI"cP:MQ"F\ARYte@T7JtsX^thbVM"Ehj9@sjiV:>l,0?V"=>l_d^i;s$Hid/PJp,)lc6tO=%5.iI)RmOI17e:aL%R5^.CkRf>W82Qa9P$p<p6D%>EEd/JJYA.%<W?^-rs>'+`:Ne49Yj2o<BaF:@@69C-0a@Q'2dMo1B_f>W:Apa%lIf6*o00=!jrK,4A3.8$+8ifPqI^9@`h7fD&"grhHtG/'=Y<?CGoltU4I#D!Pk$pc'a/cN]Tl/WX^i&n-'M.UR=nbcU``3FAhm11%PCYb4oFKg(A=usM"1@&+HpXrU)/>G[n7K3>-06o3&HjKsKOb_P('H$%"S*%RR(uAQ+[(udGZ-*T&\Z".e:KEk-e*`&8L#Nm0I$:F%3\VcQKQ0YP+Rd17i"LRULu8qM,'Y:`_hd4a`XRFV.?"T0,hOC@6S0,kHpSi>J7m=.!9=:'"H*CUn4DI^,:ChOfElAiGCWqe,H1nC%#IRren-L\/)'kt(ARrg=0@YUD8Ma&E6JdFd_'f/4d?46[:BEO=JPW3Jj+C,_MhF\.?:k1DUI51a\O8[1S.YN%etEkqRtMS5EWSBh%:>d>pP*Vs?+uQ0G:^9H;;'q53hBo!EV(b+.KNa&C@=/2*jB_P63\WUU:SMZ^G6m>%%tqM?)O>&*U,IOl:^Wm"M(bYb-$Ufa&Zh1F%$/PZ&Bh"o'&_NeCe2qB8]MH\l56<k(9L@!7c3\AZ$Ng;tkZ?_dnrCa<EN?rZ&tTfk-e'`q]g@5<[R*=oV^o))@9K!'J4RO&]WGR/%JlRD(lBekNhIKans+A'S.^J[ga,q"r0DQEFPMaMio$?>h,fgY\0DUr,Ol+;gnh6O\^XHnrmkjuE/<UY-0DS[!Ol+;go$??s<6,a7%0DS\OP2FDhnrJq5&U=k-#G5O5a`$D[q2<85`QRe):uNpVOK,*+>UmQ]s/.>5-']$p@[d3EVMf0Z?E+&ai,/+^P%*AVQ\+[";%TB/%^*a*T*'LDP23Ls*J7f-S!U<!)abo_MM*ldVDaO7-[?D:g;BpnP-;Y>2EQpJMJU8fG>D!hl4UP[=BF;4@@8T<g`G\^U0FQrUWLQZ&%9CP,s]Ei*4(INL!(X%3*/>3$#X;Y105J^?O.qd"@#$!p:=->$/:81]?Q-m(8KNA4f;Fi+mDh94[;%3Q>T.XdGgRRtSK(U=>YfNR-%)-iUZ6]W+YOs%/0rA)G*T&<TB4rtgF<`Zn>Pj9M5`)E$:MrZJ^R4*\%j7.?I%a3jTG_/d$0sj;^9kcK1OuLROHSG_Le1t_S^X"5P%Lff0LA7lgi<+1sN0/)?+eM"i;j;3@O]a)n!#n;-,\1NS2<6!j?3S\3Y6\Ve!gF\OB@#/c+pha_=4GL.8a.AC,;[h#c(mZBA9<]b&%;AulfNpthun#5\!`c,(s"O&f4'gGESs%+lRVZd!)-I7?#rJbCub+\9%Jj-$W"kjdl7$umgdN$,[;."<p<TjtP]I6W)Tc_]9KcX_p%o04;2oGcXV4f2qS"Le\k@\>Y4%Sbp8WiBZ!!$:0&i1FJIne.X3h7LW_ifOXg$fO+q:.;r\VU.P3<d50j_'bLcJrFQGbll)g,$TR6%Tm,`1O:E,MN'bR$)WV-g2(?ra]M5=+C*6Qsne9Wr8?rpmBB5@49g]6ZjmbVU<79aVn[B-s,o@/GG3N9&A/:!..O+b?e7#Qa`;K]'%#T0bD-g3q7K/,2RIM/W9qh*I1af+\EjjF:.EiJL9]SDH31m'&jN?Y4h,2m,b*`6RW[ks5M7)HdM!Et5\/YjE(]g1Hf9hBb+PXXmb%!HOhGgbQjY$j"Qe:]CZ+/!>AB=XfKB#qU0NPPXtcS2@,nS0n=]O:G)2;%_b3-:+6&s3L14gI0?9[01rF,p&`k$=udq.,9^['%j`o%3Y"+Na9bR6OHLJ-e;3<B+iq@?:t!,*2k,J_Ull?qd$F;^6@=nf>>FcS8,a\Rj2rp8,C"VddMY^#X+#r/iKQ-ofclYQpm'@KPa[]s%/Z$=56D!9o`<uGPA.-BlVN<)0iW"!LTq4F&!lbQ=:%\LS<h\t=:H4PW&ui^5Um[>*FXd]Z)mu`pJL'YND&/6\_4bedC77qoM9[C:%F+VAZoC<19'OMIV$SmcN*[=i!XCnK6C*JYlB&FKO_\8?p.PMo4If]n<p4Kc]']?Vr,Qah?._u@S(,H@<0.V&R,_[K_8G`\`.eK1.%&h0=4iBJCXMsZoFPpSW?'DYr;bS1pI&Vn)!'Gn.N1As[!T.7kt3PlX?/0tQAP+GiNZV7)c`f72pk6AZ<1EPLXWa![]dpPs"qC6Fj%C-TUIi)>1nOkU"7p_U"3E@P6sZ4b!d^pj[t!"'qG8Y:hr4JODIM`DKC``$TiU`dted\!fL&P5dk45><0/jW:o'q+MY(&SHd1[Pk)%72eB6F/#b>dcqIKU40-s!\T&E%<=WuECj>n(GeH0UA>SfNmJcm.Ss07kY<1kKNZ*<;&Z-)QKU7@8,^5QKR_.mkY$GC6nQ(,$[l1]%l2d?lGa,!XiJ[oY/V+/s2o\#-#i^M2*-?0W14YnT.$b!mO&AsS#7^q:KlKaAL%uuG[7$u!A$8H#U@;0&GoRr&iP2at2!tVAcXeM)%d+,*tja"]FKI8J*K5[tdYXtJi*LNq]5^Nc;(e%V7s/?\VrK.h^8i8o.3Q[:YBa+kn"),FTas*/7@#7nD<>Z%d$S0TSTBc3)16boB%\.Vf=8Gl%]<bSic_OiTcQ193a?H!!$5]>ld.b7NkZD?QWf%!m?D]l.'15^)nN#S]*YY:^dmrP90p^^u.9i4P3%H@UdOgKu%Nls7%%NseV@W^J(212"Z6!$8O:"[.D>,gl_f,M=[hTk[IM?I_jjPtZGIWlhB/V""doQ_f!dSf'!Y\?mLfLsADjOWo@3C23mu`T*5Je0dKi%FXUh;>(UHS:hqZXm0n]?<TA[E]OcXrV.9aqFh`eVl%gf`"3[/B-V4\$1R+AcjrmQJSObS/?WML[kj4MaYr2ll@@T-R'sjiE4YcA\%p&k*3:_"YuSAEoB[bE'$#dU9[g&9@17OUs%2,8UiPBCf'QU7R6P1C+TMe)fqgmFOeI7pQ$GWhk19[Xjp9Mh[l7&E"O)WO5Y>a!P!%^1g1M*2RX++VJeK2oQpmQSejKC,3EnG7(NF7;<JB1:<>]4]KfLd:6Y'AZ3%21hTq*=DSpeMT!!>aYk0%NZ#h!,B93[Z4d+pg4C1<%,,8hf1Aqe*R%kWd[</J^AiO*<2b.SD8q+WGP2<!@_5[.P;834@O6F6WoNaekZ3FChn2_5dcroA4VCCha7^eLkV\/dVoTLH,^EBJ'%9N]aio?#H9JOF"Eq8_m"&cGb72+Jo-bTSLaR:6b!@h:$n;^rn(a()*)j<gu&Gf;sn!D-!s,[JN#V2'1]f$gZg2NoaKe='%PR)hhs%)gV96pYhBf6iD!BkZcX%Tm&&Qn=6`$)ar7i=G^J",aq[NYLpfDXJ)F0Zla""[4;pL/W,InZ@W`!)lQBtIfoXF_@DM5YOG*j@A[;K%X!GnJdJN.-8"_"$22kI[P/_aqB\Z1b)F/3YBS0b1kQ]mCHQ>uc_a4;b6e5cN!MQnFQ#UKGdr@r@K)\*6T[lE!BJ>gVJ79tR@BTi-%<j/6.8H<%/Lu_8!0`+*CLaIB=N@SId,_=Z%_Fd5I5-3E`i^B,t/.&m/Y\NKoX((AuX9mP3"FQk^TXD@o8eW\)<LGt%n*p`d/98*&%%VSeh`fZ"HO>I?i8h*JGXKV4l]86IlpgF<p5NlnP'L0F1<'/-b:\69dM;qT=Y9u@2jr%8)'mi\Z`<=l_$p>t_L*]X3Os5;f9*;P+%i+*ZN?%7d<kHq0o!K"flj[G>WWpqQ@Ps!P&(?eenFPIhZ!f!9<7ohqN%2=_s6W2K7"@WeM4V7(M1)dSFE>.GPlK;"<LrPdIqSUt(%3WQQ+kQiJQ/FGBhYpZRYg#o7-Xs?"ng'?kmk9<>Pa=<H37C&N-?;^?J91h62W_>Mf8BY"KF;:35G[gO^b*03U36%5"]+jAW+6tuY%qErlY<2*?Vr#5_-I2$7R%.7?iX:[Z*joI55e=Jp/63Z+bZG`)G=[HoR18aQ^)REt68cG$_*X79TQHJEKRUuR9Sg/PG*NL=MS]G,7%ZAU'N.jN'A5^b#ZUuF*oXiV8FW0bR(F##43"n71S5H0?k^-R"C$ChX^6>-g=>qmYq269qC``<[2-k:PUU%DfKd%'_mp<I5MrEoN3%4ED5DINHs_MV,0r5b\/6j3p54o=t-=[/.kT!aZK.WfZ3cc_K(K$r;Dg;b;95;!,&SZl3:ogkRj#nuY%MJS:UB'Htm?-_ncg.?hO,%P0:[h1%dYTpe:$u0prPa_stc\Ya%f"5/b`R",Jgk(&Pn"Le;9aU54\:jkcXp*0!"aC8\P.%q;[:E7>uJcD53HfX:WHLK*Nremb3,%;!]c_hFE45@i_BUH,"tNmn&KLn=-$%J@mp>]fM6^*KoQ?Us;e:B.2@Lj5rM0$)p!0FXO3#'=mOaJ?g:t(Sp=_WTo<ljLY<8a2^H(%oau_,6*,k2*Lk:YiWr".)tY7<.Fqd`7Y>u&g(=>fe'AkWj/4^$G=Mp3+qE<nXn?2;an-Zpq!gA*c,EG-nC%ua@g!"H]BFJpmgn8b%`G4aU2X8LM4n>B4BJKB%NYb;6l0gihEU7>3J*^=<-iKTlrV$>-C,d9MpRfa4[huplWBphQVnN*_"u@*,J+Bd_D")XeeG6pf&TnP0%SIp06Id;D=6'Jnh`lA-Tp#'I<*t@)iatJ@'_.YZq_T6B=:2^[oP0#+M@\\FQYmJdu\;rn4%=[dg9ZRLY\5DJqBbUMESs+s.iEnqp%&/f1;cL9k5mp_'rBQYIn0Vk(7A@V._gmfbc5"#LMjFMW;9i4-=4qJ!kCPC*GS_674&H>!qkF[sW%$?>n<`G2p<V=$r.&/6o=!aeZ%OQR'1\MiM@%8uGL<'!sc-]S"^e@6h_Y1:d%PG17be8.%%WSSs8n^H`Z5k!]_<9s016P,P1*:8T20#etREUbjM/EVa!-f`$eXOfc,%H*4/,kUplQH8Sq)%'j(h<(K=dZ'_POHP;2Pc#14pUG]HQRu]9u@8'U`KG7`UO@G?PPa^C=&f62$J#3=g&CBoC3D:.[9>AKB+pYeE%Z:U>hO"E9/a3Z(?IM\OeqN6^Ga7"fjkPqJ_)\A&\+NZb0!%G_p&"@0^_i]V?UXAdjn*_t6rst+mND7A`J'gXSB8B`]K-Wn1V_bTa%T>=$1bJRp)0dLXe>IW6Y.b:#^(]L:.AC@a*?o7=gEGV/N#\*1N&&o]D/M>=6jUksjf?8Ym\s(NWN;V4b4@)g<MGVtqPQ4"/T%4TJ%d]`&c!Ys8(a^Ws@^J?uk@XlfHCpc@rc`PV$1%[$$7A#^7>N?7cZoS&"5b:D+_eHol]djZr<Bmq;\mIuRUR13IjkJm+3$6d3FP2:+%9l[3Z/nU_[=-L`sL/2#!K1R0FVbmE.UQ7<^@=0s[QsT3;<m^S?'^,L=]qF*A4eT[lk15Zj(_*`F0^K["?r/KM7*8bV-B("F5^=IO%Pl<]d9?c),foJIZW[DYF4MB/#nfO[Nr7JJZ)8&b`*u3N!e*?_3_.YT(!@^6!CZ3i]8"<a?%F]tUAfl!uk%=jWPFj:7)f/f/G,>?M%meg#!2(ou3nYe83Lg0Ybga%[t7))9aBgiY[-9%@nZ*+pkObgD=b`EHnTV)7:UqJ.!1.M*Sriq_W+H7bIX&uFo1Y<%]@[FtS,_2^h%B'[\$+B*e]kIZaEMQTH6r]rc/d?cNYk[.QaXjaDmB4e3*T&*c2H?Vmr+lb`TCnX;V*W7jGD2[F+_#np;'L7CAX'A!a"c(2IP496M%r+"[(Xg*W]LdSTSN[)U6A<Q1&QNFtNBuhE)U0K1>@/h'o$(L0Rj5-1P6<QF)P80fG]j.(8:R^9-"^]UmIi1Gh,n_J]iX\o?,C8'H%N98H0^o2970GG<UpnR$iC=WN&bg/f[.,8Vh'&"@:.O'ce3c0)36`\Q4_8F"a[q@-?W87'P9/7JbGA^qh'/c\ZJu)o8$EFFsQ6A\-%AV"Im+8Qg3UjHe'3/(@)<?g:]f9l1L;$Qq:@Pb/3r^2.lSMj]9rkPc-@*ATE&$f^BK*]n+`*jIM77\p<6e.nZG5c-CfKf>6>.m^B%Y).ccWP`Sl)@/->.=BA>JTVStrHmSXlX(ZPG(=i)EXoOJ[d%4jd6ai@cY"Tt`e[D^2%%H!oBUlTG*#B;3'b]$deb*XSR=pe)?.sB%X#n8ARB2%G+l^!ObZf<'p>]*'hU(nuM$_`G'9:'sluY`"-\QD"X8eY+4o:RU<em^T@>]fuobOn0jQA`Xao38#AnN,\JRH_i/EW0:%s#=@.=T44Dq7j_AZhJtJ(U(jY@5aL4L;!WSZC'=&>mrb=o0NB9A6T$/:Wm"t@JoMK3rd[HJ:do>#4es+J,\\C0XThhG!L&-[i<]W%!4K/&N(BuET,eQ-)PtQo@R/bk*%h-6_>Bamh;DgWbO>?F/FuuX>tu/EDh*mFq2_`NBJoW^KCC[aGPXkt=Vm+BRW.WcWLq!5Ff?j+%-l<pF>OUW@OFapl)\&]L]a8@qIr@W[^dMA,c/+hFK@rNfCTo\lCEQBg4Yi5_Z/H(S`>nUG[q9]$ni^qoGs;"-Jt-6thK2c:%R`3C%rYkFk'61)-)0Ns4_/el.Q@t*siG8RneSKA:B+OIXi=6Lk8lBJ9[S@(6c`IT1p@-tlYI12H#@lHbpD@&bBE26Y`0h-9Gt-9Xfj[-6%'s*m#-5(\m*ckqo,L3obNn?kn1dWEu&c<89E2mYoYqqtG4,D[<ru_l-rN4cBhZJX._B(H!5/G4K[!>qPe\,g"2pI5CA&9!`\L+AF%Lpf^>=,;+0Wr:nhdiFI'o7,h(PK8R9P$N5j3bbYJ)1O1u++p]hA1C<Es7(3X+"i"Ao)g&mlg_37Qq_$TUXfR97PRI*/]Am,?afa*%6lsfP^TSlcT?ce-2pg6"1=t(AN/!Rr;A)"^Vo'ogN9M"/3`21P`Ptqu0qZNt\BHguX_DF*i1CI.(8HmVR]Pb\8<'CloHn$scsIj^%<ie0HCPl8;O5l'@;RV<i/<qP<][LII*NFDC[a;f@E3H,S>dk-YY=sZ-Kj+8J'`'%S$*%Gn7+daR_F>b78F7=K49.O[`Zc!C3ZbaP%%D,VW?Wmn/,?dXQ9b<l"D[cSR0$s?njV[3t*!sf2c_ts"</YcSY"1Fja<K1%Z)&HjH-:Z<2T-ubK:&BG`MQQg9&)C0HIpd5PO/Z+%feTi;YHOj%aO>.SXHm&3oiD@dBOq(DmQXnjEJPH@=m"r*<u-8)W/I5W'(\_15`F'B/)bW*!c&8"f;,I$D7RKF)#Za=>6-)EUD*/B%C'd#)o9W'\0Wm;!F[cJ4/_bT$=[7ut9h2mHbUJ7ql&B=V-q/:@_i_$[(fKJ9cZaI8RpS'rOCC$0gXPJEPGpR`n)J]#5LN5^@@c)G%.ufEBl=h"S%K79)/7=l7]0ft#b:;Pg#?lQTZ5WHgg7+&aGb`3OcA729UbcA@-b=W1cV>RV).a3oecI.>4IG@:TXr_3e#5_^2*s4$%"8]Jei2FM'g7-_oQrsh<=6M<mBJd<PXVk7-M[1>]ER0b4^pQ8aZ)#8c$f4c54"8t^;$da4Fn@H#FZ\f]Ka]F*rN.IIjm?4J.BrI]%B+5GfAh$R4LSKD\0r$c@g,P=5.8>>C<SN_bL]hF-FHE?mBCh7mTO?ko+?Dh9]LM3;F6)DQBcf#f)ES.<g3;=3R5XjM2Jonb%H1^C%-j2IjX#ZNB<[*g7Xski9=ILu,@(@o[_:Yo]PP=h)?uB'5;cdfBVm%69#IEC0\>(c*%4gG;m8>$bD+,0G>Lr,a]#4>>a$SoR<Dl=l%2L>lLE$TpqRPG,s_u`o:.I6_63*=dY;4NH8'A=Q9._[,>qDf/f:!(;K(,dJgD4,&L#f9GOC9ML$H57D#?>TpWfGS_L5@f&Z%&D+E%PBYB<c%g@crhH!g4pk:%97mGPeHV"!T-=IWNo)Eh+'_N>70)#?*agC>46"Hc\V_G\\4Itg*)r4mKS-k17a\WEXVMRAe*<#m1Xe\X%TX#!6K=WP2*RrXH2\TJ8._\]u<fDqoX<3N.1[?JZg='H4<K27C6n&`@_?Cm57Q!E#L`t-@L_N`I%P?uYDkrA%UZ#OsV1e%se4?4V%b^7?e#4YL^If?U8I7hK#r,\P)g0c!=GXmWhodqk;NLZ/HC].uS,t\oC%sQ,a@VG9fB!mkpCi"$"`=K.M8Eq<"o><mPJSMO[i=mjf%@gb[k296LFB*7@"[&s_X>%^#Q_Y3Mq$PD,C>c[?b`ihbi_=EDIGYN&I+S8$q$3>EMR3r3beP?1'`QN:sO\Sj[YSod-TmYiO'e8!\%@n\Fq)@R?Ek<+.PieQ]"?7n4(^YsbH^2Pq_<SfO>n+t<uY#BUYmdkHJ(Wp#/5J?sCl_$2\#t9p$)a:qUGl>78Ie<$1jpggfT.&U@%GXM:qG:u/?GL(9Tn\Ws`SuKIF(BCU[.%^q9<!HfG;%9'SD_!1En"iueq2WI,M0cI-DGA=#a0DM^GBB"MSs9*/YrajGbYAf-Eo<Ir%m2Ga"?dF!BZ2G%5iqK-*d!EcX_k4hB1mYr3Hdj!<A1q@B'lSacjd90<hN(/l46:(P(e-V1^6Id/abSs'_dVV#R&"VFVQZ4>p")K4%'_AkQ0g':n+.ZqSH&jUa5J2s_PDAp-<IB+#.M'DpQ&mNYH>$ukZ"dt68FQ]Rf1_XX'c@QjHWO:fj$V^n1Jp9%?(k$1%42k*oW'>@%5rM@Do,I+/o"E*9pK65BRF823bfgPogZ\m48SR*rEmh@?qY/nUdo^I?hS-0a!0BsJ`95UIF5p#2WL$#]nId_GoOYM^e9-XqU"q&N%-T.)_&&!F3`qi*`:>>,6I%/:`NB3WtLJK-9T?11KTDm.8IFYjVq#)3X0Yp]*::Gq+E]8+QBITKuHqLl,E-5A>kqos2CL7j8At?Xj%[@N(gj%aBP,EHcXd>d!#,5CE'PGFbXp\/g:arehtIG?9G`GS[;Vt]1,GMIdF"1V8d(A4au+60o\EX6e+T.H,QbFr=tBju1m4ZD[@%#sn)mcZc.+X6EUI--,mShQYI3nX2?%ZlYi%hG9A2&WNb]C"kl,:[O!.SVi=aeedfl*hSEQAV<`7Dpi??a5bpf]Fb[5`u;^BAq]@D%L#GS3L"V%G4*G[ZfP)qMBITLHH-pfI5PR3!1[an^)\Zl5p+CG*>XIni&1jW;]Vh^We5Y$KOtb-[l(3'F+7\YX9jT`mDb-eVVf+jW%dYB'Eq,g?.G.LuZSYa&EcBGb:O&&!ke"AZWmI]W>[9PQQoJ+-dAd:,e:-H>Ep.=?0Ud#.2NQ0+G^(q2P4)I.2O%X)UQC46@]/8pi%BM:A9k0DuWUYAQ`G'_VJ-`3G@f4).M;5]4W:q%grc'1FJ7W>[F\9YW5.iNSW>Nc8c4+2N/c>R^#*oHNjTAn)dfi>hte(33mf3RJl%B\;S@4F1np.?_g"m8#gNG@uNc-\6P+s#i4,o^!tK4r.dB_bR7>&L%KhIF4*5?2*3aQmV()ZTYL+RAM)ZDBIocBkW?;c?9[!08lH(%e7hZW3^pa?DVp$^]6(.3R@nGofjdc]$/?u=TD-sFSOUTOa70X])Hdgdc)CAN-OC%Fp\0\[9;:oiOs-A3r7/#h<kUr\CnGhG4O5'a%cl9J)*Ro/NctQ2<'_Od]iADQG2>=g]VntdXWAlF3BW'PTW-5!0l]Q2T&9l85Y+&/189Z+fM=+jmFI;hLZ\77;AoIQaIbm>\E_Fh`%/9](c+Wl2I>Zsbghd8=7Ng3N8.OHc/hF"11'UfuT^$+hGg!6\4@oS?J5R;^bV;2KC)G-<BGFV>5].B1"Oj/(JF"/bQ7\sTLFnT'9%R$>nZBf?!Q_R"/WhUqE@S_[>m9hORR-]R/WR;qHto@sb.&dtO8ZgMb(,[XbGq8L(igF)IWD!E?V=IO+jYgQ.dKaf`eA9R(F>c.=/%EppU2=O!>"*r9ftLUTc#V5<,;XuIsEN#@l3_lr1_eWY";Bi4ZJ"o*UfC$XdMC\Cp@.A^4,[I1bXpfWP3H2HcK')<TEND&`4gW>@K%`:.'JfQ6OZVXNWU?[lu>H"^%.\`7_biKR_T3k/r3oBil8)91O$kKj+1`jT<Tn+ODDj7fth7\uiHHTgPQcM`2?N@o:KR,^euZh)TU%PfK*H0#%>/][-Hi_pZM.efXN)HJaZRd9=)*b6<Jf\&")&St?2sVm=9#`Bl&HWUG:El%P)GG$-`J;V%_52gBAYJrO$G\FkSp?BAIg%g;!4T*s2oGeclMhm#@OJ,$jF#4%3K"k9f'lR`cr2T@.fI1d0\ck31V&)`pTt^)tLg,2G"4b]O"Y_qV=<F!miMS)Q?8T5-rq\[+@p%YD2in*lS*K%l&7=],0@^YZ>rd%m48N8_pMKdr"%i@bN7UP`fZ+SL/Q(a8EcSHJR1pHiIR&C!E,$n$H+/n)[;i9rI6ea1(Z0>WbU6%ej`gG5H?l*?garAH[^(1lEn=8\"e$`3Z)/3PYONVcla1(D/.j?r;PQcdr"&r1$o[XY<fULa]OZ_M/7sM=f39u:2<O(ZgMV@`>XSI%VkB/WS"VcWg*t)tTs:Mb<AoeX%GX,G7OOq<kW>eg[PQ:\6Q3%'c0_j-f0P>Siq;'(Oqo``NJEEI0(iMC\&82ABejH9l:9aST`6l'%@\a<q3PKZ[JT,uTVB5t2jh@GfTm6?!UKcm8HUp9e5F*`4SVn-SPi\hBrfpeHU$bRYcU#MT+$4KJ5pJ<)K''>T#"r;)dDpL[KHg-\%q5R6`JL%"bDsMdmk5aYJ<.tf`!LPlBpjB"Vp]KSrX4I(qA7tH=.\V6VYH&55_L1a^NIL;HR^rbCJY^rq"K7_G:pJtS2N0j+4q1ee%"Qdm^Jo^431IO;'\5:r@#3.5<-V_5CTb#Mi4*MG*)<;/a=/U65(I"\f6L5l?pi%m2KEjeYA3$9sg>uF,T9=]J'Nl32h)Ha)6HSB2%@c$j/moH58"g`k4-Z!F>^V13?A\?'Bn4r/c/`sZ$=-A.2/rYGo!]`BoMk934H)g9t*keE6+l4:-CqNa#lLV)(2o-FXY]d<BPqiHs%<M.S!>-;+^#KufpHp"F"Y"Q:*Jd$R3,.:4U113F^03*Jqi2!p/d'+VSBu_:FH\@0u!+?)&f5&i4H$n&M!df/k`j5P,4N.]IM?B"e%9_G@tePNj$L)N*c#4:WG<``?u;nhttCP3HkafZ3HT(P=8XjZAfd3u&;aF]SCpN#oRI:L9%fB"?PO(nEmZe[GX[G*"B,KNl0,*SAV%10b9P%m!eYfU+5$r3h7BV!C40K%P9b^r`/7;qA=\f]ONE>D=[*CUWYT\R2N3O?#3GfPnrNTS6NCa`i&g-UbCL&Q%]YCXH&23Yae8%5`;:o)0;X[0\PcNWql&6Zr2$l=d$#Qn_)1UGC$O&p-a0J!T3QR,7DL-ZNVeaD6[+kn2O8/:k,*!Afr*C4KH[J[ZX<rcpjjY?0jYD%5EF,cV/seOhe>qoWq9#2Hn.&)hsXNM_'Matji4Y8b$'FN[F,r;4(ui;X'5a;MQGV6`j?B'jWLO09D68BV7ZV\eo7_nX&R^%N^NVf%T#_Ab0=Ia20ctemSZ:9_T:)iYf3@5bF6,n4@I/8:3cSRVa,P[R!':@VWDo^0V$$'D2uAn\6Sp*Vme2]?A&2uYB;S#3j)Y3X"Gh+4%:Bq01`!Ii8;SWS]>2<'X7'BhKi5CZCFd?I&&'-ejG)7^)]uJm]jCCn^G&aPb['Fq7r'I/-(&X?-]+.N))@\B>CSj.OOn^V=&7gM5%Y44t(d5WE[TJdqnOG(a*^)@q'!,-b,DXDl$nJ/@mV_06<Ht'Cq!$.Hl$H?%\U<.K&ZVT.^0&g+K<UG6M.N(?4"2i1'-N@g7n*Kb]%.qIU>+R3PV=Y<k4!a,gGCZR=WZn.f<@hr.`ar[UJGfh\?q=Tbj/8jGj$1(M"M(t^/-bIr!UJq+3l,gP?E"pqB`=?.Ya*R\i*ZF0h%p#%BVk$QNLU%43b0.k?tpjIUORDJ7e<];/4BAm;b`s_W*\trDchp))==%%uO/[(n.Y>6MQ6KZq*nCOU-JKi.a^':,`%ACn&<g>kr%X3tT#.(jJm9HsSQZS(Z@n1ps$I6B]Q2<!eVFrAe.KZD%uQp'=,^RXN>5VoBM60HpBYBKHr[CW1jQRuRSp@7PUUksc#Zub]Oa)3=+%VC/t*:;+BO6B$)]1D'W863jhMBsS#r8NFSH"'l].Q2uJ+)o$qnFa*)-mjq.7,_G\qKb^-Qi-^SfO4iQ<]n==6:<:VogU\YoTeU.b%\Pbol4Ba_,ad0;kB?g78VqnW+\"bf+=,#dclLA_c*TN[tV%o'/G$[Tr^46*mVl]d*1$oIEX2]7!n_3),d5PWNM4WE-%Atg8BM,nl%B`7k3*%q;o`MS^<*hSi5EHgLUQ"otj/((_/q%a5S8@7]j-(6SB2j4\A[+Vp^&5l`9c6_32gO.Jj8>>(6G@OPY)WTD7BZNHKgg6WI%Y8p.j-bOrB[RA%,$Z9ToSH?:+J\>.?cE$3\fb$$-?cOQ(BljB@jO[/[!FtD4ctj^TH/-nXTbNT:]^q^*l@QTJ%"'`Gr=(Z[/[]R'%>OlGg*=,f/c^C.hNEL#hej<CfP>Ph*7mB8/No";Gn%CbokNYtlj@UhfckpN<7Zh`t9iU<C=g]7tR\7\e46E&CYEGr1'6%IJ)NAGO%=b3ep/L5B'G%:CIe$%/&kgJGm)p;go1Kk/tO5a&INm(#jBF8E&Y4KK46ti.Y_=%0#f^7BF/S4Y-fC*WPf0X\^fW>8ShP_03(8o[-%.]]8bKUm-!rabc(+bYN(F_dZ`q'&K2Pukjb/#P-3SK\[%W^%!AnKZ+](1pL>6)DG[VRpbS/D+X#N\t+l<8<o&GJ`0=J&9L3i';6S%(`PP5G7Eq*4XJuGjE%BX;oB#(f<rnFAKO[F#K`K-<>=D3\hHP^N3mr0bEBn(N#nCO(.OaFa>L*5J$4p02aaDTjso28Df7&X()m(X%=^"ejMtQKI1cA^+LmKjY`1O,/0f1rog6pFohjX@KBk&J>7QDBn#ej;;6qi^s<^>oX6!&qD<U7aP.,:I[FhXCG@Q3BXIstZiAmEe(%8Om*,%\7_HS]A4-*'3Bo3fe283HWgiFLkBP<mIDFcCiWs$a,UZB:V>dbnaPILX%r5:7j,JC(?eW#+`fDR2e9R$p%\&i6"'%eerQd%pMK:;3pR28-&6]X*4h5C#+_`K`+9FLFU"DZG@;ANCnC>YF^XiVA)PTfJW:/6c^]S4>HdEWd4TB"fC_3r%lB/adFuZ:4o+J.Roj^o%SmI)J[[UB>e#D*Z[Yn()MC3h<NAe/b6e?Qqa^?8nGZ'u6Z<s90n:nq1kKV,]^D'9&FF6pj+Mis%!%@5HNba_UR?'7D0FL"rVT`Iu%ZAn>*)8Y0b78pNg*B@r&5\6OYC_mGQZhRk,laVp36]7mP4tWMYCkh(!'Z;QNr]WG%$3kL>Qq71pCO(6,::G'c/'4/Y+@"+UkBFGp%JC(%M8gf@LKc,I\1X47_HPX&LBg]+dbutKhPmG4[-?gVs454tV4s_/C=!-0A3))099el#@MYNBGo'3Zs@(DUuga!)d.Me&^d'B.:%?ZV;ojD`0)4)LSAmiW!3QcJh[[oOlHkOE8V/I!s!0(QeoF,*L<l54aRT]Ur<P@`0fC*E;d,G<7ji+5X0dJRR!NTP/E."W`UVX=:a%jmh$d`&K(JR$ZoU&6>YZP8"nbSqWZR/>DFcA'?oFAjqZHDhY\BV"%:fN\RDRr2)l1BK]o&fO](`;m8LO[L%nWfhMF2pA&_U9dgI<%$61A`nVSV72V^GK(im+Y<ep4Jk`T`5_UpYD`OO@pp7BiNmCnFh=!q%,ZE:C%1Lcb%kB)HEG=Ken*qL()45SR4__<U#F+k)/3H>=D%I53jb1mbfPOXE4k^2^7raZ[t];6:nmYfhpSBp%PBr&bq1EEh(la&up]Br-i87[/PtA7t`U!m4*SQg*Y07NZuKqtE"#VgTRV9+aQe%nRV%Dd?/s5k6gCl\a_MDK7mjojt*9=\hjMGGINH4A_=QaaI#Gp.qs"(i(<6s.Bpk!V6`8Yh9=BgVK:aZ.Bk2r'2V_c;EK'jOYMiH%s#Jqt7g9E>J,KYI@g=%mO-;E-[66:,/XZ?>4$`Sng*<B88@?Xe>Jh[1H/J]XY0qC8PB.:QP)^sD=d6kP@OVgFHg\;&)gA#-:JWm2%P?>>,XWn%?)B'u\9?5*aj3">W4`M#nl`j5Qb6?Hl++r3CX-:GkVN4lP)s2.W\r\q\<rOMPpeFkKf3?Cu1J&b;Ad[8tLu@>To0]NO%\6#e:l9b/?cTD$8SQ,7*D]OsO\Bl,G0=CN"VXrc*rVW/1LN@S:f\6.?1^[EQ&\%"P3-Pt7X6.=aj8(AeP!,PcLKc-1d!7epl,>JC%E'sG?;EhBE,Au!+E7CYmWBE2(HoRm"!qnOD%k!q'@MNXg;Eim!/S;;j"2:!/UiZ`t_TX?6b]-=PmZ:juh9nkgjAM5\C:o&0IX4-_%+bu2A%bb&Lf#%(i0=7K1Sl^RLPk_XB\Y'sa]3-'TD]eLsD<VV<8LGVte$5U_<ZWNk\R7cF'5B'+1_FLF$<u(%"H81CJ)[hV2QT*u%38bdY*&D0DlI5_*\kD2qfIuQsiVdjCVZGh$>d0o)PT$p8!B,U3Q>L?FBAJYm*+Xh?'RNab"-%#UR'A_ib/,Y<^-6^%Ul-aTB/U-b%1P6T$O>`5`qXhD9N)\<Zjt]i,IQ*@Nb&6O/DH=nNm;/DL?-,0lN)\<P#37+G7C=qW<]a(#-ejSZkJohl\?mNR&ho-\TrDp^N'KLY%'df/lanfj$_BBj:VSXd&b\aeKRoD@=K/N62DC-)nKeZ*sSCLNrh"`O'9nfpY.lW\"#Q/&FdV^NLNd)9YA=BZd$7G_kS;#e8qROJ"%n>7^VGGYh2=<XkC)'j1_l;=q"`_9kDF_;4GE$.MX-3kF"f3u6Hm30BJDD'i]2V!XF[Z-\+%M3hl^;s]>nG!tS&$!9'B,%%H*$ju$%=WXLPka^EHB1U=:gWrgeO70'jK5bmW'UtGX<UhC0R_,SIZfP*OppRIa352I.6C1ap?Z,EM8ttd^2QF;p(@IcI5.@0AY)q`N]6dQW%jI>8DZZN7@cGe4;(UnI,hpt2oC/_q=g%+1:=gHeQBsJ]5bfB!0<G0tCCUHkt:%#g)g<XBQDO)/`;r0"A%^+>?m1_2'r\2O7$KuN8%FSG;O3)um1'JOpb[+qWEfaTRT*1:?."Y;Ir[Y7K+Zr9FR3Gb1,Rb[GP>Eq/=%(fTAA@LBjH)J(ASHk?RiBBH_g$l@YQ=4uGO\==f%\M<Q[>.k\.*dH3%/ig.$qF5Pr(;X6L48UAtpbH>b:V#jO>BJ5$-p*huQ),.Rq*(r_7-+jtAN<cP,F>NAmVP=/F^ajW@NqK3&<V+M%i\J<k4LHPL(g*ZmZZ(*PQW=d.#K\sf$3=/8M'mG5jYsN,\Q\5E3<P@j*iDb>gRI8oHK"@uB,e\97(^[ta7[!R7*a?k\,%Ck:<"[;%qrT_9f+'(\]*96"h.a$B!g96Y_86(ic9VO+NTJEJ7cCL#>sPm[l!6B?cESI'X_^%n>WNV>2O$pK1c3OuZg#^/A[C'3lXi>`^5]7r%aIC>L1KrCAhtY3sl(":UZ>MRkM\UMsCc^s*P$C$Q?>Gn\F@L]peHo1ob,-u;V)+2"=Z)\o822rWm9)67:)18hkL*M'X0?%kSP_![%[OX;*9kOTlC44c32P!\tSQ8\C6oLTuE[lE^2jR0N1k.oKfjm"3OZL#;%^1.9SP`>Zq3>j(l)ZVJWGFVj>e5&3Au?L"?u2r]3hpO+%dhqkFZftEuaGrOmA$2<*'fbJ`3kQYT1n2cM#(G%SF@H]NRCpXX3hu=%Hpd<kZg!F-B90GnHA-/r"(ZAr:SBL3LP+^5r.MsfZg!EJ%;Y>HcFr.%/)h8*A7FW3*h"0lBmVtk;ed5elCV5!6-U'Q9]f#<AW+>IRm]4MMgfCo\]a8<FeJZa^Z!P]FA:(Yb"eHDZiAaq$`PNK!%<9C(Pcmi2ENdu-p$</,ch_)AJ4_[0-(%&AJVg,M\I9%_(/:\Yk*4K?%1)5.l8/QumkFZ8OP$eiNjMWiu]SU;MLY(>/1KCMVo!P[3%e(cS=A:Jj#C[RMVYI%$">NJOt?$rsJ7<`VSZujQ`RC'=p;f[<2SY8PNJ'jh1N.g;.md)CU=VRV'20WZCDpC8%pqh/e`rRnsT5ukQ%fiXh7+a^rlA1m87DD\`%J*gL4l%u0;N+Mk8A3Ca3I?*aMZ+3PI3N5Pf=#s!MEuY!lYZ=)FTm73)o6^@6afj"X82X8;:RpP\WQnDJ%]O@l>Z^ah@rc,Nrg$FV_\ls4S$e%!O%<]5'BW+SuX.=7mj,2'YbqBJR)^0lA<c,l<VcIMcfTd6>Ca,K-i:3qoJ[c_9fr`iFD'HT2%A$-J\eTp0N`*.d<MUAc#od]A,<'Y,uXA<2CV;Z-WiZ-f0UftB(;>E'T>,0O0^/q?PC8@s8oSF"?RE[$PH;!$MLAKWg*S&`/.6!I8%BG.,?c.ucP1NAl)@*/;PmhP8ieVEDpM[)Po#4<=33i.(th.k`j>5=]:4]Y3G'X'PID0!5]KL;Z:$jqWs8n>0\i<A$f\<Kdrs(aD&%:-J+=Nk=tmaJBjD/0c>YZ_?1aG:r<c?K6c%IHKSDf:j5@E4>+,H1'>*r2.,djE"?[P*b8!L-$csnb$h1e)0o"^Z-s8jG#aoVj]u7%MPKL3m1Q^`__kISG8(sBFc[!3;KIq;Bpr/Yg$Un@)-E=[[lDBA".>2[%a2+?kDHXQVDen[`_ef:8?@MG9ELc,[[;J)[e];[8PF/:%MZ13"Q1Nas2kgBd3r<)=]N^j7jnpsT6B7J20q"^*<O>M(OlKjiV(pf.BXSl*bMC0u2M\/kftP&T;N!8FgYIQh$&P6(-8DLt@ut;I%@kO/).>@hc5$#M]WVh(]YT/WR.>Hr_$=L2=RiL*opC=?Q<1S5AIj<dIkt)=Bf0(&9A*'YK=lf?k.b%G7%V*e*>g$"CfmG=90MCpT%DDrB=G71RGisM.6/MDCh=jIQj1G-ptdk;1HB+QNibJ](cLf&Y"Rb=>bM?VR$;Y7+!WVahjE.:l5W/=*aHLg@Rj"$Ij]lLXt4+T*2%bGhl@pdSHVW-:gW&)6c!oOsa*GNaHS18frs6Bh:jSo(N"8WsZ$3p<-&-/g.6K>'_A`2HUq%hc=pF8ok,69f)9.3i)_c:p>omO1))%FS<+F@W*$Qefku3VttbmZD!]AW@BdMj22._hgIBn9QL0ArMHQ.io5qT:VmJ[*rMs4#1KL/=kp.r^ONW5r;/3B2jCVrKZVc0d9(Cd%Hd0B>hlP:X<>+0aSOQfJe*pP%23UeaFj9$%qG,A'jqR9@;ZP0gRF8E22%Agk33!dEC23>jc"dO;U`NegRn3^Y;ds!?0j;0cajNt4%A/&$]'fHq55$b>)2qc\4Au;7UVB-BAr1Dj]6.5/h,G8:q_O+t?Bf+XgDJ"0qfYt7t:273,,dmA`6I6]G*O`p./+,a)/@*]_"05JE%9!aH&>c&jSZNq]>cB:.mN:25\.XKHNI+G+XE<DH]XXBtgBm145n'4*lb8Ek9-nYD")+Oh$AP5NDY+h++EHN@pRd.2]mS%o*Y./nZ%aa5m)2pUY?Sebg9Sb[&I_P%&6pnbQQ>oki0VfhrJ03.Aj>1Yunk1me=[GACE)t>I\WIJ`4`&Q$YZaEu01$r+`%M/AtV55eXUruL)%=gO[dVY-=I8sh6?fSkfkEsA,+#4,aL>Hj'S;ji'fGY8^R$62BEIb9nfQ^u?co!L7JA-bm06-]DY"WMkXZ'"o@MoF(L,$B5pdmji7%9Q?R0pgSZsJZBb@]=<*F2qA*Wll@+6So`gT)cqZfF*GbL@=?@2.\Ki!4%\Nje!.R&[`3jXq7DL9>8GL'1XGlZf6uhA)=FV2_e!j=%'5GbbnmCR!Z(&\!q'B5q@*JP3T+s$q2f3@[?.`CDUcEtZou1b`TF"7CjT&JT6Xnc&lPoM=euQtF5c6Vm<:[6V:Ni0/BVAWka9$IP%"6eqa1D?9<^JW<$=4BMOT[OlG-Wr@i=b+e=XA%%#mMHea*'dR`ZJ"Z8FUk(70sidZ3pgY;9DPZ-AD>V1I."XdX'Ws31"6EOJ6MVD%5(ag-rkP@X`c>nEQh#FgjP`Q\jhk7Dgjo,h0BG")/SgQ:nsS?A\]1In3fog#-ge(83[3Y=;/3=WYFblKdB.jJSIK.LYMT\lE%B`0%B7_jaX5>8LL4XdNerR7^Ej)*PSC0mpos;B_cgf[b2Y[&.4WA.LHi91N7*Dp1f"BV\3b/i.3Atl\T=)OR'LB+K]mfh:C2`c$oI6n]%YFfr"PK2ORlf_Y>l_/TOS%7-h'/tHohs4o<+M*H4IBT9-E+a<nq>0j^=\"u"k9R3tI\[H:OctjaQtJ1?p$_Q0b&((eDQTusgT*l8%Sj;E0?9`4(=43>a^"6&s[dgJKmdK2j5gK8Lp\J%MlF5&eI*OZMb]?8/h<S\k#)4p32fZ#Ch,#i:ePDIJ]5DqP`N=TX\;N64os<G2%%%5G"]6jJb>ROI^=)R#(5O2PP2NsCQ=H@_t[E#c-]meNO>t_`&/)KT)IB26Dp[Pf(,hVBG^9pc,ODjgHaF/HE9"]dm%S-9i=`4nQ%U2AMnf?YT.6$9!%WgC-]oi&m^0Al'(@TJr@p^Bj<)n=MGEkf/DG^gt4qH9<8DXQOhrN:%_I=)uA6fVDL<kFF=XY"C3HGf<eI]fj5%dl4*f;.kl8rN'r1ZcIN9Fg']VEm2qEIb&7o6=]?;l_fA.B2u-UC6R&YIOk3i<k-c-X;-Mg2`SJ%cRrj@1\^`K[t9$#Vrg0dQT7hg%\,*Wp4'g0eRX>!tbUTB=RsX)Lh<S^L#,kV.c.qVtNCp]^F;+EFaVZi+jt*,4k9T5)q-H:0I`ka[os7D\1cTc$Kq,&BdJ?m.=4)X9%p\J#CL+53lf"HO`MW)uYiemL,R@o`"l=[O]iq?\ClQ$q*D_q.a=iUU`B%O2)YFd8`E2J0a?BVWFoW0uj[+Vjfhs4pg39[\.=2!53%G]@E:UNge*p<nn(J5"MtX$]RcCR<r'I)g>h?'!<F(Xm*V]f'_)n'Y*]=CePhe$-Oc8+#laJm#f!"K)Ps.8X`dZWh4%69^dgrtnj_%,I.2GS7@i;Pq"Y(U<(T:hVa06*fKg!Hi38FU6nK+AtP(8AC9)6&(6kRiGnU#gY8)#]LCd'[XJ1=bjJfomSnSkj3-Tai,]f.?8d:?%;r@Q9a3jWcldOlU)-gc/Xf)$abp>G7H,'8>+-*L>Z.$\:CG"IoI4^3U?h]D\Z_)F)i-cMi31>c>9E2^So"3cGa^>bQ0tX%_JVRk+%-Bnh-qX_J65>A$D)coG4ODT>scS[Np03:1RKarG!,=Z&JGt,<T'q!_#UrCj/>+_NK/4@FqB7>?=+)Z40i*MjdRK'CDEp;."9SjR`%]eS',e>kS+38S(QB*6[@WBIq:?>t@-IQ"Al#fW[&/*;0#'p.Jt_>VgNKe]l&D#EkqHM:K')CJbGgX\q%O4<2G*:)T9\f9Grh6hIU%#G[HcI9AYgJ%KOXigIL/A4TH*7FUm.NMN"i?\g7"_JEFi7(hOK3<fe[(MIMC'/d38i=\SkHLm+Q^/[uWW5#a9$r'lQe9EC;p9T)Z%/mc4CrSAO5k.qCf0U[/E<iU35,P:X#puq\QW`?,Jhcc^I,$,=2],1G:oC5QrO-D0NLT6$)nQgD8g8uH?=T"jbfXDFiogXS9^17bt%_bQ/EaVe0,hnL&eQb2\lpKI$@R98W2!c.]d6psH$D7!^5-Js40H97"nCF%TIZ]C(h-C0Gmn5"_BUC$db%H3q8R4j$:c_Cd%jZtI.%_Y?4-H[,<4]ETEQR.lrBO/%?)=%%#"Vu[>`j#=LkW%KLq\oL)=?#\'^4[-D)W\4.h]upS<WZ\V%pll+h!Ba8gf%f]7cU+YS[?kP;%(LS2m'i>cAZOAsSd3Ts`@N]+DLTMqn*;nkggYE[<h"H#L<9[02#lKY&!bW=3MSG0u3KK=q]jr#73G7idnSGCXL4@W`HOl/g2H-!q%]b$'l?@MLEoI>em\Nhq)QTDg;P$XNkDOTNRQY7,7L,4CIUBBXj=&"iKA.k#^/^.elPtHMT@SGCJ;1$q.GMFC;C6=MCbRR"l#@]H<%*H)Zkc[A%:VSL*G(Xk#Uo-7?7R5AOt?h*4Np.Z\`0!OPh91-Ho&IV[>k<K]n-.L1>*Z?RQqb$<.6,/D^3VmU_pjuY>Ws1Vg9<k7&%4]CIbk,(<WgWNjdPjK'$`t(=pFFSO_'Uqf)R.i+h:A`7sm<,o#;@5Pc+f5ATbQ0g7,e]3mVhUus2o!uX%nC&#r91uG%*E(RlHNTT%;#*L(R1lYDM\LOL-Mj,;&ruEs?cI*?@+5&%fg$O<'<FK\GX/>*NCYX@oT;0[,4kaoqe51+61Wrj&r?Gd"`/G`1BuVR:pY:V%\DO@%&-eNGr\FVUJRH]gZ/"joC\kV--!n:t@hRU]!g*Q[e4mXSp0I#0ST.i-<GL1e9[5*$n/1+29uqpg?2N)aG!F9ZHV#-p6W#q$WWMrp%'W5N'g/j'3Vn<K,mIhEs6QDGcSd']E>5%[NmOsq%Kcju`+Ii/SbjfM0:n=.Wpq>G5Z*>rQgM(m.G^t+sL\o&th:d!ts.5/YoAp$\%]]h4grMW\.lb6a9n$3n2jQc*c#/AbNYHbbF;h]J>/2@7LBem*4i_pF&//SKPC>/bNn(s..nUEY:\NoVD@Da`?3PIK>h-g8M@4%>H%F+?<RhB!p.r!;60::fXG*9AZ4O!<=?^Lh`J@O<3PqGT,,)qQ4"$P^=8fNr=%lk7"f#r6*+=X5T0^j.`Y]X&DWIP8doFCR0LBrbS!%WdM2\LPM]GN)]M2^;V:D1!!>AKI2nfe)s[R2XGm_Ej(CZ(F'#Y'fPm=H>(9PiEQuGCCX3Bs,\-noIf&]4aBr;"+bY+K$9l,c`sn8%#VmZLWn<>%PZ>9#n+>lZ)Mfg?JIWptLeS1D,-<o32?lIU<pj$$'"B'*P5R_!1AnpDKD>n17_4#`G+4I2!otcNL/5K1Z-RW$QL.+]%:W@CYekg$g0H0O(@a`[2OsYC/??QZQ7+a.MY&Y4J.b9Sk=&`aj"O\0<2LoJP,Y7ela$1Cd2H]6G@`/(!!D*rCJd_LHS<K^!kdNgA%3N;AS6hs.n_1o[FYTf]=K'CqPHSbt('[]<&BgXu5,n(S9^(cJNOJ'*Cp@pm3iOD.fe`I6@^I^iB57!Z=aARGu4ZPt7HdW8_8)YG&%p)5OJ5&]4>$m+:='_t39O.Y;kCn2cpo/2OR*n*N`hhlH*80!a\o;@EjBXGRgNg_M?I,?o@%;QC]r*]KV5N2_R7XtS.Jl9q(%"dUe%,6R+AhG8b*=$:Aj5V+.CD:d5\ir)K%WF70Y*QK7f.YrHC]Etp:h';/(6,89A&N%4s@-f`KRDn&+2kc-X&*Yl!^A(_tULn['`U%Ys%Mc(QY]5;"aauV5<Cr(J:MslJm_M'E'>6lH%?4Y,d@<^GdMl/5lmFQcnJ-@/d,e]'d8C0*n,iW>t6Sqj@GWE-m[GfjCgP^@ia/?Z_%\Z3,]JAc9!b#Pt_T&1L$SY="G*FO6.+G/SAY_%=qEa7]R=@>3o7g$Y:&3$at<UF0RkIJAQ+--lcB2uYoH?o<j*-&f?)m61&J1LS2%L`'M?O+9lTb],RcLkNeDM3F4\%YcJN<@.aQ?TZ.\HXHc,)"R/90Q@a2(_0s<]HE_JjU]O^nb27l'b'[4M[:)`0^sIp)Q=s?*M*fZ%!g+;+<g<'QAg\WN/\tFtYeB+'0#?ou@[2*S&cn%\h!;jZKoPm$H&1cj>;G=oWhB,V&Y57Ban_`N#8-AUR)Ja4f$6Y,8\%bbK(?&G%6f1E'YZ\+I4MTMO$+*gQ0AV[l*$holCOB+\(.3,R:a`OSNOfD]@K@<$LkOc^Km9BH`pQ>%631j<VP;1/j5SG&KE-:u4rhGF"QK3Q%!Ts0JWBrlE?WLBiO^R&E.^6TQ,KcAHcB$B!=iDqhf+jU2.-k)*G3+A\[Q`IKI7lhWhTKeEh'^4-G/'2cpV.EpmdG$,K_c`fI3*H#%(T:[X=KdTdFX\u%cDplHEbr8J@UIbH%$%YT1Y>I@e8$@ZlAN,$kLA1P'16N7`D%<f/lbV&T#+@$$1*_r?bZdg#P)=6maZ*tYuY9$%_p]Xu1qb%"ft@XY=G91aK\,1Nd_r]!$1r&-BqW1A='X%$OaX68J2J2E#3$33js.+1L>Z98IMS->+lb>*q9-_=IZYJdN'I03Z4Wof%j2:*;n4@/(/;ptW3-A!:\B*R`]m)lf(U*(aA##V0(f3?aXRaBJ_/,8Z2K00144Htd\o(r`8/XeQ;kik]$Co3:ch_^)qs,045/C_9%DQ3>_3+Di?a-"AUSduHmnYrj5HCu+a@%l%dH=@gWLCa<AgCcWK1Wb4u,Wps3=#tRYb:4nGPTT`T&dk?F%1;+0GaF1.iC/_/mc.PA%_Lia5\l/Xmq-Q2tF:MN"p*gXL`t=flkAI:\V5L?P.G;."5uaP+O71@UM,aip`7"UZ1HN<#/"!OW?3LMhq!;ur7_tXI!]1[\&gS!1%>9Tgj1K(e?+sftYYdsjLp74-^1N<qX7U"g8V:@OlC>e@.#R3+$kJMNZ=%&n/Q#L3rHG^TD9k!PdS.4N-*Du&>^cK]\]1s#13o,as%GoNC+C!#2uqoO0DU&?fR=2M=OIuPDo:^#HC1rD^_>SDhm+Xt')Ra+BA=4K^4r&`:_nS(`t]'5G*^O@$WMtP"^HfA&p5VV>d2qm9"%eAV<HdK!31^$hrdh*4VEN5b6ccn`IZ?'@<hs#QG0S5j!`/;Xj+F[$GhV6TpDR01Z:db+N-j7tQH@(];i[c/u/a!/E[`pOYtl_1W=%SXRrnj!HtGYq)osqBiqI9W5pHFN8GC.OiB-F+!_+"a21B12M<erG\].#kh(-WdQTrW5QarrqsA$L+=(LhXL!pah(h2DSu0h=uIY6%Y:7'icm&k2^jC:rrYjVlWX\JfFdUlgM0kA&NR%K"$67n;/K>crM[+4qB.5QRmga*Y&)FG;.(tfkHf@*eBZD'@m9cQJhLg#*GK,3=%0N[7=BK-m<BO;QQY0(+ZYXQ@rnV;tRE9F/&rl,2rKIqan5DOT?]N8+jl&Xic@Wtq&kdOtVq21I3iSM*-`QJkLU:Tg3nST]gFHEI`%cd7:3);aok,:t[)f$Ec,$kF>td_0.p%B2,<!H*?F><\0Z?P86]MtG7tR!*u"m-)\]eQsV,BCW?-.nSITHqT7caYj:3?V\^Z8FKr6%_h?S7kpgQ5;8g7]Yg)1tEMWoSNqHbnPigF"V2Lh/[dA.k.I:,*[0<5af0`qq#@kY>\H&,j/F6Vn/+07Meft5`US13Yk35koc1W?f%$GW&J")cR2m]CfiU/Bd<hcod)pM`ub`\Ncnfol]WS^kS"8G#4nmR/-Vhb.dqr"J7nLS[pun*N$N<?flr=*`#c^pS-:Nrao>ZZN.]%KtZ9rkqnHuNm3/a/n48V^O&d?<kCY(qKX]4!VQo<`+]GRLdg)W\.P2#J6rjMYB-gEK1@&,.brce29EPf?8W9+LCT`9/=U+\^YY+l%"UWa5<4UI7T)EtC$+KfHXP?fAh@iu2F-68U-nt.0;6N<,pi?6^A9M:KTa^\'NAn.;pK85T_p&"j?_L=GZBtYi_"@@\]),jGHOXJ'%cV?k@+(S.eJmG+l<4Y;P.`@[dc=P2<lb.qU'^fp#`=O@ch>SHZ.R0/S7qZXNf%s7hJh;2]C0te408dXtliuPFL(E4HY=@2O9'mTb%4^TuL4hm7H;^^&R<H3DE\V)Ir#%)'16gnok`5>j!e^4n]<)4!^LsQ]ho.k-dho;ICh]a5nIFb:o,C*$0]+j'$aZ4@oId(kd2HYEU%!!"&S0s`u&iIDn.ENNf6ZfLpi2bta3L=JH$<3&s=Ogj_e"DQ([mV]JOWGduhJJ^C)Q8"a'r;q!CM?/E0&`Moi$BroB(@:?c1B7n,%$#+YOk#]Ys__UdHK,^!cP7hTVL^&U`f7#k9#@VNq0lp2W,Q4X[ShW4+"\8X*N2g%Pme[37H.^f$I?#9[+5;P\j98)41b,G):bQ/W%G&hW,NSS)I*'NQI1e>f8UVI'0eJ%FQjq43Q$:pW(PG[of]sNk`n8@:jk/G6UnDtI06s<"<BI1m+C>%#foZ[2T5ED_)l4i.1;(O`S%$Lopmj22HeBJp&@Bo3#5l17T[-5=eLO-Po`pCa+KRB)6T51cnN6C1c=ErG6*-Qii1f")7+<LST'*oZX+>*CYg,;ck`YGFh?7UAZ;%>gaj90:&%0p,V=],#5.o9FFjRcW]*pSQM%/X/Qb`fWb)%J2k.H^(^t&o[tr<IS#[[C.Xi_Va*=[itXQ`EKi1BgUfFZd=`T7Fb8Zo%=K)s9R6Zu-=Q:kqaZ/@rPj]+0ps1V@gUCU?:OHrA.(9(@Yf7*_65\\f',l,ri>hT9#ir<>1t+*"Ll\$d-)>?Fo2n.ahCH3T//2L0%^5=c"@d>;A((2%V_bO[4H2$4H5VhE1fD<N"gM7M-(=J<7oL/=l3U@.t.(6;s$cJR?27?Z(rAdn&<*L@I_;'Um6O(br(N3j>*dE'=%J)kGVdG<.*h+F[N2MO9Y:=k0AS;C=%+E0\_<J4\0j6(j(T84+]MrS3qOgT-=EBkV6.7ZO55K<TP_I5;c+X$5LYP/%X.tDSnpH-n%%1t!rr;T'Tt,Kf0Z@%TID8piT0*Zj4mie'eP_<a7cdjYuj!r0`s:(_WP;ofkGFQpHP%I+X"!TKG1VGel]"m-UiV[*F)eCB/p?:58\%njt`_ZLN>/oA+o7S<QrD9imZ[37@U4$%N/QA:BTOc6>G:k-8@r;Bh*Ypq>9^7`l-eRTZ$p&'&]lBt_(X]4MW+VqM/7X<Vb'$D=LJ%+XE`k5r0m-lt_=bIsb3mZh5(?,t34S,DDr5!ub\;4/Q&Fk1O6i=4EXlZFj%-S/OOubo83.N;OQVSnoO-2X&K6Gnm8J_p"ah>50n<%*W"AVOK8!]%7Qq!IT\[/S&B$AiblBQYY(2m>H<)_-+6nmY"&bZDk687&2*@U,0*OQUR?GW2A+c3BV1j4QM_#4Y;0Ro6ChWqmE=@J%1>Z&53'#`C.,<"3UP=OBqZe7H!^K^^gF+o\hVEBdR;6`hL*FT5ec\d+O=;/GgB!-l,*;V^6gG+l!Nf\$&i7>i>5uIQ<a&gk`h]km%NJ%PRR"b>)6W!P?!KhL"Ab#<]N4g)+hSJ4Q=s8oTkoj>Rs1OHC+\kU@p:]EhK/p*>8)X2&cnRU+V:LL&3<QNS#\,g0VL^aK"YoNG%MgLVJJl\Uo/R!cDXe[Jf)@%iJMB4$':G4qt#9hornbsL!@X*9X+(O>;%,n@tNBs:SV4!aW_Z_);Vtg%%RH62%Q@d+#3nbZ\<>th+%=7U@dZ''BW"eK&>A$L>(#Hrfl^mZ0AbnX=jWjqRA[QFfqC>g?aUIn!#A2`L^n3=kgW*$C>IBR=9$A/H#P$Ai^-B`Lc'2V*41UK6h%NJ5F/2nA<W=&e-t8sXAjK=`<E])9qXW0^ct=SInk+'T5JaA>JU3mR?Cl`lV'K%JF^(_RE:D'm5V^<sN!pG"+fc]e.E,d4+q4p*IX%+^__hm?l$(NO3pp@?0)47@J%#+tX)8/B`t+9Gn^30,5^WiEf\Ieh0X6i62Q2,Uc:0UY'MHeC9bg'FAL9b1Kq=Q/V8tS/HWS7`!u3%@/"9L#E=5P/GC[M@ZW_iiH:_e22sWhFh7<h9"-RdnTDG:F@PK*^RAF@EGCbHT@1l*M,UI.ACdr!QT4Y[W_T.-m-Ac^kp/>8mX1Sn%4e;VJ4!Ot62BAnN3_u*=\'s(e()j$Yf%q;,8uGE\;n4(-A@)prW2\S!>2jEGLJtbBnZ=#rm,UY'IOa`BY%Ej42o"]Y[4t2t*CaP%%"<g5j?kZ)t`ZRR[^R@aRarhiTkZXH$qZJW+oF/[JpSejYY[>j]8[:Dlbi^5k58ct93nWWP%f-F7iJZiP44o1XLJZ,Rgd0%IBK="j%iuVLKQ%K1I`X4^ah!DtFGAEQCU`Q-t>c3/\1,n8AodAXH4[*e[a>^fEPr.Y5F$e=pl:'#Wm3dV\`T./Rp&(WY]t,PF7.ul1K'/7'%Guim1Hc"7cISu5FKA.rSIT#oeYCRGdUrqOE5!\B4k2,D2IaU&406;(b:L*)H^q"A:kkfu'JNNK8<SuYF],r1;=m*O[`94i<^N]:5%G310c4dEWW.3#L\+F-S]r1kWl]BbL^9nIQS-O"35GtL$T-_1iPJj/&(O`^@54%fnKgOt'Ym4<tE[gi@@48922j0moRCBo@Jm&-,F%M::B9=be`e[!`Z`2f3E@Ca!28l')1Kn?96P^H=[biEp@*J)U93m)$O0_-`Ho#O-*_f-S,VKr?AA+\`@acq!lEiGJ[lj^!Apa;Z>;%+!\rXHNZB'_N"!up6(HjCmp@YR'Y%^6];/%@<@9m2e4he_-]N@=*Ud'O,'q)7sD&r'![GaTVbHEdDE*o5K"_i2iVG:qA?2\Tb&1B%ghiF);6`X=OWS]d0.LM-)uEKB3^;mZ?;u)0M^P!ahVc>5WqN1(q8.$^W2b26D#C6tGYs;fd>8sqe;Hp%Z__f>QXa`k=\7bhq8F8j%Nn3,ZOK>O@i7QGIEt8RaHn1G;BQ@n1UsMNJZ`&GaS>df%cKud`bb)4PU_rmBE0U*Oo&!"836o29YH_H[_[R"N"jUmt!nToP^s@96%9m6am<l%[^STD2H/8k2tSaFu8$ao&&brN)ue2\`?n7q]52shU$L5hT3G%8f0ll+9p0qEA2lILat+n>QGSUt?J<5BV4iXWgg*f1D\%qH!Q6Ud?!f#\`-(D&t97U]j"u((2Ia^iOP&Um]JKNc^X/[KK+A*3KrIlLD"D@)_QaFRLRPOJsS[FR%p8ZA4KK$YB,'#^r3eD*5oF%G!hN"Tm]\^BT17N8-;DT<$'1HO))@76hCkE5O!XYT65KP=tN2/K3e5u5#qO5k(HAoYF2Jt_[AuXAQI[HKsu^72g9N*Pg)QsL(3bR%)Q@b.`blBJoJiSL0ZgT2_:`F:]l9+NpD*!V,V\%/U8gJ=+MW-sEJTkml9@<-8E#LdIP5Z+!r#/hVq6If_U,Z(ZYZ`pjA:>eH'`gd%\&Uer3ktDI/7>^eOXaBqg<Jh=qAV[VZ)kbS#7A@/kVZ0%kVW_9)b7,M7^)@WN&7"ulSV5MCa9M8>4dp#8%iN@Wa:>HjY>+t4?a!i%BHU%Ilf^2oK3^\Oc!%<E)0ToWd+mqEH$mcfc`-GXEGoJ/i`@p8RW/(NLe(/uo>[@D9.f$KiC3nc%M`MFAMZlGS@K"[+oB>"$:Zf\%0(J]pUSV)Y-s5Y>7n[j_8\rf,NdN;AGZ+%DX;-j5ESsDcSN:QQ90km(j[rlWGuE#$IW\oQ#5&]UD$A8b7eIK@D2!uR;)6n1p8)G>%LEnc[\A2T0@Gj_VnqHCS?FGWnf&o;)[,.t%`]=*/0T:%]$=rJ=.@T5d9DQoE?O`d[biHapDtUQOI9/KpoR>fkl*7K<AA$GO#Ju,=%b9(oGH@/cQK6aa6+#LJQ#^U9D?KYf2@=g&E58K`c7$mto$tDtK->P+N7#)q0Ek)^,LH4".V/1[qrs+/4Fiq^%B"_tkK5+htI'AF=%,EI,!cW`pZq-Y?f/jU]=Mj:n*M0qgsJHF7p@Zb-\;k`A&C>Gmm(f2,pjYi\0i>g-G0#GnTDL!=LN<EMl4r(s@eU$NZTfP`r%jLc9%V2:<c;;(i9gt'lp&gUmD/5;(6$,/3,UXI(OQJaaTbON0l6uor-`0EkTn&CKmE0QoOK0W+SJk8)KL(48>h$KAl,4#gAOYH)`Vn[0^%M_W9>;utnRp(U^d?+QXP`%UV!s$CJne@XHN-m_G%9)o8D=)(=s[T[:\foN_lNj;MQ$(M-9P'ja$O:lr4cmeZ<r5eprlirTXCc8i?%dn?=sg`V]F,R:8^UX[jY(IXB.ROjs$@U:W3#he0Z+@F`$iQ]V=*oHfL`*.bSr6"\DLp[@/pK+LM6TC*;Nb_-"Y&lU7c(#ki/7C/C%X,!NW[3='RX&CBf&d1t"2Nf5cH54P`]?6">BfZR[I$_lIL3u:_l]Xei7*]q3]W0es5FBNm>/d#OVT#YMH1:pil73`,'2$ut7N<SK%D@gO<[rmB!ASYh16U^"jC4A+RU*Bd\%hWSuk'q(T0=CB[G-&n.+W8ee`<"^Tiff,;OmV>'dTDUHD$`c+$ZN^spIJVWdVG8cIormG%VsSu3h0DlTbBJ6?G24h!]*A8)?UQ>F]"M&ZQBl!m]p`,IE1b3Ef6tnpA/e2&IIJa@r6O6@[].O-eC7%.^ghA#VM&#M0lScpECn,_%SQ+"r3-0JiOL:[RO7$-CPTf?KL89']F\`lahO?/Y0'I/C)kA\dVZXV]-#r"Xg9%'bR-obQ1^l:[p);J6jWfAUB1%$\((W-WOa_k`%II:THlP3[b;aAiWJS^e>:I./C-23,uWVaG-\\Hpsc6#]f8nV6*s7p1)rTB5iB7d"<",U$^:`]7Nm>t@k3+,,2N@J,0^:6D>pW>CT%pq>G:-Ij2K2RGF]$q,eiR[1Yd&9,)PWed5K%X-aH%0<3GGRY>HR'O=oI&+50G$U$26cAl\p`WnXLWk[co-t@e5BV;#:\2/J#>+V?%A6n0Q'\Kqt$>)bWHJ)N'.NgjE1mHJ4jO#W]$YlIAnLflUekL"n/u]6N/fXNlK.D)\0XKVm_Ve$lct9*QJV/NPVftR`_2Z#;>UP"C%H?#f7:g7`lBeH:J!ph28UbK;V(T:#NY;!Ia(PlY-K#6G<?1@Vi<#Al>$`[L[HD[-G]d-fPkLHt7M*H3iZ%Z`Xq#6'uTp#o[<:b6+%M<qDJae2a`L9b6A;iE$E&60`u0'Bqd?WOe4"?7#[ZuK#2-Q/.rA3SqoP[MD\O%4$RGIM!+)8K[r_9I)?08[^nGp[m!9UQ:\1N`ff%5*$0EG?+(5ns.[F\)a.)o#9O)KmWc,Gb*Oh=e*B6Ubr:-<U-<?'Ftj!V1PrTU_k),BR^SHi\^)?g.+0q#);#DpH'9ME`gMh)\;?.%q!al0UGE'2Y"2WS84=l/Qec99L^\#L^=BOD9Z&h1S_]tTY4S=I2Ib*H#n@J=\PKT1kDhS_qF@qm6Z0PG-#!71M?LchVdH9+4>!$\%\jZGZ`6i1OU4_'8rVW7R5=V^++::2eMAVMc1Q^m`dN2u$_3jX=A,[#GL$Ea6^_e2Vhn],X$d835)<73U"-6Pt3'YPfGEB(OB?Jpu%F9FDIWMsFTm#0QaG-3A6i(Q\rh9NDS_ga`927.hhCObfeZ?"1>Z=LI^W_^uIQ4,*H"kSN]=\As%lSFY4c6NKR[?_5AG-)r-*d1Yg%)Q]O0QWlm6e?37+mr_2aB[N[h&&A(Yh't5UIOprq#[i"T.<X$"L$S*!<]oGg?_=On7<)9\'bBTB=&T.)Z+S[2j8\cVptEgR78)dT%RFjU"h9Eml`@;ZU/a[.n&lI,"&F-h&,B49P:]T?Z-OrK6,?g]W.-:":T@)[<XaI,Q88"2PRAe4"PdeKBh*,3EiJ;BZrX1f@&^$2Z%pCZGN*K(?.\o/D4]q>&NQ_DcEA1Bp%6VI*m1#-=\eG;;t7V3O>Q8h:)B1%B*oIfp'1^@aq-_F!Klrp=Jn-pPK>!8ac*0"eXDdO[r%V#/]:3NSC25nXA)%DLmCmef(hn!%qPP*A+27SZP?l'@,=?O4<bL%+YgaHSi\%QNG?<FU[U6s<k.d=a_JaA.D1f77`l!h!+Er"E2J%:VV;eK%,tcAGX%?)ko5>rgEE]H.=/3B/<:%Ge_PL4[.!7C+us@s/b'6aJT)3JU.Ip>Y%lAfe)B_JoX7.5]h3UOO*:92e#Ak=u&:!%;Sa5$(VJ,QYZ`ZX4B(uZ.u.+.EmMNS[71i5Bb9gS':`R;'0n%uf)c[lYkTSL<P7O.qabGu'tk3OTP"=LnckprT#u7nR-VW6`6C,B%Wm=(4jXc-^Db,O)XCi>4\AlbtksePIOcQ&>Ie+]ZYY/@/mi+j4TVd=.2pG[W6_k@\*:CrFh:GQ3XZGN2UVe7r`b!VBXBSQt@Fbig%)85H/NhrT.-[GE&pRfgA8!^5DZ0i!dcSRU<0AR,!^L>6f9F_O3_1E!8F(l@VS/!1%f%E7,Y,[R_l/idq,75r\?Zsr<'Vg7t6ml)$%nMCB,\LCQ!E*!Sd)Q,<I^f8&]k8Zp@:'/46&#"CG7[.?i;hr;`JJde%^j1\B?B1W,.H'\]2;%Et-`i4R!<pZ.rsXj7&s>OMI(.q!%@[7*5rKu=R?=OW('3MM7d$gE7WL)MVMg__2YEfX5U2UGbO@%Sk'1JIo?2HpMq)G/8E:NtQHW"QA^6O^7r)W/n0cGj\ip^G;h?nT>%4L&@JAZs/QM'*94=+e9NPt>oa1DnHIZ<OTnA\$2Z-Rsc*Ud*K=PCqjm.Li#s(=c0)1]Ih[F=QaIg37u.,1ig,1\^^AHsOIXK<&UG%iXEki*(lRF$rPF,Hdj!<A1tXTe%:Jr_OPWhWVm`06bT<a<1\m+cbj2P9ph_oH)@cd&]</#q-:BGT!jZ?:,9/'\pelC'daI]S#Z8U%^u/_ZKj6@a__ePX.SOhIR_"uEK)$rKM#6A\)npTs,2dD.]`(H7)od(1*sZcE>8rQJmtI:L&fI<+6'uOZCUMTprPAC[NB'IjTpWh^%5!ihOh4H'hb3eB[':'SF0o<7%1*_Bs$JHe0>(^o_`N'K\*QFS@1i*U2gr%i^<.7]`M!CP2I,(o/R/28]<[u/p<U3HR-$q$T*/.B_%+?X`BKk=X@&u)B-eXh'#WET;Nh'3-?l\<"6g/1BUL@_/-]-\pMrWOJ7)Te1H1Iaf3m>M(f&u)Eqm@(qNLO-LJQU?"GTe`q0LaZ=E%/0n812ksmq+tfnh"Tq&6/GeSJcTBQ+ig2As*Orn&1dGX>I3VEp),q!DD?KK<n.Kt!IjTk*C.t!3%T[2Z7Eh\nO)O\,f0"_R=+V`!%O.4i(P[=XZ2C[4VnMWTUV8J#hX^l"YJh-^G1f9WC#AfHh*dD%(HR-i5+Pi&DNjXH4leZTRE+QiY]6^n5'Stfj&b+>K,*$@Db"5ZB%s,]jDhhYfe`r2(Vq)Xjdlk$MLo=prAL8`f4C9C1r]UrR7mW87qhIiQt,CU0`!1A!I,:b[bRq(I56`PVoKJdi;6WbN5-igAV'sUOC%/V!ehY1OX5'e<t54%MZ&5X#KaW<:1W^fX@+l;dL%(TSMt:)GMcj<^!i<N274P@QPp-X&eu5-jDX3l4fm]n0)6?H+h([lY$==M!<Y%3C]sDEAQr^?P:fSe$F*P^[Hs3rJLr+!#MFd,X&+"3UeingcpuAB^6SP(Q8T7d<N?\X;0X&,)Wp&:q`3Q@k/$6VjN_<N[<l7h"/[?%M4Q#;]Y;g37;AL)VeZ9Y.E,7\^s+7.b,-Q1#:jgYEB8h*o.%2/J3`[m5,DmN^XBH80fD-5,Ct/cpkB(adKgDhBTc'?\Fge6-Q(4i%/]ZgM'0uTipju#F_%,J!OFW3B;7.d].,Za@NYKE>9i?ChII:tr?YmKZ>^+KkJ%]-5G8!IZrrhp6-7iJ>^uN->kMT1H&eb<Q0BBCS%0ubpN@>OGkQ@JV7n#raP)/Fo1Cd#W[BM-b(?.F)qWd5q-4P782X800\SCCqQlS\CsMmjY7_"#8nW:JQ<X='T]p%cQss$Df&GLC5\%a5D"-oBZ!s4$EPTr(0,fr]7\B9";$N-!XdPlAOPX$HtuC!a<k7?3T,^.$jd.-!]2PI8H/IH0(EIhI!H9aHNn:ns0\a^`U4VVhD6d%J%U4-e*SO9_6qN0O0W3O>l-_b-oZ(dDr$+3*u?5FlQ<M:.b?<g/T/^^(5IW$AC.E:=O8u6/Abl7i;MuL)$]?QaO@I\PeT?,,>Rq;%ILN-[TWa_FNu0:ZY0LN2j-;!tQuqYPMnohEcSY1\%@p.Na."$];9bIB5D8]D(=0.AO0U_KK2cNeT#\J)<H56d1'9q3:U$KFp,^eD%-7`0]!WP/2::V>9I3r#kYm0(`O0.EH>lW;km!SIncTj^catRAAO,AGgC[<TA`G"D@<geAc`8]T@Hr?4WV7cJZpEVP>J)S]/RshYc%s1&"!;#`D_'>S?7hg,)pg##:1G5jb=DsP:%U05cg=gKP#<Z=+l0mB43VqKsgn*Z`pZejHhR5X6R]?SfXN1l6UZFG8OqSp(a8=uPK%2KlO%OZntSau*]KRpF#)B.N0:puh,,?onT2q=H4]0DbA5ARr?`rcNE;O5G)D=a*#?7co=-.p'nqnU1(Ck(D4V)fV,L:Hp?enGS!R%k7*F$H5Q>0oYf'PDBIu_OM9<p^QPX&X5mH"cm5H:V#?aO%%$b4e=TW7FjcP+[l8%F.>DEdV3gjCA@Cg7;r>)?Ht2KbDZ=9FhldRJ%HKOteR#U&Dmj@r)NL:E?qGjK^#.2FOccaQt>TJ9hRtAJ7qGtXZ!kG1!`AN%%D#+C)Wm86.*ms)e+n+Uk=%KY.F(#D[goOjLI._sV%Fi1l5-6@&DKe7MPh'9<jb\VJF5%_6LE6pi\s5fQm\fmjEH%">B5Q50$O)@_)rQ@-Kh#1`@5JV<*O/h!KrDimfL)GGF,;8`-0CqC(%_I'UsJ,&,nXsXorrZ2T_P,0i-$_QOq9j^Ggq/u*rh;5T\IOB6tTA5&P"7I=BMgqsT3Gh?)*O3<IZThD1$>,s7rGl[$GHRlH-tiM.%=oiO(mV1QPh4S]*\\aA-]kO#hLOJQZGiuo,HDn'6cX,RVoo"3X4V>WQJ&ab&S.CFcrCZ`e2q*%`8`d'e0:q`daVWQm';dr$r3'6@%G[Q%!E&#(uhOIn3\4n[9AbDbhXjP8WOmTb3hjs(7o(b\">3Pqb^1gugFPO*KleobOW1d?s!Tg5mUOU%R)sm:C^&;";><<r#%NF)u%56?>us$!khKiV?7$VT!OkKPL6gWHpIl_%D6hRIQMo^/^8UK;@EFq-aDRm_RCJ*ZX<DqiMph7JYn^MHuV)R5:6n^\VLDerp;gPolb%i9ulES%fl(VoIg'>^V;CItI<:CYJ[Qe)*RjK'n$9clI$C054Ejr3&s9Y6=kejnH6QQd%2.!FA!(7-9qkHa6QV4HV`hb<PJLmd7ZD%6FEP/4r>mIKs2`Y72.Mg.`ID-,"[T#+H@0'r?R6,Yqss==XJ=/.>pWRC"!+-Gtb)&.td2iNh?O*Gpe$@7-K"p^8L<U9"RhH)[CT?%cq,ZQc`*h,q'O@R2BC/O^ga*SHg]=*g1`]P6_T%^L^&.il3j_\Y](]M@5:>3>L!%eX@>)XlP&Xi*Nmd5)f1J:G2DTA4*\%)?X.*V%`_T*C%mLcFQVB7i1>_.@0,iHFY-h&S=a7E:D6T>?$f89P\B[-NYdG_([$$BPSb+PA>/r6V&RfpY;pM=BA#GQAd$:okk\*"e]^BK'%Ju;YLk>WmQ\k+]T9a<LK'M5p%]=+^Ic4/?$.?e@;K/dH8rQ$1(ANm/Ja]L2(m]-)1]BZ3[>_HjV'ckLq@9^dZl%%o(ra=PCD93=H%2F2Q',.9P1aaZu[fkjuirJ\1_H)WiANU8b!PVV-l):PGbRYJElR^$nRSf9'$?k%fFBuW!N;cd<r<XC;NOWGijFL0o^lHcrK8fK22%605IQbku'HReEP-m;SL\We79D"@b[]-6;g*F:oNm$#iuq4)KT8Bj0iJB^I:A8gnbs0kO#+Sn(FYjA)*tK!DSB[S1#1&V4RC'[-*2%l_#G$juSZP102AG)lZ$Y7N+iJFcMZBOO3Ba3OJ%$AjT#@`#+Up8&>Gf5)@'p3Y@A?.D(Rr86VIt;5%+q0Ve-30^8sU[Ri9P9a<Lk%UCkjfAKG-T-(MHITF_[RB1WZ2XLo%DZ;o0p%8>ntA\hZ;T0K#!V`O'O*$j$+l4^0)QmbM]-WC8o"p`LP'3D"=&o+8nZrf?]PVV&;%TamC8du<^r-/YfZ<TjibB!@"V)'m^()^Np^A.c%$T2ia=XHs*7<@kkb[!UM*W?BrIH=qF5Oj9,6E,P7MFu?)$JmaX,i/s+5X8/`F%p,NP*Nidr-]9[u!-=ESh!YdpDYgpgB;GkL;mNn*Rm==!nKkdY#00SWE1pTIGdmt_3m%-XS9dc@)5Yc9;-Qo\5`?@W#S=i91W3):o%NeAXU!g1o]9q_;%hM&^?kDU78@IVlaqQK!<\DX"`dD=e+7_-ts&%Fc03/?<5/`IP'TRn;:PIssH"F3\Ne'9a>A:k-k5XCLZq\XQ-%Q/I)H56E'g11VfEM^G=jI=0hU`+K$\47+sA/dNG,'94eNpgjd#85r\<_h]_B/qB+eMEk*J"ZSen*\h">R"4b'JFV:+7L_JTTMbbu%K++oX+:G8E/$pVLc;d.&;o"#peB%L%Kj`tYV^P_Mq+j0(4DRI.$^@e>0M3JXBW;aeUfUib?+T"U-pabP"tiDfMQ1PR42n.cZ7WKt%cKFP77-EctfV4=jnlX[F3i!Q+\Ql$HbR'jM3:C@6>fXi:bOuZC0[,@D>Bi^#BgX:2Jk<`bW3he$=glYl<+VTD\lJhf^oUbY2S@t^%"%WtD&-X4^3DSrq95]>0%:JM$J3rD:(,/0rKo?#^BceN0Mr)mdfI7[Q;Zq+P;l$8X"01PjX(JRu9A<o^<d@@e+`H;CY+e^0aPds1%J<h*@(M-8L&b[>!?lLlY`Mf1Q%e6&5H*39!,]#0I?%`3/&.2h2Bp_EE+ugB9;$!U<+p%6\J-QluToU^gX?p,a]b\["Pm5-;%3Z1(%CdJkQA.CPpP0_Q<["Qi:ZS]J[6rtd="IO2.4l2,he"1)!\RAn^;SjgYo#&=5&?5!gDIXiC,Q6.s?l%T!:fSirckf1sd^1B!D?iLG%.q;1@#'-$?b;Iqr:^Ge<"W(&OWN[D"4W/$E1#OD=_SD.S0BVXi,k9.i?DK!(cmIO]1G.NM&?$GefX)uY?kFNPL1>OM\^1T(dn__H%8m$s=)A"mn<%DB$neU1VDR;*$(BF[bgkHlbT8j/=nQM0]=s0%4`:a`_0,aYa_1c][j"9$d]8p@fJ_<VNl$2"SO@C@;K8"?;TcPf*%;?^b4d\89?'nr:t'iYc*U;Kg%iT(W5c#]r&9-:\)R(7]\dY:k#?.+"]3C^,IjhgHIdNGAU3=EV&\;29,MTEffUoK!CO>3]kiIp5d%m*$$(H3)>"o/n[u/.>d$!KMUMa0ROBb@EN?Mn[EVU/UcMW_6tK6t'FM9(mP(`[$]58sZ1pVY[.([cKOq4"sO_W<rsZ^Mlbl:#PR?%[J(\K7\-_oI_QFBS&25jV%&9$^60@>l>h8\9MX8(V4d5W8bp4L7k#ZOGDr1<8Kjm@C0rFSN`&PMK$$%pK]3dRWnIt4$H6<h<CeIf%eYMjM>fEO2lu9'^^5t3A;lqN"W)^\[(;L\g7Ys[,8>b02VcKnI>_dpjo<'<-)4cZfafEcP8L:'?C?;G#(ho-S9V#I(^'3V=iLpkp%-b75toWBG"(UHZ+mVU#X78YJ)6>-```k89G@`a>Mk2M7U6Q*j@?)hk*C9lAuDphD5ZG@mDJq%(_i,f3)S`\HLXZurZkKV3)i\R:r%67?=X^E[5s9$iUj.nl'pAKr?@=O\'a(P!-.g(rJFW(B[P&XSaEa`+qe(7Cjk,aC_PqbF7\Yro#s6KGbc=5<hC*OoM<SpPd*Y/id#%bi3Fj1[YS'FIX[<(,C%\O@9=<[[oolAuMrm-3dHRO=p*B@8"1leL%9A;f<&dE`Fe3\tHLp*Wqp*gN-TGB4X!1o6Ef;F2@WV1H6VZ%imS!8!@6ra'MPKocTri^%uPSa]rgrfC?QW_X;<>6BOAWM%6F)LkffjD.F$M^#cK0]Za.$<,j.ThfEpk>iIfEHnd+eq%Sm7C4&\1'%3HdJW$`@s/"/W?W)J,uN+-fsK0h[`2j]m]4'ZMUO-OP1t+HLTDj;`<$`+:US)]>!ne[$kkW'F"-7oH>FS5,u[AaVf^)SQ@UN1foi%=M`j,##bhR'0D,2VDN=CWk![X\;r'ZdZQ=XMW3D:V@sB/)DZqOmN@B+JdOe75!.=Rn>XOR8<VafWkm=S>\@Pc]^Q?pS1[iO?mUj0%5Y)?TKg<Ro1j#uf[<+OG9E`)RdbrS^rq*kcVU@IPJ7n5qOtW_H5i<nF$k6@!Nbpeb>=rg7+moAuduchE&^V]I`!DFIB'KL(mAPj/%[,@/'nW:`VD(]E;gY;PL`B3Hl5+GN@ok,`&8cbr77aM_k4cVtu7ZE3lXfp#='C,7.'*raQ"R76<V+o:1Vj(mBc'UC0cq'M%W!d6Q%I%rI]k:Qo&]?QGA'4o.:<(+l6B4[Zn['8J&l'W#Sc^=:hq*aIYUh<ZZ.u`f[0?]4&pk&C*RQ1Z:k7b;VQ`(*$q$m]fM9EVJM?t&#%>Cnb5@m$UT$Rq`7`WJuudXXBT<'8hHRfNc0f>W=\#ZC/,IB6@UU\NXnC-bm8?RbgdQ%VriT5(X\4]<(#"1KNuP:h7rQ><G+)P;q)%>7c;i:3QRZRk(-X<)Qj)dRZ\?AJLo)NtkU4gh<oEj,mO$>*CX5XCJQuPUpr$-inP0DH2"9@p-jQTbE/8%YQc-1/c?ZMlLs=pqW?e%1!t"CSK5-]csLtqr%p0Y#fN9?D;@n32W$Q?_+u2WY;[s^5ORn,rHu-HC:\WAm(_HRcX+5)E:ER7k@j<)hJ)]ppYLQ&?Mj``gV8Ss%+m&E_Q!4c:2ua,Ur#um~>%AI9_PrivateDataEnd